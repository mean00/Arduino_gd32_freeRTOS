#![no_std]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use core::panic::PanicInfo;

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    unsafe{
    deadEnd(-10);
    }
    loop {}
}
/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const LN_ARCH_UNKNOWN: u32 = 0;
pub const LN_ARCH_RISCV: u32 = 1;
pub const LN_ARCH_ARM: u32 = 2;
pub const INPUT: u32 = 0;
pub const OUTPUT: u32 = 1;
pub const INPUT_PULLUP: u32 = 2;
pub const NONE: u32 = 0;
pub const CHANGE: u32 = 1;
pub const FALLING: u32 = 2;
pub const RISING: u32 = 3;
pub const LOW: u32 = 0;
pub const HIGH: u32 = 1;
pub const configPRIO_BITS: u32 = 4;
pub const configLIBRARY_LOWEST_INTERRUPT_PRIORITY: u32 = 15;
pub const configKERNEL_INTERRUPT_PRIORITY: u32 = 240;
pub const configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 5;
pub const configMAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 80;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 1;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 0;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_IDLE_HOOK: u32 = 0;
pub const configUSE_TICK_HOOK: u32 = 1;
pub const configMAX_PRIORITIES: u32 = 16;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 1;
pub const configMAX_TASK_NAME_LEN: u32 = 16;
pub const configUSE_TRACE_FACILITY: u32 = 1;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 1;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configTASK_NOTIFICATION_ARRAY_ENTRIES: u32 = 5;
pub const configTIMER_TASK_PRIORITY: u32 = 5;
pub const configUSE_TIMERS: u32 = 0;
pub const configTIMER_TASK_STACK_DEPTH: u32 = 400;
pub const configTIMER_QUEUE_LENGTH: u32 = 10;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 0;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const INCLUDE_vTaskPrioritySet: u32 = 0;
pub const INCLUDE_uxTaskPriorityGet: u32 = 0;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const configUSE_MUTEXES: u32 = 1;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const configUSE_TIME_SLICING: u32 = 0;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 2;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configQUEUE_REGISTRY_SIZE: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 8;
pub const portNVIC_PENDSVSET_BIT: u32 = 268435456;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 1;
pub const portBYTE_ALIGNMENT_MASK: u32 = 7;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const configSTACK_ALLOCATION_FROM_SEPARATE_HEAP: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const INCLUDE_xTaskDelayUntil: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 0;
pub const INCLUDE_xTaskAbortDelay: u32 = 0;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 0;
pub const INCLUDE_xTaskGetHandle: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 0;
pub const INCLUDE_eTaskGetState: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 0;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 0;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 0;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const configASSERT_DEFINED: u32 = 1;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TICKLESS_IDLE: u32 = 0;
pub const configUSE_QUEUE_SETS: u32 = 0;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const configRUN_ADDITIONAL_TESTS: u32 = 0;
pub const tskKERNEL_VERSION_NUMBER: &[u8; 8usize] = b"V10.4.3\0";
pub const tskKERNEL_VERSION_MAJOR: u32 = 10;
pub const tskKERNEL_VERSION_MINOR: u32 = 4;
pub const tskKERNEL_VERSION_BUILD: u32 = 3;
pub const tskMPU_REGION_READ_ONLY: u32 = 1;
pub const tskMPU_REGION_READ_WRITE: u32 = 2;
pub const tskMPU_REGION_EXECUTE_NEVER: u32 = 4;
pub const tskMPU_REGION_NORMAL_MEMORY: u32 = 8;
pub const tskMPU_REGION_DEVICE_MEMORY: u32 = 16;
pub const tskDEFAULT_INDEX_TO_NOTIFY: u32 = 0;
pub const LN_IRQ_OFFSET: u32 = 0;
pub type size_t = cty::c_ulong;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __suseconds64_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: cty::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: cty::c_uint,
    pub __wchb: [cty::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = cty::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: cty::c_int,
    pub _IO_read_ptr: *mut cty::c_char,
    pub _IO_read_end: *mut cty::c_char,
    pub _IO_read_base: *mut cty::c_char,
    pub _IO_write_base: *mut cty::c_char,
    pub _IO_write_ptr: *mut cty::c_char,
    pub _IO_write_end: *mut cty::c_char,
    pub _IO_buf_base: *mut cty::c_char,
    pub _IO_buf_end: *mut cty::c_char,
    pub _IO_save_base: *mut cty::c_char,
    pub _IO_backup_base: *mut cty::c_char,
    pub _IO_save_end: *mut cty::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: cty::c_int,
    pub _flags2: cty::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: cty::c_ushort,
    pub _vtable_offset: cty::c_schar,
    pub _shortbuf: [cty::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut cty::c_void,
    pub __pad5: size_t,
    pub _mode: cty::c_int,
    pub _unused2: [cty::c_char; 20usize],
}
pub type cookie_read_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut cty::c_void,
        __buf: *mut cty::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut cty::c_void,
        __buf: *const cty::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut cty::c_void,
        __pos: *mut __off64_t,
        __w: cty::c_int,
    ) -> cty::c_int,
>;
pub type cookie_close_function_t =
    ::core::option::Option<unsafe extern "C" fn(__cookie: *mut cty::c_void) -> cty::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn rename(__old: *const cty::c_char, __new: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: cty::c_int,
        __old: *const cty::c_char,
        __newfd: cty::c_int,
        __new: *const cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: cty::c_int,
        __old: *const cty::c_char,
        __newfd: cty::c_int,
        __new: *const cty::c_char,
        __flags: cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const cty::c_char, __pfx: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fcloseall() -> cty::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const cty::c_char, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const cty::c_char,
        __modes: *const cty::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(__filename: *const cty::c_char, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const cty::c_char,
        __modes: *const cty::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: cty::c_int, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut cty::c_void,
        __modes: *const cty::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut cty::c_void, __len: size_t, __modes: *const cty::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut cty::c_char, __sizeloc: *mut size_t) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut cty::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut cty::c_char,
        __modes: cty::c_int,
        __n: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut cty::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn printf(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const cty::c_char, __arg: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut cty::c_char,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut cty::c_char,
        __maxlen: size_t,
        __format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut cty::c_char,
        __maxlen: size_t,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut cty::c_char,
        __f: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __asprintf(__ptr: *mut *mut cty::c_char, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn asprintf(__ptr: *mut *mut cty::c_char, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: cty::c_int,
        __fmt: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn dprintf(__fd: cty::c_int, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn scanf(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(__s: *const cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const cty::c_char, __arg: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const cty::c_char,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const cty::c_char, __arg: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const cty::c_char,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar() -> cty::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> cty::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fputc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar(__c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putw(__w: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut cty::c_char, __n: cty::c_int, __stream: *mut FILE) -> *mut cty::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut cty::c_char,
        __n: cty::c_int,
        __stream: *mut FILE,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __delimiter: cty::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __delimiter: cty::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const cty::c_char, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn puts(__s: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn ungetc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut cty::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite(__ptr: *const cty::c_void, __size: size_t, __n: size_t, __s: *mut FILE)
        -> size_t;
}
extern "C" {
    pub fn fputs_unlocked(__s: *const cty::c_char, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut cty::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const cty::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: cty::c_long, __whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> cty::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn fseeko64(__stream: *mut FILE, __off: __off64_t, __whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> cty::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> cty::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn perror(__s: *const cty::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn popen(__command: *const cty::c_char, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut cty::c_char) -> *mut cty::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(__obstack: *mut obstack, __format: *const cty::c_char, ...)
        -> cty::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const cty::c_char,
        __args: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __n: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __n: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __c: cty::c_int,
        __n: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memset(__s: *mut cty::c_void, __c: cty::c_int, __n: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const cty::c_void, __s2: *const cty::c_void, __n: size_t) -> cty::c_int;
}
extern "C" {
    pub fn memchr(__s: *mut cty::c_void, __c: cty::c_int, __n: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn rawmemchr(__s: *mut cty::c_void, __c: cty::c_int) -> *mut cty::c_void;
}
extern "C" {
    pub fn memrchr(__s: *mut cty::c_void, __c: cty::c_int, __n: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const cty::c_char, __s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const cty::c_char, __s2: *const cty::c_char, __n: size_t) -> cty::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const cty::c_char, __s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut cty::c_char, __src: *const cty::c_char, __n: size_t) -> size_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const cty::c_ushort,
    pub __ctype_tolower: *const cty::c_int,
    pub __ctype_toupper: *const cty::c_int,
    pub __names: [*const cty::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __l: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strndup(__string: *const cty::c_char, __n: size_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strchr(__s: *mut cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrchr(__s: *mut cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strchrnul(__s: *mut cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const cty::c_char, __reject: *const cty::c_char) -> size_t;
}
extern "C" {
    pub fn strspn(__s: *const cty::c_char, __accept: *const cty::c_char) -> size_t;
}
extern "C" {
    pub fn strpbrk(__s: *mut cty::c_char, __accept: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *mut cty::c_char, __needle: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut cty::c_char, __delim: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut cty::c_char,
        __delim: *const cty::c_char,
        __save_ptr: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut cty::c_char,
        __delim: *const cty::c_char,
        __save_ptr: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *mut cty::c_char,
        __needle: *const cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const cty::c_void,
        __haystacklen: size_t,
        __needle: *const cty::c_void,
        __needlelen: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __n: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __n: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn strlen(__s: *const cty::c_char) -> size_t;
}
extern "C" {
    pub fn strnlen(__string: *const cty::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: cty::c_int,
        __buf: *mut cty::c_char,
        __buflen: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strerrordesc_np(__err: cty::c_int) -> *const cty::c_char;
}
extern "C" {
    pub fn strerrorname_np(__err: cty::c_int) -> *const cty::c_char;
}
extern "C" {
    pub fn strerror_l(__errnum: cty::c_int, __l: locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn bcmp(__s1: *const cty::c_void, __s2: *const cty::c_void, __n: size_t) -> cty::c_int;
}
extern "C" {
    pub fn bcopy(__src: *const cty::c_void, __dest: *mut cty::c_void, __n: size_t);
}
extern "C" {
    pub fn bzero(__s: *mut cty::c_void, __n: size_t);
}
extern "C" {
    pub fn index(__s: *const cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn rindex(__s: *const cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn ffs(__i: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ffsl(__l: cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn ffsll(__ll: cty::c_longlong) -> cty::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const cty::c_char, __s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __n: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __loc: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut cty::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut cty::c_char,
        __delim: *const cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strsignal(__sig: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn sigabbrev_np(__sig: cty::c_int) -> *const cty::c_char;
}
extern "C" {
    pub fn sigdescr_np(__sig: cty::c_int) -> *const cty::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strverscmp(__s1: *const cty::c_char, __s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut cty::c_void, __n: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn basename(__filename: *mut cty::c_char) -> *mut cty::c_char;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const PA0: cty::c_uint = 0;
pub const PA1: cty::c_uint = 1;
pub const PA2: cty::c_uint = 2;
pub const PA3: cty::c_uint = 3;
pub const PA4: cty::c_uint = 4;
pub const PA5: cty::c_uint = 5;
pub const PA6: cty::c_uint = 6;
pub const PA7: cty::c_uint = 7;
pub const PA8: cty::c_uint = 8;
pub const PA9: cty::c_uint = 9;
pub const PA10: cty::c_uint = 10;
pub const PA11: cty::c_uint = 11;
pub const PA12: cty::c_uint = 12;
pub const PA13: cty::c_uint = 13;
pub const PA14: cty::c_uint = 14;
pub const PA15: cty::c_uint = 15;
pub const PB0: cty::c_uint = 16;
pub const PB1: cty::c_uint = 17;
pub const PB2: cty::c_uint = 18;
pub const PB3: cty::c_uint = 19;
pub const PB4: cty::c_uint = 20;
pub const PB5: cty::c_uint = 21;
pub const PB6: cty::c_uint = 22;
pub const PB7: cty::c_uint = 23;
pub const PB8: cty::c_uint = 24;
pub const PB9: cty::c_uint = 25;
pub const PB10: cty::c_uint = 26;
pub const PB11: cty::c_uint = 27;
pub const PB12: cty::c_uint = 28;
pub const PB13: cty::c_uint = 29;
pub const PB14: cty::c_uint = 30;
pub const PB15: cty::c_uint = 31;
pub const PC0: cty::c_uint = 32;
pub const PC1: cty::c_uint = 33;
pub const PC2: cty::c_uint = 34;
pub const PC3: cty::c_uint = 35;
pub const PC4: cty::c_uint = 36;
pub const PC5: cty::c_uint = 37;
pub const PC6: cty::c_uint = 38;
pub const PC7: cty::c_uint = 39;
pub const PC8: cty::c_uint = 40;
pub const PC9: cty::c_uint = 41;
pub const PC10: cty::c_uint = 42;
pub const PC11: cty::c_uint = 43;
pub const PC12: cty::c_uint = 44;
pub const PC13: cty::c_uint = 45;
pub const PC14: cty::c_uint = 46;
pub const PC15: cty::c_uint = 47;
pub const PD0: cty::c_uint = 48;
pub const PD1: cty::c_uint = 49;
pub const PD2: cty::c_uint = 50;
pub const PD3: cty::c_uint = 51;
pub const PD4: cty::c_uint = 52;
pub const PD5: cty::c_uint = 53;
pub const PD6: cty::c_uint = 54;
pub const PD7: cty::c_uint = 55;
pub const PD8: cty::c_uint = 56;
pub const PD9: cty::c_uint = 57;
pub const PD10: cty::c_uint = 58;
pub const PD11: cty::c_uint = 59;
pub const PD12: cty::c_uint = 60;
pub const PD13: cty::c_uint = 61;
pub const PD14: cty::c_uint = 62;
pub const PD15: cty::c_uint = 63;
pub const PE0: cty::c_uint = 64;
pub const PE1: cty::c_uint = 65;
pub const PE2: cty::c_uint = 66;
pub const PE3: cty::c_uint = 67;
pub const PE4: cty::c_uint = 68;
pub const PE5: cty::c_uint = 69;
pub const PE6: cty::c_uint = 70;
pub const PE7: cty::c_uint = 71;
pub const PE8: cty::c_uint = 72;
pub const PE9: cty::c_uint = 73;
pub const PE10: cty::c_uint = 74;
pub const PE11: cty::c_uint = 75;
pub const PE12: cty::c_uint = 76;
pub const PE13: cty::c_uint = 77;
pub const PE14: cty::c_uint = 78;
pub const PE15: cty::c_uint = 79;
pub type _bindgen_ty_1 = cty::c_uint;
pub const GpioMode_lnFLOATING: GpioMode = 0;
pub const GpioMode_lnINPUT_FLOATING: GpioMode = 0;
pub const GpioMode_lnINPUT_PULLUP: GpioMode = 2;
pub const GpioMode_lnINPUT_PULLDOWN: GpioMode = 3;
pub const GpioMode_lnOUTPUT: GpioMode = 1;
pub const GpioMode_lnOUTPUT_OPEN_DRAIN: GpioMode = 4;
pub const GpioMode_lnALTERNATE_PP: GpioMode = 5;
pub const GpioMode_lnALTERNATE_OD: GpioMode = 6;
pub const GpioMode_lnPWM: GpioMode = 7;
pub const GpioMode_lnADC_MODE: GpioMode = 8;
pub const GpioMode_lnDAC_MODE: GpioMode = 9;
pub type GpioMode = cty::c_uint;
pub type lnPin = cty::c_int;
extern "C" {
    #[link_name = "\u{1}_Z9lnPinModei8GpioMode"]
    pub fn lnPinMode(pin: lnPin, mode: GpioMode);
}
extern "C" {
    #[link_name = "\u{1}_Z14lnDigitalWriteib"]
    pub fn lnDigitalWrite(pin: lnPin, value: bool);
}
extern "C" {
    #[link_name = "\u{1}_Z13lnDigitalReadi"]
    pub fn lnDigitalRead(pin: lnPin) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnDigitalTogglei"]
    pub fn lnDigitalToggle(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z23lnGetGpioToggleRegisteri"]
    pub fn lnGetGpioToggleRegister(port: cty::c_int) -> *mut u32;
}
extern "C" {
    #[link_name = "\u{1}_Z26lnGetGpioDirectionRegisteri"]
    pub fn lnGetGpioDirectionRegister(port: cty::c_int) -> *mut u32;
}
extern "C" {
    #[link_name = "\u{1}_Z22lnGetGpioValueRegisteri"]
    pub fn lnGetGpioValueRegister(port: cty::c_int) -> *mut u32;
}
extern "C" {
    #[link_name = "\u{1}_Z10lnReadPorti"]
    pub fn lnReadPort(port: cty::c_int) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnRemapTimerPini"]
    pub fn lnRemapTimerPin(timer: cty::c_int);
}
#[doc = " @param p"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnFastIO {
    pub _onoff: *mut u32,
    pub _onbit: u32,
    pub _offbit: u32,
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnFastIOC1Ei"]
    pub fn lnFastIO_lnFastIO(this: *mut lnFastIO, p: lnPin);
}
impl lnFastIO {
    #[inline]
    pub unsafe fn new(p: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastIO_lnFastIO(__bindgen_tmp.as_mut_ptr(), p);
        __bindgen_tmp.assume_init()
    }
}
pub const lnEdge_LN_EDGE_NONE: lnEdge = 0;
pub const lnEdge_LN_EDGE_RISING: lnEdge = 1;
pub const lnEdge_LN_EDGE_FALLING: lnEdge = 2;
pub const lnEdge_LN_EDGE_BOTH: lnEdge = 3;
pub type lnEdge = cty::c_uint;
pub type lnExtiCallback =
    ::core::option::Option<unsafe extern "C" fn(pin: lnPin, cookie: *mut cty::c_void)>;
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiAttachInterrupti6lnEdgePFviPvES0_"]
    pub fn lnExtiAttachInterrupt(
        pin: lnPin,
        edge: lnEdge,
        cb: lnExtiCallback,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiDetachInterrupti"]
    pub fn lnExtiDetachInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiEnableInterrupti"]
    pub fn lnExtiEnableInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z22lnExtiDisableInterrupti"]
    pub fn lnExtiDisableInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z7pinModehh"]
    pub fn pinMode(pin: u8, b: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z12digitalWritehh"]
    pub fn digitalWrite(pin: u8, val: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z13digitalToggleh"]
    pub fn digitalToggle(pin: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z11digitalReadh"]
    pub fn digitalRead(pin: u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10analogReadh"]
    pub fn analogRead(pin: u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z11analogWritehi"]
    pub fn analogWrite(pin: u8, val: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z15attachInterrupthPFvvEi"]
    pub fn attachInterrupt(
        interruptNum: u8,
        userFunc: ::core::option::Option<unsafe extern "C" fn()>,
        mode: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z15detachInterrupth"]
    pub fn detachInterrupt(interruptNum: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z6millisv"]
    pub fn millis() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z6microsv"]
    pub fn micros() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z5delayi"]
    pub fn delay(ms: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z17delayMicrosecondsi"]
    pub fn delayMicroseconds(us: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z12noInterruptsv"]
    pub fn noInterrupts();
}
extern "C" {
    #[link_name = "\u{1}_Z10interruptsv"]
    pub fn interrupts();
}
extern "C" {
    pub fn deadEnd(code: cty::c_int);
}
extern "C" {
    pub fn vPortEnterCritical();
}
extern "C" {
    pub fn vPortExitCritical();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
extern "C" {
    pub static mut SystemCoreClock: u32;
}
extern "C" {
    pub fn do_assert(a: *const cty::c_char);
}
pub type TaskFunction_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
pub type StackType_t = u32;
pub type BaseType_t = cty::c_long;
pub type UBaseType_t = cty::c_ulong;
pub type TickType_t = u32;
extern "C" {
    pub fn vPortSuppressTicksAndSleep(xExpectedIdleTime: TickType_t);
}
extern "C" {
    pub fn vPortValidateInterruptPriority();
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut cty::c_void,
    ) -> *mut StackType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapRegion {
    pub pucStartAddress: *mut u8,
    pub xSizeInBytes: size_t,
}
pub type HeapRegion_t = HeapRegion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xHeapStats {
    pub xAvailableHeapSpaceInBytes: size_t,
    pub xSizeOfLargestFreeBlockInBytes: size_t,
    pub xSizeOfSmallestFreeBlockInBytes: size_t,
    pub xNumberOfFreeBlocks: size_t,
    pub xMinimumEverFreeBytesRemaining: size_t,
    pub xNumberOfSuccessfulAllocations: size_t,
    pub xNumberOfSuccessfulFrees: size_t,
}
pub type HeapStats_t = xHeapStats;
extern "C" {
    pub fn vPortDefineHeapRegions(pxHeapRegions: *const HeapRegion_t);
}
extern "C" {
    pub fn vPortGetHeapStats(pxHeapStats: *mut HeapStats_t);
}
extern "C" {
    pub fn pvPortMalloc(xSize: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut cty::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut cty::c_void; 4usize],
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut cty::c_void; 2usize],
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut cty::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut cty::c_void,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut cty::c_void,
    pub ucDummy7: [u8; 16usize],
    pub uxDummy10: [UBaseType_t; 2usize],
    pub uxDummy12: [UBaseType_t; 2usize],
    pub ulDummy18: [u32; 5usize],
    pub ucDummy19: [u8; 5usize],
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut cty::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
    pub uxDummy8: UBaseType_t,
    pub ucDummy9: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut cty::c_void,
    pub uxDummy2: UBaseType_t,
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
    pub uxDummy3: UBaseType_t,
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut cty::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut cty::c_void,
    pub pvDummy6: TaskFunction_t,
    pub uxDummy7: UBaseType_t,
    pub ucDummy8: u8,
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [size_t; 4usize],
    pub pvDummy2: [*mut cty::c_void; 3usize],
    pub ucDummy3: u8,
    pub uxDummy4: UBaseType_t,
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
    pub pvOwner: *mut cty::c_void,
    pub pvContainer: *mut xLIST,
}
pub type ListItem_t = xLIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMINI_LIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
}
pub type MiniListItem_t = xMINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST {
    pub uxNumberOfItems: UBaseType_t,
    pub pxIndex: *mut ListItem_t,
    pub xListEnd: MiniListItem_t,
}
pub type List_t = xLIST;
extern "C" {
    pub fn vListInitialise(pxList: *mut List_t);
}
extern "C" {
    pub fn vListInitialiseItem(pxItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsert(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsertEnd(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn uxListRemove(pxItemToRemove: *mut ListItem_t) -> UBaseType_t;
}
#[doc = " task. h"]
#[doc = ""]
#[doc = " Type by which tasks are referenced.  For example, a call to xTaskCreate"]
#[doc = " returns (via a pointer parameter) an TaskHandle_t variable that can then"]
#[doc = " be used as a parameter to vTaskDelete to delete the task."]
#[doc = ""]
#[doc = " \\defgroup TaskHandle_t TaskHandle_t"]
#[doc = " \\ingroup Tasks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    _unused: [u8; 0],
}
pub type TaskHandle_t = *mut tskTaskControlBlock;
pub type TaskHookFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void) -> BaseType_t>;
pub const eTaskState_eRunning: eTaskState = 0;
pub const eTaskState_eReady: eTaskState = 1;
pub const eTaskState_eBlocked: eTaskState = 2;
pub const eTaskState_eSuspended: eTaskState = 3;
pub const eTaskState_eDeleted: eTaskState = 4;
pub const eTaskState_eInvalid: eTaskState = 5;
pub type eTaskState = cty::c_uint;
pub const eNotifyAction_eNoAction: eNotifyAction = 0;
pub const eNotifyAction_eSetBits: eNotifyAction = 1;
pub const eNotifyAction_eIncrement: eNotifyAction = 2;
pub const eNotifyAction_eSetValueWithOverwrite: eNotifyAction = 3;
pub const eNotifyAction_eSetValueWithoutOverwrite: eNotifyAction = 4;
pub type eNotifyAction = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTIME_OUT {
    pub xOverflowCount: BaseType_t,
    pub xTimeOnEntering: TickType_t,
}
pub type TimeOut_t = xTIME_OUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMEMORY_REGION {
    pub pvBaseAddress: *mut cty::c_void,
    pub ulLengthInBytes: u32,
    pub ulParameters: u32,
}
pub type MemoryRegion_t = xMEMORY_REGION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_PARAMETERS {
    pub pvTaskCode: TaskFunction_t,
    pub pcName: *const cty::c_char,
    pub usStackDepth: u16,
    pub pvParameters: *mut cty::c_void,
    pub uxPriority: UBaseType_t,
    pub puxStackBuffer: *mut StackType_t,
    pub xRegions: [MemoryRegion_t; 1usize],
}
pub type TaskParameters_t = xTASK_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_STATUS {
    pub xHandle: TaskHandle_t,
    pub pcTaskName: *const cty::c_char,
    pub xTaskNumber: UBaseType_t,
    pub eCurrentState: eTaskState,
    pub uxCurrentPriority: UBaseType_t,
    pub uxBasePriority: UBaseType_t,
    pub ulRunTimeCounter: u32,
    pub pxStackBase: *mut StackType_t,
    pub usStackHighWaterMark: u16,
}
pub type TaskStatus_t = xTASK_STATUS;
pub const eSleepModeStatus_eAbortSleep: eSleepModeStatus = 0;
pub const eSleepModeStatus_eStandardSleep: eSleepModeStatus = 1;
pub const eSleepModeStatus_eNoTasksWaitingTimeout: eSleepModeStatus = 2;
pub type eSleepModeStatus = cty::c_uint;
extern "C" {
    pub fn xTaskCreate(
        pxTaskCode: TaskFunction_t,
        pcName: *const cty::c_char,
        usStackDepth: u16,
        pvParameters: *mut cty::c_void,
        uxPriority: UBaseType_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Memory regions are assigned to a restricted task when the task is created by"]
    #[doc = " a call to xTaskCreateRestricted().  These regions can be redefined using"]
    #[doc = " vTaskAllocateMPURegions()."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task being updated."]
    #[doc = ""]
    #[doc = " @param xRegions A pointer to a MemoryRegion_t structure that contains the"]
    #[doc = " new memory region definitions."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " // Define an array of MemoryRegion_t structures that configures an MPU region"]
    #[doc = " // allowing read/write access for 1024 bytes starting at the beginning of the"]
    #[doc = " // ucOneKByte array.  The other two of the maximum 3 definable regions are"]
    #[doc = " // unused so set to zero."]
    #[doc = " static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] ="]
    #[doc = " {"]
    #[doc = "  // Base address     Length      Parameters"]
    #[doc = "  { ucOneKByte,       1024,       portMPU_REGION_READ_WRITE },"]
    #[doc = "  { 0,                0,          0 },"]
    #[doc = "  { 0,                0,          0 }"]
    #[doc = " };"]
    #[doc = ""]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "  // This task was created such that it has access to certain regions of"]
    #[doc = "  // memory as defined by the MPU configuration.  At some point it is"]
    #[doc = "  // desired that these MPU regions are replaced with that defined in the"]
    #[doc = "  // xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()"]
    #[doc = "  // for this purpose.  NULL is used as the task handle to indicate that this"]
    #[doc = "  // function should modify the MPU regions of the calling task."]
    #[doc = "  vTaskAllocateMPURegions( NULL, xAltRegions );"]
    #[doc = ""]
    #[doc = "  // Now the task can continue its function, but from this point on can only"]
    #[doc = "  // access its stack and the ucOneKByte array (unless any other statically"]
    #[doc = "  // defined or shared regions have been declared elsewhere)."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskCreateRestricted xTaskCreateRestricted"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskAllocateMPURegions(xTask: TaskHandle_t, pxRegions: *const MemoryRegion_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskDelete( TaskHandle_t xTaskToDelete );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelete must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Remove a task from the RTOS real time kernel's management.  The task being"]
    #[doc = " deleted will be removed from all ready, blocked, suspended and event lists."]
    #[doc = ""]
    #[doc = " NOTE:  The idle task is responsible for freeing the kernel allocated"]
    #[doc = " memory from tasks that have been deleted.  It is therefore important that"]
    #[doc = " the idle task is not starved of microcontroller processing time if your"]
    #[doc = " application makes any calls to vTaskDelete ().  Memory allocated by the"]
    #[doc = " task code is not automatically freed, and should be freed before the task"]
    #[doc = " is deleted."]
    #[doc = ""]
    #[doc = " See the demo application file death.c for sample code that utilises"]
    #[doc = " vTaskDelete ()."]
    #[doc = ""]
    #[doc = " @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will"]
    #[doc = " cause the calling task to be deleted."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vOtherFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create the task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // Use the handle to delete the task."]
    #[doc = "   vTaskDelete( xHandle );"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskDelete vTaskDelete"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskDelete(xTaskToDelete: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskDelay( const TickType_t xTicksToDelay );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Delay a task for a given number of ticks.  The actual time that the"]
    #[doc = " task remains blocked depends on the tick rate.  The constant"]
    #[doc = " portTICK_PERIOD_MS can be used to calculate real time from the tick"]
    #[doc = " rate - with the resolution of one tick period."]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelay must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " vTaskDelay() specifies a time at which the task wishes to unblock relative to"]
    #[doc = " the time at which vTaskDelay() is called.  For example, specifying a block"]
    #[doc = " period of 100 ticks will cause the task to unblock 100 ticks after"]
    #[doc = " vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method"]
    #[doc = " of controlling the frequency of a periodic task as the path taken through the"]
    #[doc = " code, as well as other task and interrupt activity, will effect the frequency"]
    #[doc = " at which vTaskDelay() gets called and therefore the time at which the task"]
    #[doc = " next executes.  See xTaskDelayUntil() for an alternative API function designed"]
    #[doc = " to facilitate fixed frequency execution.  It does this by specifying an"]
    #[doc = " absolute time (rather than a relative time) at which the calling task should"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " @param xTicksToDelay The amount of time, in tick periods, that"]
    #[doc = " the calling task should block."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " // Block for 500ms."]
    #[doc = " const TickType_t xDelay = 500 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Simply toggle the LED every 500ms, blocking between each toggle."]
    #[doc = "       vToggleLED();"]
    #[doc = "       vTaskDelay( xDelay );"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskDelay vTaskDelay"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskDelay(xTicksToDelay: TickType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskDelayUntil( TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskDelayUntil must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Delay a task until a specified time.  This function can be used by periodic"]
    #[doc = " tasks to ensure a constant execution frequency."]
    #[doc = ""]
    #[doc = " This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will"]
    #[doc = " cause a task to block for the specified number of ticks from the time vTaskDelay () is"]
    #[doc = " called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed"]
    #[doc = " execution frequency as the time between a task starting to execute and that task"]
    #[doc = " calling vTaskDelay () may not be fixed [the task may take a different path though the"]
    #[doc = " code between calls, or may get interrupted or preempted a different number of times"]
    #[doc = " each time it executes]."]
    #[doc = ""]
    #[doc = " Whereas vTaskDelay () specifies a wake time relative to the time at which the function"]
    #[doc = " is called, xTaskDelayUntil () specifies the absolute (exact) time at which it wishes to"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " The macro pdMS_TO_TICKS() can be used to calculate the number of ticks from a"]
    #[doc = " time specified in milliseconds with a resolution of one tick period."]
    #[doc = ""]
    #[doc = " @param pxPreviousWakeTime Pointer to a variable that holds the time at which the"]
    #[doc = " task was last unblocked.  The variable must be initialised with the current time"]
    #[doc = " prior to its first use (see the example below).  Following this the variable is"]
    #[doc = " automatically updated within xTaskDelayUntil ()."]
    #[doc = ""]
    #[doc = " @param xTimeIncrement The cycle time period.  The task will be unblocked at"]
    #[doc = " time *pxPreviousWakeTime + xTimeIncrement.  Calling xTaskDelayUntil with the"]
    #[doc = " same xTimeIncrement parameter value will cause the task to execute with"]
    #[doc = " a fixed interface period."]
    #[doc = ""]
    #[doc = " @return Value which can be used to check whether the task was actually delayed."]
    #[doc = " Will be pdTRUE if the task way delayed and pdFALSE otherwise.  A task will not"]
    #[doc = " be delayed if the next expected wake time is in the past."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " // Perform an action every 10 ticks."]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " TickType_t xLastWakeTime;"]
    #[doc = " const TickType_t xFrequency = 10;"]
    #[doc = " BaseType_t xWasDelayed;"]
    #[doc = ""]
    #[doc = "     // Initialise the xLastWakeTime variable with the current time."]
    #[doc = "     xLastWakeTime = xTaskGetTickCount ();"]
    #[doc = "     for( ;; )"]
    #[doc = "     {"]
    #[doc = "         // Wait for the next cycle."]
    #[doc = "         xWasDelayed = xTaskDelayUntil( &xLastWakeTime, xFrequency );"]
    #[doc = ""]
    #[doc = "         // Perform action here. xWasDelayed value can be used to determine"]
    #[doc = "         // whether a deadline was missed if the code here took too long."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskDelayUntil xTaskDelayUntil"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskDelayUntil(
        pxPreviousWakeTime: *mut TickType_t,
        xTimeIncrement: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskAbortDelay( TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskAbortDelay must be defined as 1 in FreeRTOSConfig.h for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " A task will enter the Blocked state when it is waiting for an event.  The"]
    #[doc = " event it is waiting for can be a temporal event (waiting for a time), such"]
    #[doc = " as when vTaskDelay() is called, or an event on an object, such as when"]
    #[doc = " xQueueReceive() or ulTaskNotifyTake() is called.  If the handle of a task"]
    #[doc = " that is in the Blocked state is used in a call to xTaskAbortDelay() then the"]
    #[doc = " task will leave the Blocked state, and return from whichever function call"]
    #[doc = " placed the task into the Blocked state."]
    #[doc = ""]
    #[doc = " There is no 'FromISR' version of this function as an interrupt would need to"]
    #[doc = " know which object a task was blocked on in order to know which actions to"]
    #[doc = " take.  For example, if the task was blocked on a queue the interrupt handler"]
    #[doc = " would then need to know if the queue was locked."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task to remove from the Blocked state."]
    #[doc = ""]
    #[doc = " @return If the task referenced by xTask was not in the Blocked state then"]
    #[doc = " pdFAIL is returned.  Otherwise pdPASS is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskAbortDelay xTaskAbortDelay"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskAbortDelay(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the priority of any task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried.  Passing a NULL"]
    #[doc = " handle results in the priority of the calling task being returned."]
    #[doc = ""]
    #[doc = " @return The priority of xTask."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to obtain the priority of the created task."]
    #[doc = "   // It was created with tskIDLE_PRIORITY, but may have changed"]
    #[doc = "   // it itself."]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )"]
    #[doc = "   {"]
    #[doc = "       // The task has changed it's priority."]
    #[doc = "   }"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Is our priority higher than the created task?"]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )"]
    #[doc = "   {"]
    #[doc = "       // Our priority (obtained using NULL handle) is higher."]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup uxTaskPriorityGet uxTaskPriorityGet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn uxTaskPriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " A version of uxTaskPriorityGet() that can be used from an ISR."]
    pub fn uxTaskPriorityGetFromISR(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " eTaskState eTaskGetState( TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_eTaskGetState must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the state of any task.  States are encoded by the eTaskState"]
    #[doc = " enumerated type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried."]
    #[doc = ""]
    #[doc = " @return The state of xTask at the time the function was called.  Note the"]
    #[doc = " state of the task might change between the function being called, and the"]
    #[doc = " functions return value being tested by the calling task."]
    pub fn eTaskGetState(xTask: TaskHandle_t) -> eTaskState;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Populates a TaskStatus_t structure with information about a task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task being queried.  If xTask is NULL then"]
    #[doc = " information will be returned about the calling task."]
    #[doc = ""]
    #[doc = " @param pxTaskStatus A pointer to the TaskStatus_t structure that will be"]
    #[doc = " filled with information about the task referenced by the handle passed using"]
    #[doc = " the xTask parameter."]
    #[doc = ""]
    #[doc = " @xGetFreeStackSpace The TaskStatus_t structure contains a member to report"]
    #[doc = " the stack high water mark of the task being queried.  Calculating the stack"]
    #[doc = " high water mark takes a relatively long time, and can make the system"]
    #[doc = " temporarily unresponsive - so the xGetFreeStackSpace parameter is provided to"]
    #[doc = " allow the high water mark checking to be skipped.  The high watermark value"]
    #[doc = " will only be written to the TaskStatus_t structure if xGetFreeStackSpace is"]
    #[doc = " not set to pdFALSE;"]
    #[doc = ""]
    #[doc = " @param eState The TaskStatus_t structure contains a member to report the"]
    #[doc = " state of the task being queried.  Obtaining the task state is not as fast as"]
    #[doc = " a simple assignment - so the eState parameter is provided to allow the state"]
    #[doc = " information to be omitted from the TaskStatus_t structure.  To obtain state"]
    #[doc = " information then set eState to eInvalid - otherwise the value passed in"]
    #[doc = " eState will be reported as the task state in the TaskStatus_t structure."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = " TaskStatus_t xTaskDetails;"]
    #[doc = ""]
    #[doc = "  // Obtain the handle of a task from its name."]
    #[doc = "  xHandle = xTaskGetHandle( \"Task_Name\" );"]
    #[doc = ""]
    #[doc = "  // Check the handle is not NULL."]
    #[doc = "  configASSERT( xHandle );"]
    #[doc = ""]
    #[doc = "  // Use the handle to obtain further information about the task."]
    #[doc = "  vTaskGetInfo( xHandle,"]
    #[doc = "                &xTaskDetails,"]
    #[doc = "                pdTRUE, // Include the high water mark in xTaskDetails."]
    #[doc = "                eInvalid ); // Include the task state in xTaskDetails."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskGetInfo vTaskGetInfo"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskGetInfo(
        xTask: TaskHandle_t,
        pxTaskStatus: *mut TaskStatus_t,
        xGetFreeStackSpace: BaseType_t,
        eState: eTaskState,
    );
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Set the priority of any task."]
    #[doc = ""]
    #[doc = " A context switch will occur before the function returns if the priority"]
    #[doc = " being set is higher than the currently executing task."]
    #[doc = ""]
    #[doc = " @param xTask Handle to the task for which the priority is being set."]
    #[doc = " Passing a NULL handle results in the priority of the calling task being set."]
    #[doc = ""]
    #[doc = " @param uxNewPriority The priority to which the task will be set."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to raise the priority of the created task."]
    #[doc = "   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use a NULL handle to raise our priority to the same value."]
    #[doc = "   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskPrioritySet vTaskPrioritySet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskPrioritySet(xTask: TaskHandle_t, uxNewPriority: UBaseType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskSuspend( TaskHandle_t xTaskToSuspend );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Suspend any task.  When suspended a task will never get any microcontroller"]
    #[doc = " processing time, no matter what its priority."]
    #[doc = ""]
    #[doc = " Calls to vTaskSuspend are not accumulative -"]
    #[doc = " i.e. calling vTaskSuspend () twice on the same task still only requires one"]
    #[doc = " call to vTaskResume () to ready the suspended task."]
    #[doc = ""]
    #[doc = " @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL"]
    #[doc = " handle will cause the calling task to be suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Suspend ourselves."]
    #[doc = "   vTaskSuspend( NULL );"]
    #[doc = ""]
    #[doc = "   // We cannot get here unless another task calls vTaskResume"]
    #[doc = "   // with our handle as the parameter."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskSuspend vTaskSuspend"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSuspend(xTaskToSuspend: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskResume( TaskHandle_t xTaskToResume );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Resumes a suspended task."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " vTaskResume ()."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Resume the suspended task ourselves."]
    #[doc = "   vTaskResume( xHandle );"]
    #[doc = ""]
    #[doc = "   // The created task will once again get microcontroller processing"]
    #[doc = "   // time in accordance with its priority within the system."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskResume vTaskResume"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskResume(xTaskToResume: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void xTaskResumeFromISR( TaskHandle_t xTaskToResume );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " An implementation of vTaskResume() that can be called from within an ISR."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " xTaskResumeFromISR ()."]
    #[doc = ""]
    #[doc = " xTaskResumeFromISR() should not be used to synchronise a task with an"]
    #[doc = " interrupt if there is a chance that the interrupt could arrive prior to the"]
    #[doc = " task being suspended - as this can lead to interrupts being missed. Use of a"]
    #[doc = " semaphore as a synchronisation mechanism would avoid this eventuality."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if resuming the task should result in a context switch,"]
    #[doc = " otherwise pdFALSE. This is used by the ISR to determine if a context switch"]
    #[doc = " may be required following the ISR."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskResumeFromISR vTaskResumeFromISR"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskResumeFromISR(xTaskToResume: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskStartScheduler( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Starts the real time kernel tick processing.  After calling the kernel"]
    #[doc = " has control over which tasks are executed and when."]
    #[doc = ""]
    #[doc = " See the demo application file main.c for an example of creating"]
    #[doc = " tasks and starting the kernel."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will not get here unless a task calls vTaskEndScheduler ()"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskStartScheduler vTaskStartScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskStartScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskEndScheduler( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " NOTE:  At the time of writing only the x86 real mode port, which runs on a PC"]
    #[doc = " in place of DOS, implements this function."]
    #[doc = ""]
    #[doc = " Stops the real time kernel tick.  All created tasks will be automatically"]
    #[doc = " deleted and multitasking (either preemptive or cooperative) will"]
    #[doc = " stop.  Execution then resumes from the point where vTaskStartScheduler ()"]
    #[doc = " was called, as if vTaskStartScheduler () had just returned."]
    #[doc = ""]
    #[doc = " See the demo application file main. c in the demo/PC directory for an"]
    #[doc = " example that uses vTaskEndScheduler ()."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () requires an exit function to be defined within the"]
    #[doc = " portable layer (see vPortEndScheduler () in port. c for the PC port).  This"]
    #[doc = " performs hardware specific operations such as stopping the kernel tick."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () will cause all of the resources allocated by the"]
    #[doc = " kernel to be freed - but will not free resources allocated by application"]
    #[doc = " tasks."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vTaskCode( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // At some point we want to end the real time kernel processing"]
    #[doc = "       // so call ..."]
    #[doc = "       vTaskEndScheduler ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will only get here when the vTaskCode () task has called"]
    #[doc = "   // vTaskEndScheduler ().  When we get here we are back to single task"]
    #[doc = "   // execution."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskEndScheduler vTaskEndScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskEndScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskSuspendAll( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Suspends the scheduler without disabling interrupts.  Context switches will"]
    #[doc = " not occur while the scheduler is suspended."]
    #[doc = ""]
    #[doc = " After calling vTaskSuspendAll () the calling task will continue to execute"]
    #[doc = " without risk of being swapped out until a call to xTaskResumeAll () has been"]
    #[doc = " made."]
    #[doc = ""]
    #[doc = " API functions that have the potential to cause a context switch (for example,"]
    #[doc = " xTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler"]
    #[doc = " is suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the kernel"]
    #[doc = "       // tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel."]
    #[doc = "       xTaskResumeAll ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup vTaskSuspendAll vTaskSuspendAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskSuspendAll();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskResumeAll( void );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Resumes scheduler activity after it was suspended by a call to"]
    #[doc = " vTaskSuspendAll()."]
    #[doc = ""]
    #[doc = " xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks"]
    #[doc = " that were previously suspended by a call to vTaskSuspend()."]
    #[doc = ""]
    #[doc = " @return If resuming the scheduler caused a context switch then pdTRUE is"]
    #[doc = "         returned, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the real"]
    #[doc = "       // time kernel tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel.  We want to force"]
    #[doc = "       // a context switch - but there is no point if resuming the scheduler"]
    #[doc = "       // caused a context switch already."]
    #[doc = "       if( !xTaskResumeAll () )"]
    #[doc = "       {"]
    #[doc = "            taskYIELD ();"]
    #[doc = "       }"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskResumeAll xTaskResumeAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn xTaskResumeAll() -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TickType_t xTaskGetTickCount( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCount xTaskGetTickCount"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCount() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TickType_t xTaskGetTickCountFromISR( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " This is a version of xTaskGetTickCount() that is safe to be called from an"]
    #[doc = " ISR - provided that TickType_t is the natural word size of the"]
    #[doc = " microcontroller being used or interrupt nesting is either not supported or"]
    #[doc = " not being used."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCountFromISR xTaskGetTickCountFromISR"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCountFromISR() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>uint16_t uxTaskGetNumberOfTasks( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The number of tasks that the real time kernel is currently managing."]
    #[doc = " This includes all ready, blocked and suspended tasks.  A task that"]
    #[doc = " has been deleted but not yet freed by the idle task will also be"]
    #[doc = " included in the count."]
    #[doc = ""]
    #[doc = " \\defgroup uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn uxTaskGetNumberOfTasks() -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>char *pcTaskGetName( TaskHandle_t xTaskToQuery );</PRE>"]
    #[doc = ""]
    #[doc = " @return The text (human readable) name of the task referenced by the handle"]
    #[doc = " xTaskToQuery.  A task can query its own name by either passing in its own"]
    #[doc = " handle, or by setting xTaskToQuery to NULL."]
    #[doc = ""]
    #[doc = " \\defgroup pcTaskGetName pcTaskGetName"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn pcTaskGetName(xTaskToQuery: TaskHandle_t) -> *mut cty::c_char;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TaskHandle_t xTaskGetHandle( const char *pcNameToQuery );</PRE>"]
    #[doc = ""]
    #[doc = " NOTE:  This function takes a relatively long time to complete and should be"]
    #[doc = " used sparingly."]
    #[doc = ""]
    #[doc = " @return The handle of the task that has the human readable name pcNameToQuery."]
    #[doc = " NULL is returned if no matching name is found.  INCLUDE_xTaskGetHandle"]
    #[doc = " must be set to 1 in FreeRTOSConfig.h for pcTaskGetHandle() to be available."]
    #[doc = ""]
    #[doc = " \\defgroup pcTaskGetHandle pcTaskGetHandle"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetHandle(pcNameToQuery: *const cty::c_char) -> TaskHandle_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <PRE>UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask );</PRE>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in words, so on a 32 bit machine"]
    #[doc = " a value of 1 means 4 bytes) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in words, so"]
    #[doc = " actual spaces on the stack rather than bytes) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <PRE>configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask );</PRE>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in words, so on a 32 bit machine"]
    #[doc = " a value of 1 means 4 bytes) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in words, so"]
    #[doc = " actual spaces on the stack rather than bytes) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark2(xTask: TaskHandle_t) -> u16;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>void vApplicationStackOverflowHook( TaskHandle_t xTask char *pcTaskName); </pre>"]
    #[doc = ""]
    #[doc = " The application stack overflow hook is called when a stack overflow is detected for a task."]
    #[doc = ""]
    #[doc = " Details on stack overflow detection can be found here: https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html"]
    #[doc = ""]
    #[doc = " @param xTask the task that just exceeded its stack boundaries."]
    #[doc = " @param pcTaskName A character string containing the name of the offending task."]
    pub fn vApplicationStackOverflowHook(xTask: TaskHandle_t, pcTaskName: *mut cty::c_char);
}
extern "C" {
    #[doc = "  task.h"]
    #[doc = "  <pre>void vApplicationTickHook( void ); </pre>"]
    #[doc = ""]
    #[doc = " This hook function is called in the system tick handler after any OS work is completed."]
    pub fn vApplicationTickHook();
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Calls the hook function associated with xTask.  Passing xTask as NULL has"]
    #[doc = " the effect of calling the Running tasks (the calling task) hook function."]
    #[doc = ""]
    #[doc = " pvParameter is passed to the hook function for the task to interpret as it"]
    #[doc = " wants.  The return value is the value returned by the task hook function"]
    #[doc = " registered by the user."]
    pub fn xTaskCallApplicationTaskHook(
        xTask: TaskHandle_t,
        pvParameter: *mut cty::c_void,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " xTaskGetIdleTaskHandle() is only available if"]
    #[doc = " INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h."]
    #[doc = ""]
    #[doc = " Simply returns the handle of the idle task.  It is not valid to call"]
    #[doc = " xTaskGetIdleTaskHandle() before the scheduler has been started."]
    pub fn xTaskGetIdleTaskHandle() -> TaskHandle_t;
}
extern "C" {
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for"]
    #[doc = " uxTaskGetSystemState() to be available."]
    #[doc = ""]
    #[doc = " uxTaskGetSystemState() populates an TaskStatus_t structure for each task in"]
    #[doc = " the system.  TaskStatus_t structures contain, among other things, members"]
    #[doc = " for the task handle, task name, task priority, task state, and total amount"]
    #[doc = " of run time consumed by the task.  See the TaskStatus_t structure"]
    #[doc = " definition in this file for the full member list."]
    #[doc = ""]
    #[doc = " NOTE:  This function is intended for debugging use only as its use results in"]
    #[doc = " the scheduler remaining suspended for an extended period."]
    #[doc = ""]
    #[doc = " @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures."]
    #[doc = " The array must contain at least one TaskStatus_t structure for each task"]
    #[doc = " that is under the control of the RTOS.  The number of tasks under the control"]
    #[doc = " of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function."]
    #[doc = ""]
    #[doc = " @param uxArraySize The size of the array pointed to by the pxTaskStatusArray"]
    #[doc = " parameter.  The size is specified as the number of indexes in the array, or"]
    #[doc = " the number of TaskStatus_t structures contained in the array, not by the"]
    #[doc = " number of bytes in the array."]
    #[doc = ""]
    #[doc = " @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in"]
    #[doc = " FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the"]
    #[doc = " total run time (as defined by the run time stats clock, see"]
    #[doc = " https://www.FreeRTOS.org/rtos-run-time-stats.html) since the target booted."]
    #[doc = " pulTotalRunTime can be set to NULL to omit the total run time information."]
    #[doc = ""]
    #[doc = " @return The number of TaskStatus_t structures that were populated by"]
    #[doc = " uxTaskGetSystemState().  This should equal the number returned by the"]
    #[doc = " uxTaskGetNumberOfTasks() API function, but will be zero if the value passed"]
    #[doc = " in the uxArraySize parameter was too small."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "  // This example demonstrates how a human readable table of run time stats"]
    #[doc = "  // information is generated from raw data provided by uxTaskGetSystemState()."]
    #[doc = "  // The human readable table is written to pcWriteBuffer"]
    #[doc = "  void vTaskGetRunTimeStats( char *pcWriteBuffer )"]
    #[doc = "  {"]
    #[doc = "  TaskStatus_t *pxTaskStatusArray;"]
    #[doc = "  volatile UBaseType_t uxArraySize, x;"]
    #[doc = "  uint32_t ulTotalRunTime, ulStatsAsPercentage;"]
    #[doc = ""]
    #[doc = "      // Make sure the write buffer does not contain a string."]
    #[doc = " pcWriteBuffer = 0x00;"]
    #[doc = ""]
    #[doc = "      // Take a snapshot of the number of tasks in case it changes while this"]
    #[doc = "      // function is executing."]
    #[doc = "      uxArraySize = uxTaskGetNumberOfTasks();"]
    #[doc = ""]
    #[doc = "      // Allocate a TaskStatus_t structure for each task.  An array could be"]
    #[doc = "      // allocated statically at compile time."]
    #[doc = "      pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );"]
    #[doc = ""]
    #[doc = "      if( pxTaskStatusArray != NULL )"]
    #[doc = "      {"]
    #[doc = "          // Generate raw status information about each task."]
    #[doc = "          uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalRunTime );"]
    #[doc = ""]
    #[doc = "          // For percentage calculations."]
    #[doc = "          ulTotalRunTime /= 100UL;"]
    #[doc = ""]
    #[doc = "          // Avoid divide by zero errors."]
    #[doc = "          if( ulTotalRunTime > 0 )"]
    #[doc = "          {"]
    #[doc = "              // For each populated position in the pxTaskStatusArray array,"]
    #[doc = "              // format the raw data as human readable ASCII data"]
    #[doc = "              for( x = 0; x < uxArraySize; x++ )"]
    #[doc = "              {"]
    #[doc = "                  // What percentage of the total run time has the task used?"]
    #[doc = "                  // This will always be rounded down to the nearest integer."]
    #[doc = "                  // ulTotalRunTimeDiv100 has already been divided by 100."]
    #[doc = "                  ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;"]
    #[doc = ""]
    #[doc = "                  if( ulStatsAsPercentage > 0UL )"]
    #[doc = "                  {"]
    #[doc = "                      sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );"]
    #[doc = "                  }"]
    #[doc = "                  else"]
    #[doc = "                  {"]
    #[doc = "                      // If the percentage is zero here then the task has"]
    #[doc = "                      // consumed less than 1% of the total run time."]
    #[doc = "                      sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t<1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );"]
    #[doc = "                  }"]
    #[doc = ""]
    #[doc = "                  pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );"]
    #[doc = "              }"]
    #[doc = "          }"]
    #[doc = ""]
    #[doc = "          // The array is no longer needed, free the memory it consumes."]
    #[doc = "          vPortFree( pxTaskStatusArray );"]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = "  </pre>"]
    pub fn uxTaskGetSystemState(
        pxTaskStatusArray: *mut TaskStatus_t,
        uxArraySize: UBaseType_t,
        pulTotalRunTime: *mut u32,
    ) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskList( char *pcWriteBuffer );</PRE>"]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must"]
    #[doc = " both be defined as 1 for this function to be available.  See the"]
    #[doc = " configuration section of the FreeRTOS.org website for more information."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Lists all the current tasks, along with their current state and stack"]
    #[doc = " usage high water mark."]
    #[doc = ""]
    #[doc = " Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or"]
    #[doc = " suspended ('S')."]
    #[doc = ""]
    #[doc = " PLEASE NOTE:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskList() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays task:"]
    #[doc = " names, states, priority, stack usage and task number."]
    #[doc = " Stack usage specified as the number of unused StackType_t words stack can hold"]
    #[doc = " on top of stack - not the number of bytes."]
    #[doc = ""]
    #[doc = " vTaskList() has a dependency on the sprintf() C library function that might"]
    #[doc = " bloat the code size, use a lot of stack, and provide different results on"]
    #[doc = " different platforms.  An alternative, tiny, third party, and limited"]
    #[doc = " functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState()"]
    #[doc = " directly to get access to raw stats data, rather than indirectly through a"]
    #[doc = " call to vTaskList()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the above mentioned details"]
    #[doc = " will be written, in ASCII form.  This buffer is assumed to be large"]
    #[doc = " enough to contain the generated report.  Approximately 40 bytes per"]
    #[doc = " task should be sufficient."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskList vTaskList"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskList(pcWriteBuffer: *mut cty::c_char);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskGetRunTimeStats( char *pcWriteBuffer );</PRE>"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " Calling vTaskGetRunTimeStats() writes the total execution time of each"]
    #[doc = " task into a buffer, both as an absolute count value and as a percentage"]
    #[doc = " of the total system execution time."]
    #[doc = ""]
    #[doc = " NOTE 2:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays the"]
    #[doc = " amount of time each task has spent in the Running state in both absolute and"]
    #[doc = " percentage terms."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() has a dependency on the sprintf() C library function"]
    #[doc = " that might bloat the code size, use a lot of stack, and provide different"]
    #[doc = " results on different platforms.  An alternative, tiny, third party, and"]
    #[doc = " limited functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState() directly"]
    #[doc = " to get access to raw stats data, rather than indirectly through a call to"]
    #[doc = " vTaskGetRunTimeStats()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the execution times will be"]
    #[doc = " written, in ASCII form.  This buffer is assumed to be large enough to"]
    #[doc = " contain the generated report.  Approximately 40 bytes per task should"]
    #[doc = " be sufficient."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskGetRunTimeStats vTaskGetRunTimeStats"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskGetRunTimeStats(pcWriteBuffer: *mut cty::c_char);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>uint32_t ulTaskGetIdleRunTimeCounter( void );</PRE>"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " While uxTaskGetSystemState() and vTaskGetRunTimeStats() writes the total"]
    #[doc = " execution time of each task into a buffer, ulTaskGetIdleRunTimeCounter()"]
    #[doc = " returns the total execution time of just the idle task."]
    #[doc = ""]
    #[doc = " @return The total run time of the idle task.  This is the amount of time the"]
    #[doc = " idle task has actually been executing.  The unit of time is dependent on the"]
    #[doc = " frequency configured using the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and"]
    #[doc = " portGET_RUN_TIME_COUNTER_VALUE() macros."]
    #[doc = ""]
    #[doc = " \\defgroup ulTaskGetIdleRunTimeCounter ulTaskGetIdleRunTimeCounter"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn ulTaskGetIdleRunTimeCounter() -> u32;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotifyIndexed( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction );</PRE>"]
    #[doc = " <PRE>BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );</PRE>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Sends a direct to task notification to a task, with an optional value and"]
    #[doc = " action."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() to"]
    #[doc = " [optionally] block to wait for a notification to be pending.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotify() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotify() is equivalent to calling xTaskNotifyIndexed()"]
    #[doc = " with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotify() does"]
    #[doc = " not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The target notification value is bitwise ORed with ulValue."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The target notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The target notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification at the"]
    #[doc = " same array index (the task already had a notification pending at that index)."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending at the"]
    #[doc = " same array index then the target notification value is set to ulValue and"]
    #[doc = " xTaskNotifyIndexed() will return pdPASS.  If the task being notified already"]
    #[doc = " had a notification pending at the same array index then no action is"]
    #[doc = " performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification at the specified array index without the"]
    #[doc = " notification value at that index being updated.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " pulPreviousNotificationValue -"]
    #[doc = " Can be used to pass out the subject task's notification value before any"]
    #[doc = " bits are modified by the notify function."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyIndexed xTaskNotifyIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotify(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotifyIndexedFromISR( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = " <PRE>BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyIndexed() that can be used from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyFromISR()"]
    #[doc = " does not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The task's notification value is bitwise ORed with ulValue.  xTaskNotify()"]
    #[doc = " always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The task's notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotify() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The task's notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification (the"]
    #[doc = " task already had a notification pending).  xTaskNotify() always returns"]
    #[doc = " pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending then"]
    #[doc = " the task's notification value is set to ulValue and xTaskNotify() will"]
    #[doc = " return pdPASS.  If the task being notified already had a notification"]
    #[doc = " pending then no action is performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification without its notification value being"]
    #[doc = " updated.  ulValue is not used and xTaskNotify() always returns pdPASS in"]
    #[doc = " this case."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should"]
    #[doc = " be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyIndexedFromISR xTaskNotifyIndexedFromISR"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskNotifyWaitIndexed( UBaseType_t uxIndexToWaitOn, uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification to be pending at a given index within"]
    #[doc = " an array of direct to task notifications."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyWait() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotifyWait() is equivalent to calling"]
    #[doc = " xTaskNotifyWaitIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be received.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyWait() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value"]
    #[doc = " will be cleared in the calling task's notification value before the task"]
    #[doc = " checks to see if any notifications are pending, and optionally blocks if no"]
    #[doc = " notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if"]
    #[doc = " limits.h is included) or 0xffffffffUL (if limits.h is not included) will have"]
    #[doc = " the effect of resetting the task's notification value to 0.  Setting"]
    #[doc = " ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnExit If a notification is pending or received before"]
    #[doc = " the calling task exits the xTaskNotifyWait() function then the task's"]
    #[doc = " notification value (see the xTaskNotify() API function) is passed out using"]
    #[doc = " the pulNotificationValue parameter.  Then any bits that are set in"]
    #[doc = " ulBitsToClearOnExit will be cleared in the task's notification value (note"]
    #[doc = " *pulNotificationValue is set before any bits are cleared).  Setting"]
    #[doc = " ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL"]
    #[doc = " (if limits.h is not included) will have the effect of resetting the task's"]
    #[doc = " notification value to 0 before the function exits.  Setting"]
    #[doc = " ulBitsToClearOnExit to 0 will leave the task's notification value unchanged"]
    #[doc = " when the function exits (in which case the value passed out in"]
    #[doc = " pulNotificationValue will match the task's notification value)."]
    #[doc = ""]
    #[doc = " @param pulNotificationValue Used to pass the task's notification value out"]
    #[doc = " of the function.  Note the value passed out will not be effected by the"]
    #[doc = " clearing of any bits caused by ulBitsToClearOnExit being non-zero."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for a notification to be received, should a notification"]
    #[doc = " not already be pending when xTaskNotifyWait() was called.  The task"]
    #[doc = " will not consume any processing time while it is in the Blocked state.  This"]
    #[doc = " is specified in kernel ticks, the macro pdMS_TO_TICKS( value_in_ms ) can be"]
    #[doc = " used to convert a time specified in milliseconds to a time specified in"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @return If a notification was received (including notifications that were"]
    #[doc = " already pending when xTaskNotifyWait was called) then pdPASS is"]
    #[doc = " returned.  Otherwise pdFAIL is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyWaitIndexed xTaskNotifyWaitIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyWait(
        uxIndexToWaitOn: UBaseType_t,
        ulBitsToClearOnEntry: u32,
        ulBitsToClearOnExit: u32,
        pulNotificationValue: *mut u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskNotifyGiveIndexedFromISR( TaskHandle_t xTaskHandle, UBaseType_t uxIndexToNotify, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = " <PRE>void vTaskNotifyGiveFromISR( TaskHandle_t xTaskHandle, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyGiveIndexed() that can be called from an interrupt"]
    #[doc = " service routine (ISR)."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for more details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro"]
    #[doc = " to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " vTaskNotifyGiveIndexedFromISR() is intended for use when task notifications"]
    #[doc = " are used as light weight and faster binary or counting semaphore equivalents."]
    #[doc = " Actual FreeRTOS semaphores are given from an ISR using the"]
    #[doc = " xSemaphoreGiveFromISR() API function, the equivalent action that instead uses"]
    #[doc = " a task notification is vTaskNotifyGiveIndexedFromISR()."]
    #[doc = ""]
    #[doc = " When task notifications are being used as a binary or counting semaphore"]
    #[doc = " equivalent then the task being notified should wait for the notification"]
    #[doc = " using the ulTaskNotificationTakeIndexed() API function rather than the"]
    #[doc = " xTaskNotifyWaitIndexed() API function."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyGiveFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyGiveIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " xTaskNotifyGiveFromISR() does not have this parameter and always sends"]
    #[doc = " notifications to index 0."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch"]
    #[doc = " should be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskNotifyGiveIndexedFromISR vTaskNotifyGiveIndexedFromISR"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn vTaskGenericNotifyGiveFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    );
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " uint32_t ulTaskNotifyTakeIndexed( UBaseType_t uxIndexToWaitOn, BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification on a particular index in the calling"]
    #[doc = " task's notification array in a manner similar to taking a counting semaphore."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() is intended for use when a task notification is"]
    #[doc = " used as a faster and lighter weight binary or counting semaphore alternative."]
    #[doc = " Actual FreeRTOS semaphores are taken using the xSemaphoreTake() API function,"]
    #[doc = " the equivalent action that instead uses a task notification is"]
    #[doc = " ulTaskNotifyTakeIndexed()."]
    #[doc = ""]
    #[doc = " When a task is using its notification value as a binary or counting semaphore"]
    #[doc = " other tasks should send notifications to it using the xTaskNotifyGiveIndexed()"]
    #[doc = " macro, or xTaskNotifyIndex() function with the eAction parameter set to"]
    #[doc = " eIncrement."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() can either clear the task's notification value at"]
    #[doc = " the array index specified by the uxIndexToWaitOn parameter to zero on exit,"]
    #[doc = " in which case the notification value acts like a binary semaphore, or"]
    #[doc = " decrement the notification value on exit, in which case the notification"]
    #[doc = " value acts like a counting semaphore."]
    #[doc = ""]
    #[doc = " A task can use ulTaskNotifyTakeIndexed() to [optionally] block to wait for"]
    #[doc = " a notification.  The task does not consume any CPU time while it is in the"]
    #[doc = " Blocked state."]
    #[doc = ""]
    #[doc = " Where as xTaskNotifyWaitIndexed() will return when a notification is pending,"]
    #[doc = " ulTaskNotifyTakeIndexed() will return when the task's notification value is"]
    #[doc = " not zero."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyTake() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling ulTaskNotifyTake() is equivalent to calling"]
    #[doc = " ulTaskNotifyTakeIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be non-zero.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyTake() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's"]
    #[doc = " notification value is decremented when the function exits.  In this way the"]
    #[doc = " notification value acts like a counting semaphore.  If xClearCountOnExit is"]
    #[doc = " not pdFALSE then the task's notification value is cleared to zero when the"]
    #[doc = " function exits.  In this way the notification value acts like a binary"]
    #[doc = " semaphore."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for the task's notification value to be greater than zero,"]
    #[doc = " should the count not already be greater than zero when"]
    #[doc = " ulTaskNotifyTake() was called.  The task will not consume any processing"]
    #[doc = " time while it is in the Blocked state.  This is specified in kernel ticks,"]
    #[doc = " the macro pdMS_TO_TICKS( value_in_ms ) can be used to convert a time"]
    #[doc = " specified in milliseconds to a time specified in ticks."]
    #[doc = ""]
    #[doc = " @return The task's notification count before it is either cleared to zero or"]
    #[doc = " decremented (see the xClearCountOnExit parameter)."]
    #[doc = ""]
    #[doc = " \\defgroup ulTaskNotifyTakeIndexed ulTaskNotifyTakeIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyTake(
        uxIndexToWaitOn: UBaseType_t,
        xClearCountOnExit: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> u32;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskNotifyStateClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToCLear );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " If a notification is sent to an index within the array of notifications then"]
    #[doc = " the notification at that index is said to be 'pending' until it is read or"]
    #[doc = " explicitly cleared by the receiving task.  xTaskNotifyStateClearIndexed()"]
    #[doc = " is the function that clears a pending notification without reading the"]
    #[doc = " notification value.  The notification value at the same array index is not"]
    #[doc = " altered.  Set xTask to NULL to clear the notification state of the calling"]
    #[doc = " task."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyStateClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyStateClear() is equivalent to calling"]
    #[doc = " xTaskNotifyStateClearIndexed() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have a notification state"]
    #[doc = " cleared.  Set xTask to NULL to clear a notification state in the calling"]
    #[doc = " task.  To obtain a task's handle create the task using xTaskCreate() and"]
    #[doc = " make use of the pxCreatedTask parameter, or create the task using"]
    #[doc = " xTaskCreateStatic() and store the returned value, or use the task's name in"]
    #[doc = " a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values to act upon.  For example, setting uxIndexToClear to 1"]
    #[doc = " will clear the state of the notification at index 1 within the array."]
    #[doc = " uxIndexToClear must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyStateClear() does not have this parameter and always acts on the"]
    #[doc = " notification at index 0."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the task's notification state was set to"]
    #[doc = " eNotWaitingNotification, otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyStateClearIndexed xTaskNotifyStateClearIndexed"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyStateClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>"]
    #[doc = " uint32_t ulTaskNotifyValueClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToClear, uint32_t ulBitsToClear );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " ulTaskNotifyValueClearIndexed() clears the bits specified by the"]
    #[doc = " ulBitsToClear bit mask in the notification value at array index uxIndexToClear"]
    #[doc = " of the task referenced by xTask."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyValueClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling ulTaskNotifyValueClear() is equivalent to calling"]
    #[doc = " ulTaskNotifyValueClearIndexed() with the uxIndexToClear parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have bits in one of its"]
    #[doc = " notification values cleared. Set xTask to NULL to clear bits in a"]
    #[doc = " notification value of the calling task.  To obtain a task's handle create the"]
    #[doc = " task using xTaskCreate() and make use of the pxCreatedTask parameter, or"]
    #[doc = " create the task using xTaskCreateStatic() and store the returned value, or"]
    #[doc = " use the task's name in a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values in which to clear the bits.  uxIndexToClear"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyValueClear() does not have this parameter and always clears bits"]
    #[doc = " in the notification value at index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClear Bit mask of the bits to clear in the notification value of"]
    #[doc = " xTask. Set a bit to 1 to clear the corresponding bits in the task's notification"]
    #[doc = " value. Set ulBitsToClear to 0xffffffff (UINT_MAX on 32-bit architectures) to clear"]
    #[doc = " the notification value to 0.  Set ulBitsToClear to 0 to query the task's"]
    #[doc = " notification value without clearing any bits."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return The value of the target task's notification value before the bits"]
    #[doc = " specified by ulBitsToClear were cleared."]
    #[doc = " \\defgroup ulTaskNotifyValueClear ulTaskNotifyValueClear"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyValueClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
        ulBitsToClear: u32,
    ) -> u32;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Capture the current time for future use with xTaskCheckForTimeOut()."]
    #[doc = ""]
    #[doc = " @param pxTimeOut Pointer to a timeout object into which the current time"]
    #[doc = " is to be captured.  The captured time includes the tick count and the number"]
    #[doc = " of times the tick count has overflowed since the system first booted."]
    #[doc = " \\defgroup vTaskSetTimeOutState vTaskSetTimeOutState"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Determines if pxTicksToWait ticks has passed since a time was captured"]
    #[doc = " using a call to vTaskSetTimeOutState().  The captured time includes the tick"]
    #[doc = " count and the number of times the tick count has overflowed."]
    #[doc = ""]
    #[doc = " @param pxTimeOut The time status as captured previously using"]
    #[doc = " vTaskSetTimeOutState. If the timeout has not yet occurred, it is updated"]
    #[doc = " to reflect the current time status."]
    #[doc = " @param pxTicksToWait The number of ticks to check for timeout i.e. if"]
    #[doc = " pxTicksToWait ticks have passed since pxTimeOut was last updated (either by"]
    #[doc = " vTaskSetTimeOutState() or xTaskCheckForTimeOut()), the timeout has occurred."]
    #[doc = " If the timeout has not occurred, pxTicksToWait is updated to reflect the"]
    #[doc = " number of remaining ticks."]
    #[doc = ""]
    #[doc = " @return If timeout has occurred, pdTRUE is returned. Otherwise pdFALSE is"]
    #[doc = " returned and pxTicksToWait is updated to reflect the number of remaining"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @see https://www.FreeRTOS.org/xTaskCheckForTimeOut.html"]
    #[doc = ""]
    #[doc = " Example Usage:"]
    #[doc = " <pre>"]
    #[doc = "  // Driver library function used to receive uxWantedBytes from an Rx buffer"]
    #[doc = "  // that is filled by a UART interrupt. If there are not enough bytes in the"]
    #[doc = "  // Rx buffer then the task enters the Blocked state until it is notified that"]
    #[doc = "  // more data has been placed into the buffer. If there is still not enough"]
    #[doc = "  // data then the task re-enters the Blocked state, and xTaskCheckForTimeOut()"]
    #[doc = "  // is used to re-calculate the Block time to ensure the total amount of time"]
    #[doc = "  // spent in the Blocked state does not exceed MAX_TIME_TO_WAIT. This"]
    #[doc = "  // continues until either the buffer contains at least uxWantedBytes bytes,"]
    #[doc = "  // or the total amount of time spent in the Blocked state reaches"]
    #[doc = "  // MAX_TIME_TO_WAIT – at which point the task reads however many bytes are"]
    #[doc = "  // available up to a maximum of uxWantedBytes."]
    #[doc = ""]
    #[doc = "  size_t xUART_Receive( uint8_t *pucBuffer, size_t uxWantedBytes )"]
    #[doc = "  {"]
    #[doc = "  size_t uxReceived = 0;"]
    #[doc = "  TickType_t xTicksToWait = MAX_TIME_TO_WAIT;"]
    #[doc = "  TimeOut_t xTimeOut;"]
    #[doc = ""]
    #[doc = "      // Initialize xTimeOut.  This records the time at which this function"]
    #[doc = "      // was entered."]
    #[doc = "      vTaskSetTimeOutState( &xTimeOut );"]
    #[doc = ""]
    #[doc = "      // Loop until the buffer contains the wanted number of bytes, or a"]
    #[doc = "      // timeout occurs."]
    #[doc = "      while( UART_bytes_in_rx_buffer( pxUARTInstance ) < uxWantedBytes )"]
    #[doc = "      {"]
    #[doc = "          // The buffer didn't contain enough data so this task is going to"]
    #[doc = "          // enter the Blocked state. Adjusting xTicksToWait to account for"]
    #[doc = "          // any time that has been spent in the Blocked state within this"]
    #[doc = "          // function so far to ensure the total amount of time spent in the"]
    #[doc = "          // Blocked state does not exceed MAX_TIME_TO_WAIT."]
    #[doc = "          if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) != pdFALSE )"]
    #[doc = "          {"]
    #[doc = "              //Timed out before the wanted number of bytes were available,"]
    #[doc = "              // exit the loop."]
    #[doc = "              break;"]
    #[doc = "          }"]
    #[doc = ""]
    #[doc = "          // Wait for a maximum of xTicksToWait ticks to be notified that the"]
    #[doc = "          // receive interrupt has placed more data into the buffer."]
    #[doc = "          ulTaskNotifyTake( pdTRUE, xTicksToWait );"]
    #[doc = "      }"]
    #[doc = ""]
    #[doc = "      // Attempt to read uxWantedBytes from the receive buffer into pucBuffer."]
    #[doc = "      // The actual number of bytes read (which might be less than"]
    #[doc = "      // uxWantedBytes) is returned."]
    #[doc = "      uxReceived = UART_read_from_receive_buffer( pxUARTInstance,"]
    #[doc = "                                                  pucBuffer,"]
    #[doc = "                                                  uxWantedBytes );"]
    #[doc = ""]
    #[doc = "      return uxReceived;"]
    #[doc = "  }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xTaskCheckForTimeOut xTaskCheckForTimeOut"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskCheckForTimeOut(
        pxTimeOut: *mut TimeOut_t,
        pxTicksToWait: *mut TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " This function corrects the tick count value after the application code has held"]
    #[doc = " interrupts disabled for an extended period resulting in tick interrupts having"]
    #[doc = " been missed."]
    #[doc = ""]
    #[doc = " This function is similar to vTaskStepTick(), however, unlike"]
    #[doc = " vTaskStepTick(), xTaskCatchUpTicks() may move the tick count forward past a"]
    #[doc = " time at which a task should be removed from the blocked state.  That means"]
    #[doc = " tasks may have to be removed from the blocked state as the tick count is"]
    #[doc = " moved."]
    #[doc = ""]
    #[doc = " @param xTicksToCatchUp The number of tick interrupts that have been missed due to"]
    #[doc = " interrupts being disabled.  Its value is not computed automatically, so must be"]
    #[doc = " computed by the application writer."]
    #[doc = ""]
    #[doc = " @return pdTRUE if moving the tick count forward resulted in a task leaving the"]
    #[doc = " blocked state and a context switch being performed.  Otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskCatchUpTicks xTaskCatchUpTicks"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskCatchUpTicks(xTicksToCatchUp: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskIncrementTick() -> BaseType_t;
}
extern "C" {
    pub fn vTaskPlaceOnEventList(pxEventList: *mut List_t, xTicksToWait: TickType_t);
}
extern "C" {
    pub fn vTaskPlaceOnUnorderedEventList(
        pxEventList: *mut List_t,
        xItemValue: TickType_t,
        xTicksToWait: TickType_t,
    );
}
extern "C" {
    pub fn vTaskPlaceOnEventListRestricted(
        pxEventList: *mut List_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xTaskRemoveFromEventList(pxEventList: *const List_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskRemoveFromUnorderedEventList(
        pxEventListItem: *mut ListItem_t,
        xItemValue: TickType_t,
    );
}
extern "C" {
    pub fn vTaskSwitchContext();
}
extern "C" {
    pub fn uxTaskResetEventItemValue() -> TickType_t;
}
extern "C" {
    pub fn xTaskGetCurrentTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskMissedYield();
}
extern "C" {
    pub fn xTaskGetSchedulerState() -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityInherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityDisinherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskPriorityDisinheritAfterTimeout(
        pxMutexHolder: TaskHandle_t,
        uxHighestPriorityWaitingTask: UBaseType_t,
    );
}
extern "C" {
    pub fn uxTaskGetTaskNumber(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn vTaskSetTaskNumber(xTask: TaskHandle_t, uxHandle: UBaseType_t);
}
extern "C" {
    pub fn vTaskStepTick(xTicksToJump: TickType_t);
}
extern "C" {
    pub fn eTaskConfirmSleepModeStatus() -> eSleepModeStatus;
}
extern "C" {
    pub fn pvTaskIncrementMutexHeldCount() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskInternalSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
#[doc = " Type by which queues are referenced.  For example, a call to xQueueCreate()"]
#[doc = " returns an QueueHandle_t variable that can then be used as a parameter to"]
#[doc = " xQueueSend(), xQueueReceive(), etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    _unused: [u8; 0],
}
pub type QueueHandle_t = *mut QueueDefinition;
#[doc = " Type by which queue sets are referenced.  For example, a call to"]
#[doc = " xQueueCreateSet() returns an xQueueSet variable that can then be used as a"]
#[doc = " parameter to xQueueSelectFromSet(), xQueueAddToSet(), etc."]
pub type QueueSetHandle_t = *mut QueueDefinition;
#[doc = " Queue sets can contain both queues and semaphores, so the"]
#[doc = " QueueSetMemberHandle_t is defined as a type to be used where a parameter or"]
#[doc = " return value can be either an QueueHandle_t or an SemaphoreHandle_t."]
pub type QueueSetMemberHandle_t = *mut QueueDefinition;
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueGenericSend("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  const void * pvItemToQueue,"]
    #[doc = "                                  TickType_t xTicksToWait"]
    #[doc = "                                  BaseType_t xCopyPosition"]
    #[doc = "                              );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSend(), xQueueSendToFront() and"]
    #[doc = " xQueueSendToBack() are used in place of calling this function directly."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  The item is queued by copy, not by reference."]
    #[doc = " This function must not be called from an interrupt service routine."]
    #[doc = " See xQueueSendFromISR () for an alternative which may be used in an ISR."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for space to become available on the queue, should it already"]
    #[doc = " be full.  The call will return immediately if this is set to 0 and the"]
    #[doc = " queue is full.  The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " uint32_t ulVar = 10UL;"]
    #[doc = ""]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " QueueHandle_t xQueue1, xQueue2;"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 uint32_t values."]
    #[doc = "  xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  if( xQueue1 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send an uint32_t.  Wait for 10 ticks for space to become"]
    #[doc = "      // available if necessary."]
    #[doc = "      if( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS )"]
    #[doc = "      {"]
    #[doc = "          // Failed to post the message, even after 10 ticks."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( xQueue2 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "      // queue is already full."]
    #[doc = "      pxMessage = & xMessage;"]
    #[doc = "      xQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueueSend xQueueSend"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        xTicksToWait: TickType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueuePeek("]
    #[doc = "                           QueueHandle_t xQueue,"]
    #[doc = "                           void * const pvBuffer,"]
    #[doc = "                           TickType_t xTicksToWait"]
    #[doc = "                       );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " This macro must not be used in an interrupt service routine.  See"]
    #[doc = " xQueuePeekFromISR() for an alternative that can be called from an interrupt"]
    #[doc = " service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = " xQueuePeek() will return immediately if xTicksToWait is 0 and the queue"]
    #[doc = " is empty."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to peek the data from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Peek a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueuePeek( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask, but the item still remains on the queue."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueuePeek xQueuePeek"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeek(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueuePeekFromISR("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  void *pvBuffer,"]
    #[doc = "                              );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " A version of xQueuePeek() that can be called from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xQueuePeekFromISR xQueuePeekFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeekFromISR(xQueue: QueueHandle_t, pvBuffer: *mut cty::c_void) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueReceive("]
    #[doc = "                               QueueHandle_t xQueue,"]
    #[doc = "                               void *pvBuffer,"]
    #[doc = "                               TickType_t xTicksToWait"]
    #[doc = "                          );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  The item is received by copy so a buffer of"]
    #[doc = " adequate size must be provided.  The number of bytes copied into the buffer"]
    #[doc = " was defined when the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items are removed from the queue."]
    #[doc = ""]
    #[doc = " This function must not be used in an interrupt service routine.  See"]
    #[doc = " xQueueReceiveFromISR for an alternative that can."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. xQueueReceive() will return immediately if xTicksToWait"]
    #[doc = " is zero and the queue is empty.  The time is defined in tick periods so the"]
    #[doc = " constant portTICK_PERIOD_MS should be used to convert to real time if this is"]
    #[doc = " required."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to receive from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Receive a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueueReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueueReceive xQueueReceive"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Return the number of messages stored in a queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of messages available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueMessagesWaiting(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Return the number of free spaces available in a queue.  This is equal to the"]
    #[doc = " number of items that can be sent to the queue before the queue becomes full"]
    #[doc = " if no items are removed."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of spaces available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueSpacesAvailable(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " void vQueueDelete( QueueHandle_t xQueue );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Delete a queue - freeing all the memory allocated for storing of items"]
    #[doc = " placed on the queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue to be deleted."]
    #[doc = ""]
    #[doc = " \\defgroup vQueueDelete vQueueDelete"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn vQueueDelete(xQueue: QueueHandle_t);
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueGenericSendFromISR("]
    #[doc = "                                         QueueHandle_t    xQueue,"]
    #[doc = "                                         const    void    *pvItemToQueue,"]
    #[doc = "                                         BaseType_t  *pxHigherPriorityTaskWoken,"]
    #[doc = "                                         BaseType_t  xCopyPosition"]
    #[doc = "                                     );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSendFromISR(),"]
    #[doc = " xQueueSendToFrontFromISR() and xQueueSendToBackFromISR() be used in place"]
    #[doc = " of calling this function directly.  xQueueGiveFromISR() is an"]
    #[doc = " equivalent for use by semaphores that don't actually copy any data."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " Items are queued by copy not reference so it is preferable to only"]
    #[doc = " queue small items, especially when called from an ISR.  In most cases"]
    #[doc = " it would be preferable to store a pointer to the item being queued."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken xQueueGenericSendFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task"]
    #[doc = " to unblock, and the unblocked task has a priority higher than the currently"]
    #[doc = " running task.  If xQueueGenericSendFromISR() sets this value to pdTRUE then"]
    #[doc = " a context switch should be requested before the interrupt is exited."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the data was successfully sent to the queue, otherwise"]
    #[doc = " errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage for buffered IO (where the ISR can obtain more than one value"]
    #[doc = " per call):"]
    #[doc = " <pre>"]
    #[doc = " void vBufferISR( void )"]
    #[doc = " {"]
    #[doc = " char cIn;"]
    #[doc = " BaseType_t xHigherPriorityTaskWokenByPost;"]
    #[doc = ""]
    #[doc = "  // We have not woken a task at the start of the ISR."]
    #[doc = "  xHigherPriorityTaskWokenByPost = pdFALSE;"]
    #[doc = ""]
    #[doc = "  // Loop until the buffer is empty."]
    #[doc = "  do"]
    #[doc = "  {"]
    #[doc = "      // Obtain a byte from the buffer."]
    #[doc = "      cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );"]
    #[doc = ""]
    #[doc = "      // Post each byte."]
    #[doc = "      xQueueGenericSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );"]
    #[doc = ""]
    #[doc = "  } while( portINPUT_BYTE( BUFFER_COUNT ) );"]
    #[doc = ""]
    #[doc = "  // Now the buffer is empty we can switch context if necessary.  Note that the"]
    #[doc = "  // name of the yield function required is port specific."]
    #[doc = "  if( xHigherPriorityTaskWokenByPost )"]
    #[doc = "  {"]
    #[doc = "      portYIELD_FROM_ISR();"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " \\defgroup xQueueSendFromISR xQueueSendFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveFromISR(
        xQueue: QueueHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = " BaseType_t xQueueReceiveFromISR("]
    #[doc = "                                     QueueHandle_t    xQueue,"]
    #[doc = "                                     void             *pvBuffer,"]
    #[doc = "                                     BaseType_t       *pxTaskWoken"]
    #[doc = "                                 );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param pxTaskWoken A task may be blocked waiting for space to become"]
    #[doc = " available on the queue.  If xQueueReceiveFromISR causes such a task to"]
    #[doc = " unblock *pxTaskWoken will get set to pdTRUE, otherwise *pxTaskWoken will"]
    #[doc = " remain unchanged."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Function to create a queue and post some values."]
    #[doc = " void vAFunction( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " char cValueToPost;"]
    #[doc = " const TickType_t xTicksToWait = ( TickType_t )0xff;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 characters."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( char ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Post some characters that will be used within an ISR.  If the queue"]
    #[doc = "  // is full then this task will block for xTicksToWait ticks."]
    #[doc = "  cValueToPost = 'a';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = "  cValueToPost = 'b';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = ""]
    #[doc = "  // ... keep posting characters ... this task may block when the queue"]
    #[doc = "  // becomes full."]
    #[doc = ""]
    #[doc = "  cValueToPost = 'c';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // ISR that outputs all the characters received on the queue."]
    #[doc = " void vISR_Routine( void )"]
    #[doc = " {"]
    #[doc = " BaseType_t xTaskWokenByReceive = pdFALSE;"]
    #[doc = " char cRxedChar;"]
    #[doc = ""]
    #[doc = "  while( xQueueReceiveFromISR( xQueue, ( void * ) &cRxedChar, &xTaskWokenByReceive) )"]
    #[doc = "  {"]
    #[doc = "      // A character was received.  Output the character now."]
    #[doc = "      vOutputCharacter( cRxedChar );"]
    #[doc = ""]
    #[doc = "      // If removing the character from the queue woke the task that was"]
    #[doc = "      // posting onto the queue cTaskWokenByReceive will have been set to"]
    #[doc = "      // pdTRUE.  No matter how many times this loop iterates only one"]
    #[doc = "      // task will be woken."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( cTaskWokenByPost != ( char ) pdFALSE;"]
    #[doc = "  {"]
    #[doc = "      taskYIELD ();"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xQueueReceiveFromISR xQueueReceiveFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueEmptyFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueFullFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueMessagesWaitingFromISR(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn xQueueCRSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        xCoRoutinePreviouslyWoken: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        pxTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCreateMutex(ucQueueType: u8) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateMutexStatic(
        ucQueueType: u8,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphore(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphoreStatic(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueSemaphoreTake(xQueue: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGetMutexHolder(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueGetMutexHolderFromISR(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueTakeMutexRecursive(xMutex: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveMutexRecursive(xMutex: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGenericCreate(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateSet(uxEventQueueLength: UBaseType_t) -> QueueSetHandle_t;
}
extern "C" {
    pub fn xQueueAddToSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueRemoveFromSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueSelectFromSet(
        xQueueSet: QueueSetHandle_t,
        xTicksToWait: TickType_t,
    ) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn xQueueSelectFromSetFromISR(xQueueSet: QueueSetHandle_t) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn vQueueWaitForMessageRestricted(
        xQueue: QueueHandle_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xQueueGenericReset(xQueue: QueueHandle_t, xNewQueue: BaseType_t) -> BaseType_t;
}
extern "C" {
    pub fn vQueueSetQueueNumber(xQueue: QueueHandle_t, uxQueueNumber: UBaseType_t);
}
extern "C" {
    pub fn uxQueueGetQueueNumber(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn ucQueueGetQueueType(xQueue: QueueHandle_t) -> u8;
}
pub type SemaphoreHandle_t = QueueHandle_t;
#[doc = " Type by which software timers are referenced.  For example, a call to"]
#[doc = " xTimerCreate() returns an TimerHandle_t variable that can then be used to"]
#[doc = " reference the subject timer in calls to other software timer API functions"]
#[doc = " (for example, xTimerStart(), xTimerReset(), etc.)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmrTimerControl {
    _unused: [u8; 0],
}
pub type TimerHandle_t = *mut tmrTimerControl;
pub type TimerCallbackFunction_t =
    ::core::option::Option<unsafe extern "C" fn(xTimer: TimerHandle_t)>;
pub type PendedFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void, arg2: u32)>;
extern "C" {
    pub fn xTimerCreate(
        pcTimerName: *const cty::c_char,
        xTimerPeriodInTicks: TickType_t,
        uxAutoReload: UBaseType_t,
        pvTimerID: *mut cty::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
    ) -> TimerHandle_t;
}
extern "C" {
    #[doc = " void *pvTimerGetTimerID( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer, and by calling the"]
    #[doc = " vTimerSetTimerID() API function."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return The ID assigned to the timer being queried."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn pvTimerGetTimerID(xTimer: TimerHandle_t) -> *mut cty::c_void;
}
extern "C" {
    #[doc = " void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID );"]
    #[doc = ""]
    #[doc = " Sets the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being updated."]
    #[doc = ""]
    #[doc = " @param pvNewID The ID to assign to the timer."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn vTimerSetTimerID(xTimer: TimerHandle_t, pvNewID: *mut cty::c_void);
}
extern "C" {
    #[doc = " BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to see if it is active or dormant."]
    #[doc = ""]
    #[doc = " A timer will be dormant if:"]
    #[doc = "     1) It has been created but not started, or"]
    #[doc = "     2) It is an expired one-shot timer that has not been restarted."]
    #[doc = ""]
    #[doc = " Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),"]
    #[doc = " xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and"]
    #[doc = " xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the"]
    #[doc = " active state."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return pdFALSE will be returned if the timer is dormant.  A value other than"]
    #[doc = " pdFALSE will be returned if the timer is active."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @verbatim"]
    #[doc = " // This function assumes xTimer has already been created."]
    #[doc = " void vAFunction( TimerHandle_t xTimer )"]
    #[doc = " {"]
    #[doc = "     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently \"if( xTimerIsTimerActive( xTimer ) )\""]
    #[doc = "     {"]
    #[doc = "         // xTimer is active, do something."]
    #[doc = "     }"]
    #[doc = "     else"]
    #[doc = "     {"]
    #[doc = "         // xTimer is not active, do something else."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " @endverbatim"]
    pub fn xTimerIsTimerActive(xTimer: TimerHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " TaskHandle_t xTimerGetTimerDaemonTaskHandle( void );"]
    #[doc = ""]
    #[doc = " Simply returns the handle of the timer service/daemon task.  It it not valid"]
    #[doc = " to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started."]
    pub fn xTimerGetTimerDaemonTaskHandle() -> TaskHandle_t;
}
extern "C" {
    #[doc = " BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,"]
    #[doc = "                                          void *pvParameter1,"]
    #[doc = "                                          uint32_t ulParameter2,"]
    #[doc = "                                          BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " Used from application interrupt service routines to defer the execution of a"]
    #[doc = " function to the RTOS daemon task (the timer service task, hence this function"]
    #[doc = " is implemented in timers.c and is prefixed with 'Timer')."]
    #[doc = ""]
    #[doc = " Ideally an interrupt service routine (ISR) is kept as short as possible, but"]
    #[doc = " sometimes an ISR either has a lot of processing to do, or needs to perform"]
    #[doc = " processing that is not deterministic.  In these cases"]
    #[doc = " xTimerPendFunctionCallFromISR() can be used to defer processing of a function"]
    #[doc = " to the RTOS daemon task."]
    #[doc = ""]
    #[doc = " A mechanism is provided that allows the interrupt to return directly to the"]
    #[doc = " task that will subsequently execute the pended callback function.  This"]
    #[doc = " allows the callback function to execute contiguously in time with the"]
    #[doc = " interrupt - just as if the callback had executed in the interrupt itself."]
    #[doc = ""]
    #[doc = " @param xFunctionToPend The function to execute from the timer service/"]
    #[doc = " daemon task.  The function must conform to the PendedFunction_t"]
    #[doc = " prototype."]
    #[doc = ""]
    #[doc = " @param pvParameter1 The value of the callback function's first parameter."]
    #[doc = " The parameter has a void * type to allow it to be used to pass any type."]
    #[doc = " For example, unsigned longs can be cast to a void *, or the void * can be"]
    #[doc = " used to point to a structure."]
    #[doc = ""]
    #[doc = " @param ulParameter2 The value of the callback function's second parameter."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken As mentioned above, calling this function"]
    #[doc = " will result in a message being sent to the timer daemon task.  If the"]
    #[doc = " priority of the timer daemon task (which is set using"]
    #[doc = " configTIMER_TASK_PRIORITY in FreeRTOSConfig.h) is higher than the priority of"]
    #[doc = " the currently running task (the task the interrupt interrupted) then"]
    #[doc = " *pxHigherPriorityTaskWoken will be set to pdTRUE within"]
    #[doc = " xTimerPendFunctionCallFromISR(), indicating that a context switch should be"]
    #[doc = " requested before the interrupt exits.  For that reason"]
    #[doc = " *pxHigherPriorityTaskWoken must be initialised to pdFALSE.  See the"]
    #[doc = " example code below."]
    #[doc = ""]
    #[doc = " @return pdPASS is returned if the message was successfully sent to the"]
    #[doc = " timer daemon task, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @verbatim"]
    #[doc = ""]
    #[doc = "  // The callback function that will execute in the context of the daemon task."]
    #[doc = "  // Note callback functions must all use this same prototype."]
    #[doc = "  void vProcessInterface( void *pvParameter1, uint32_t ulParameter2 )"]
    #[doc = "  {"]
    #[doc = "      BaseType_t xInterfaceToService;"]
    #[doc = ""]
    #[doc = "      // The interface that requires servicing is passed in the second"]
    #[doc = "      // parameter.  The first parameter is not used in this case."]
    #[doc = "      xInterfaceToService = ( BaseType_t ) ulParameter2;"]
    #[doc = ""]
    #[doc = "      // ...Perform the processing here..."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // An ISR that receives data packets from multiple interfaces"]
    #[doc = "  void vAnISR( void )"]
    #[doc = "  {"]
    #[doc = "      BaseType_t xInterfaceToService, xHigherPriorityTaskWoken;"]
    #[doc = ""]
    #[doc = "      // Query the hardware to determine which interface needs processing."]
    #[doc = "      xInterfaceToService = prvCheckInterfaces();"]
    #[doc = ""]
    #[doc = "      // The actual processing is to be deferred to a task.  Request the"]
    #[doc = "      // vProcessInterface() callback function is executed, passing in the"]
    #[doc = "      // number of the interface that needs processing.  The interface to"]
    #[doc = "      // service is passed in the second parameter.  The first parameter is"]
    #[doc = "      // not used in this case."]
    #[doc = "      xHigherPriorityTaskWoken = pdFALSE;"]
    #[doc = "      xTimerPendFunctionCallFromISR( vProcessInterface, NULL, ( uint32_t ) xInterfaceToService, &xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "      // If xHigherPriorityTaskWoken is now set to pdTRUE then a context"]
    #[doc = "      // switch should be requested.  The macro used is port specific and will"]
    #[doc = "      // be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to"]
    #[doc = "      // the documentation page for the port being used."]
    #[doc = "      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "  }"]
    #[doc = " @endverbatim"]
    pub fn xTimerPendFunctionCallFromISR(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut cty::c_void,
        ulParameter2: u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,"]
    #[doc = "                                    void *pvParameter1,"]
    #[doc = "                                    uint32_t ulParameter2,"]
    #[doc = "                                    TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " Used to defer the execution of a function to the RTOS daemon task (the timer"]
    #[doc = " service task, hence this function is implemented in timers.c and is prefixed"]
    #[doc = " with 'Timer')."]
    #[doc = ""]
    #[doc = " @param xFunctionToPend The function to execute from the timer service/"]
    #[doc = " daemon task.  The function must conform to the PendedFunction_t"]
    #[doc = " prototype."]
    #[doc = ""]
    #[doc = " @param pvParameter1 The value of the callback function's first parameter."]
    #[doc = " The parameter has a void * type to allow it to be used to pass any type."]
    #[doc = " For example, unsigned longs can be cast to a void *, or the void * can be"]
    #[doc = " used to point to a structure."]
    #[doc = ""]
    #[doc = " @param ulParameter2 The value of the callback function's second parameter."]
    #[doc = ""]
    #[doc = " @param xTicksToWait Calling this function will result in a message being"]
    #[doc = " sent to the timer daemon task on a queue.  xTicksToWait is the amount of"]
    #[doc = " time the calling task should remain in the Blocked state (so not using any"]
    #[doc = " processing time) for space to become available on the timer queue if the"]
    #[doc = " queue is found to be full."]
    #[doc = ""]
    #[doc = " @return pdPASS is returned if the message was successfully sent to the"]
    #[doc = " timer daemon task, otherwise pdFALSE is returned."]
    #[doc = ""]
    pub fn xTimerPendFunctionCall(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut cty::c_void,
        ulParameter2: u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " const char * const pcTimerGetName( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the name that was assigned to a timer when the timer was created."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The name assigned to the timer specified by the xTimer parameter."]
    pub fn pcTimerGetName(xTimer: TimerHandle_t) -> *const cty::c_char;
}
extern "C" {
    #[doc = " void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload );"]
    #[doc = ""]
    #[doc = " Updates a timer to be either an auto-reload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one-shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being updated."]
    #[doc = ""]
    #[doc = " @param uxAutoReload If uxAutoReload is set to pdTRUE then the timer will"]
    #[doc = " expire repeatedly with a frequency set by the timer's period (see the"]
    #[doc = " xTimerPeriodInTicks parameter of the xTimerCreate() API function).  If"]
    #[doc = " uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and"]
    #[doc = " enter the dormant state after it expires."]
    pub fn vTimerSetReloadMode(xTimer: TimerHandle_t, uxAutoReload: UBaseType_t);
}
extern "C" {
    #[doc = " UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to determine if it is an auto-reload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one-shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is an auto-reload timer then pdTRUE is returned, otherwise"]
    #[doc = " pdFALSE is returned."]
    pub fn uxTimerGetReloadMode(xTimer: TimerHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " TickType_t xTimerGetPeriod( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the period of a timer."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The period of the timer in ticks."]
    pub fn xTimerGetPeriod(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    #[doc = " TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the time in ticks at which the timer will expire.  If this is less"]
    #[doc = " than the current tick count then the expiry time has overflowed from the"]
    #[doc = " current time."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is running then the time in ticks at which the timer"]
    #[doc = " will next expire is returned.  If the timer is not running then the return"]
    #[doc = " value is undefined."]
    pub fn xTimerGetExpiryTime(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn xTimerCreateTimerTask() -> BaseType_t;
}
extern "C" {
    pub fn xTimerGenericCommand(
        xTimer: TimerHandle_t,
        xCommandID: BaseType_t,
        xOptionalValue: TickType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn vTimerSetTimerNumber(xTimer: TimerHandle_t, uxTimerNumber: UBaseType_t);
}
extern "C" {
    pub fn uxTimerGetTimerNumber(xTimer: TimerHandle_t) -> UBaseType_t;
}
#[doc = " event_groups.h"]
#[doc = ""]
#[doc = " Type by which event groups are referenced.  For example, a call to"]
#[doc = " xEventGroupCreate() returns an EventGroupHandle_t variable that can then"]
#[doc = " be used as a parameter to other event group functions."]
#[doc = ""]
#[doc = " \\defgroup EventGroupHandle_t EventGroupHandle_t"]
#[doc = " \\ingroup EventGroup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventGroupDef_t {
    _unused: [u8; 0],
}
pub type EventGroupHandle_t = *mut EventGroupDef_t;
pub type EventBits_t = TickType_t;
extern "C" {
    pub fn xEventGroupCreate() -> EventGroupHandle_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupWaitBits(    EventGroupHandle_t xEventGroup,"]
    #[doc = "                                      const EventBits_t uxBitsToWaitFor,"]
    #[doc = "                                      const BaseType_t xClearOnExit,"]
    #[doc = "                                      const BaseType_t xWaitForAllBits,"]
    #[doc = "                                      const TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " [Potentially] block to wait for one or more bits to be set within a"]
    #[doc = " previously created event group."]
    #[doc = ""]
    #[doc = " This function cannot be called from an interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and/or bit 1 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xClearOnExit If xClearOnExit is set to pdTRUE then any bits within"]
    #[doc = " uxBitsToWaitFor that are set within the event group will be cleared before"]
    #[doc = " xEventGroupWaitBits() returns if the wait condition was met (if the function"]
    #[doc = " returns for a reason other than a timeout).  If xClearOnExit is set to"]
    #[doc = " pdFALSE then the bits set in the event group are not altered when the call to"]
    #[doc = " xEventGroupWaitBits() returns."]
    #[doc = ""]
    #[doc = " @param xWaitForAllBits If xWaitForAllBits is set to pdTRUE then"]
    #[doc = " xEventGroupWaitBits() will return when either all the bits in uxBitsToWaitFor"]
    #[doc = " are set or the specified block time expires.  If xWaitForAllBits is set to"]
    #[doc = " pdFALSE then xEventGroupWaitBits() will return when any one of the bits set"]
    #[doc = " in uxBitsToWaitFor is set or the specified block time expires.  The block"]
    #[doc = " time is specified by the xTicksToWait parameter."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for one/all (depending on the xWaitForAllBits value) of the bits specified by"]
    #[doc = " uxBitsToWaitFor to become set."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupWaitBits() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupWaitBits() returned because the bits it was waiting for were set"]
    #[doc = " then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared in the case that xClearOnExit parameter was set to"]
    #[doc = " pdTRUE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "#define BIT_0 ( 1 << 0 )"]
    #[doc = "#define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = " const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "      // Wait a maximum of 100ms for either bit 0 or bit 4 to be set within"]
    #[doc = "      // the event group.  Clear the bits before exiting."]
    #[doc = "      uxBits = xEventGroupWaitBits("]
    #[doc = "                  xEventGroup,    // The event group being tested."]
    #[doc = "                  BIT_0 | BIT_4,  // The bits within the event group to wait for."]
    #[doc = "                  pdTRUE,         // BIT_0 and BIT_4 should be cleared before returning."]
    #[doc = "                  pdFALSE,        // Don't wait for both bits, either bit will do."]
    #[doc = "                  xTicksToWait ); // Wait a maximum of 100ms for either bit to be set."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because both bits were set."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because just BIT_0 was set."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because just BIT_4 was set."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // xEventGroupWaitBits() returned because xTicksToWait ticks passed"]
    #[doc = "          // without either BIT_0 or BIT_4 becoming set."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupWaitBits xEventGroupWaitBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupWaitBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToWaitFor: EventBits_t,
        xClearOnExit: BaseType_t,
        xWaitForAllBits: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Clear bits within an event group.  This function cannot be called from an"]
    #[doc = " interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be cleared."]
    #[doc = ""]
    #[doc = " @param uxBitsToClear A bitwise value that indicates the bit or bits to clear"]
    #[doc = " in the event group.  For example, to clear bit 3 only, set uxBitsToClear to"]
    #[doc = " 0x08.  To clear bit 3 and bit 0 set uxBitsToClear to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group before the specified bits were cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "#define BIT_0 ( 1 << 0 )"]
    #[doc = "#define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "      // Clear bit 0 and bit 4 in xEventGroup."]
    #[doc = "      uxBits = xEventGroupClearBits("]
    #[doc = "                              xEventGroup,    // The event group being updated."]
    #[doc = "                              BIT_0 | BIT_4 );// The bits being cleared."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // Both bit 0 and bit 4 were set before xEventGroupClearBits() was"]
    #[doc = "          // called.  Both will now be clear (not set)."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 0 was set before xEventGroupClearBits() was called.  It will"]
    #[doc = "          // now be clear."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 4 was set before xEventGroupClearBits() was called.  It will"]
    #[doc = "          // now be clear."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // Neither bit 0 nor bit 4 were set in the first place."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupClearBits xEventGroupClearBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupClearBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn xEventGroupClearBitsFromISR(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Set bits within an event group."]
    #[doc = " This function cannot be called from an interrupt.  xEventGroupSetBitsFromISR()"]
    #[doc = " is a version that can be called from an interrupt."]
    #[doc = ""]
    #[doc = " Setting bits in an event group will automatically unblock tasks that are"]
    #[doc = " blocked waiting for the bits."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be set."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet A bitwise value that indicates the bit or bits to set."]
    #[doc = " For example, to set bit 3 only, set uxBitsToSet to 0x08.  To set bit 3"]
    #[doc = " and bit 0 set uxBitsToSet to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time the call to"]
    #[doc = " xEventGroupSetBits() returns.  There are two reasons why the returned value"]
    #[doc = " might have the bits specified by the uxBitsToSet parameter cleared.  First,"]
    #[doc = " if setting a bit results in a task that was waiting for the bit leaving the"]
    #[doc = " blocked state then it is possible the bit will be cleared automatically"]
    #[doc = " (see the xClearBitOnExit parameter of xEventGroupWaitBits()).  Second, any"]
    #[doc = " unblocked (or otherwise Ready state) task that has a priority above that of"]
    #[doc = " the task that called xEventGroupSetBits() will execute and may change the"]
    #[doc = " event group value before the call to xEventGroupSetBits() returns."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = "#define BIT_0 ( 1 << 0 )"]
    #[doc = "#define BIT_4 ( 1 << 4 )"]
    #[doc = ""]
    #[doc = " void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "      // Set bit 0 and bit 4 in xEventGroup."]
    #[doc = "      uxBits = xEventGroupSetBits("]
    #[doc = "                          xEventGroup,    // The event group being updated."]
    #[doc = "                          BIT_0 | BIT_4 );// The bits being set."]
    #[doc = ""]
    #[doc = "      if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "      {"]
    #[doc = "          // Both bit 0 and bit 4 remained set when the function returned."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 0 remained set when the function returned, but bit 4 was"]
    #[doc = "          // cleared.  It might be that bit 4 was cleared automatically as a"]
    #[doc = "          // task that was waiting for bit 4 was removed from the Blocked"]
    #[doc = "          // state."]
    #[doc = "      }"]
    #[doc = "      else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "      {"]
    #[doc = "          // Bit 4 remained set when the function returned, but bit 0 was"]
    #[doc = "          // cleared.  It might be that bit 0 was cleared automatically as a"]
    #[doc = "          // task that was waiting for bit 0 was removed from the Blocked"]
    #[doc = "          // state."]
    #[doc = "      }"]
    #[doc = "      else"]
    #[doc = "      {"]
    #[doc = "          // Neither bit 0 nor bit 4 remained set.  It might be that a task"]
    #[doc = "          // was waiting for both of the bits to be set, and the bits were"]
    #[doc = "          // cleared as the task left the Blocked state."]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupSetBits xEventGroupSetBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSetBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn xEventGroupSetBitsFromISR(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupSync(    EventGroupHandle_t xEventGroup,"]
    #[doc = "                                  const EventBits_t uxBitsToSet,"]
    #[doc = "                                  const EventBits_t uxBitsToWaitFor,"]
    #[doc = "                                  TickType_t xTicksToWait );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Atomically set bits within an event group, then wait for a combination of"]
    #[doc = " bits to be set within the same event group.  This functionality is typically"]
    #[doc = " used to synchronise multiple tasks, where each task has to wait for the other"]
    #[doc = " tasks to reach a synchronisation point before proceeding."]
    #[doc = ""]
    #[doc = " This function cannot be used from an interrupt."]
    #[doc = ""]
    #[doc = " The function will return before its block time expires if the bits specified"]
    #[doc = " by the uxBitsToWait parameter are set, or become set within that time.  In"]
    #[doc = " this case all the bits specified by uxBitsToWait will be automatically"]
    #[doc = " cleared before the function returns."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet The bits to set in the event group before determining"]
    #[doc = " if, and possibly waiting for, all the bits specified by the uxBitsToWait"]
    #[doc = " parameter are set."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and bit 1 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for all of the bits specified by uxBitsToWaitFor to become set."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupSync() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupSync() returned because all the bits it was waiting for were"]
    #[doc = " set then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " <pre>"]
    #[doc = " // Bits used by the three tasks."]
    #[doc = "#define TASK_0_BIT     ( 1 << 0 )"]
    #[doc = "#define TASK_1_BIT     ( 1 << 1 )"]
    #[doc = "#define TASK_2_BIT     ( 1 << 2 )"]
    #[doc = ""]
    #[doc = "#define ALL_SYNC_BITS ( TASK_0_BIT | TASK_1_BIT | TASK_2_BIT )"]
    #[doc = ""]
    #[doc = " // Use an event group to synchronise three tasks.  It is assumed this event"]
    #[doc = " // group has already been created elsewhere."]
    #[doc = " EventGroupHandle_t xEventBits;"]
    #[doc = ""]
    #[doc = " void vTask0( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " EventBits_t uxReturn;"]
    #[doc = " TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 0 in the event flag to note this task has reached the"]
    #[doc = "      // sync point.  The other two tasks will set the other two bits defined"]
    #[doc = "      // by ALL_SYNC_BITS.  All three tasks have reached the synchronisation"]
    #[doc = "      // point when all the ALL_SYNC_BITS are set.  Wait a maximum of 100ms"]
    #[doc = "      // for this to happen."]
    #[doc = "      uxReturn = xEventGroupSync( xEventBits, TASK_0_BIT, ALL_SYNC_BITS, xTicksToWait );"]
    #[doc = ""]
    #[doc = "      if( ( uxReturn & ALL_SYNC_BITS ) == ALL_SYNC_BITS )"]
    #[doc = "      {"]
    #[doc = "          // All three tasks reached the synchronisation point before the call"]
    #[doc = "          // to xEventGroupSync() timed out."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vTask1( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 1 in the event flag to note this task has reached the"]
    #[doc = "      // synchronisation point.  The other two tasks will set the other two"]
    #[doc = "      // bits defined by ALL_SYNC_BITS.  All three tasks have reached the"]
    #[doc = "      // synchronisation point when all the ALL_SYNC_BITS are set.  Wait"]
    #[doc = "      // indefinitely for this to happen."]
    #[doc = "      xEventGroupSync( xEventBits, TASK_1_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "      // xEventGroupSync() was called with an indefinite block time, so"]
    #[doc = "      // this task will only reach here if the synchronisation was made by all"]
    #[doc = "      // three tasks, so there is no need to test the return value."]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vTask2( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "      // Perform task functionality here."]
    #[doc = ""]
    #[doc = "      // Set bit 2 in the event flag to note this task has reached the"]
    #[doc = "      // synchronisation point.  The other two tasks will set the other two"]
    #[doc = "      // bits defined by ALL_SYNC_BITS.  All three tasks have reached the"]
    #[doc = "      // synchronisation point when all the ALL_SYNC_BITS are set.  Wait"]
    #[doc = "      // indefinitely for this to happen."]
    #[doc = "      xEventGroupSync( xEventBits, TASK_2_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "      // xEventGroupSync() was called with an indefinite block time, so"]
    #[doc = "      // this task will only reach here if the synchronisation was made by all"]
    #[doc = "      // three tasks, so there is no need to test the return value."]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " </pre>"]
    #[doc = " \\defgroup xEventGroupSync xEventGroupSync"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSync(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        uxBitsToWaitFor: EventBits_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " A version of xEventGroupGetBits() that can be called from an ISR."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being queried."]
    #[doc = ""]
    #[doc = " @return The event group bits at the time xEventGroupGetBitsFromISR() was called."]
    #[doc = ""]
    #[doc = " \\defgroup xEventGroupGetBitsFromISR xEventGroupGetBitsFromISR"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupGetBitsFromISR(xEventGroup: EventGroupHandle_t) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = " <pre>"]
    #[doc = "  void xEventGroupDelete( EventGroupHandle_t xEventGroup );"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Delete an event group that was previously created by a call to"]
    #[doc = " xEventGroupCreate().  Tasks that are blocked on the event group will be"]
    #[doc = " unblocked and obtain 0 as the event group's value."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being deleted."]
    pub fn vEventGroupDelete(xEventGroup: EventGroupHandle_t);
}
extern "C" {
    pub fn vEventGroupSetBitsCallback(pvEventGroup: *mut cty::c_void, ulBitsToSet: u32);
}
extern "C" {
    pub fn vEventGroupClearBitsCallback(pvEventGroup: *mut cty::c_void, ulBitsToClear: u32);
}
extern "C" {
    pub fn uxEventGroupGetNumber(xEventGroup: *mut cty::c_void) -> UBaseType_t;
}
extern "C" {
    pub fn vEventGroupSetNumber(xEventGroup: *mut cty::c_void, uxEventGroupNumber: UBaseType_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnBinarySemaphore {
    pub _handle: SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEv"]
    pub fn lnBinarySemaphore_take(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore7tryTakeEv"]
    pub fn lnBinarySemaphore_tryTake(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEi"]
    pub fn lnBinarySemaphore_take1(this: *mut lnBinarySemaphore, timeoutMs: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4giveEv"]
    pub fn lnBinarySemaphore_give(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphoreC1Ev"]
    pub fn lnBinarySemaphore_lnBinarySemaphore(this: *mut lnBinarySemaphore);
}
impl lnBinarySemaphore {
    #[inline]
    pub unsafe fn take(&mut self) -> bool {
        lnBinarySemaphore_take(self)
    }
    #[inline]
    pub unsafe fn tryTake(&mut self) -> bool {
        lnBinarySemaphore_tryTake(self)
    }
    #[inline]
    pub unsafe fn take1(&mut self, timeoutMs: cty::c_int) -> bool {
        lnBinarySemaphore_take1(self, timeoutMs)
    }
    #[inline]
    pub unsafe fn give(&mut self) -> bool {
        lnBinarySemaphore_give(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBinarySemaphore_lnBinarySemaphore(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct lnTask__bindgen_vtable(cty::c_void);
#[doc = " @brief"]
#[doc = ""]
#[repr(C)]
#[derive(Debug)]
pub struct lnTask {
    pub vtable_: *const lnTask__bindgen_vtable,
    pub _taskHandle: TaskHandle_t,
    pub _name: *const cty::c_char,
    pub _priority: cty::c_int,
    pub _taskSize: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTask5startEv"]
    pub fn lnTask_start(this: *mut lnTask);
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskC2EPKcii"]
    pub fn lnTask_lnTask(
        this: *mut lnTask,
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    );
}
impl lnTask {
    #[inline]
    pub unsafe fn start(&mut self) {
        lnTask_start(self)
    }
    #[inline]
    pub unsafe fn new(
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTask_lnTask(__bindgen_tmp.as_mut_ptr(), name, priority, taskSize);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskD1Ev"]
    pub fn lnTask_lnTask_destructor(this: *mut lnTask);
}
#[repr(C)]
pub struct lnEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnEventGroup {
    pub vtable_: *const lnEventGroup__bindgen_vtable,
    pub _handle: EventGroupHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup9setEventsEj"]
    pub fn lnEventGroup_setEvents(this: *mut lnEventGroup, events: u32);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10waitEventsEji"]
    pub fn lnEventGroup_waitEvents(
        this: *mut lnEventGroup,
        maskint: u32,
        timeout: cty::c_int,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10readEventsEj"]
    pub fn lnEventGroup_readEvents(this: *mut lnEventGroup, maskInt: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupC1Ev"]
    pub fn lnEventGroup_lnEventGroup(this: *mut lnEventGroup);
}
impl lnEventGroup {
    #[inline]
    pub unsafe fn setEvents(&mut self, events: u32) {
        lnEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(&mut self, maskint: u32, timeout: cty::c_int) -> u32 {
        lnEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: u32) -> u32 {
        lnEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnEventGroup_lnEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupD1Ev"]
    pub fn lnEventGroup_lnEventGroup_destructor(this: *mut lnEventGroup);
}
#[repr(C)]
pub struct lnFastEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnFastEventGroup {
    pub vtable_: *const lnFastEventGroup__bindgen_vtable,
    pub _value: u32,
    pub _mask: u32,
    pub _waitingTask: TaskHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup13takeOwnershipEv"]
    pub fn lnFastEventGroup_takeOwnership(this: *mut lnFastEventGroup);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup9setEventsEj"]
    pub fn lnFastEventGroup_setEvents(this: *mut lnFastEventGroup, events: u32);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10waitEventsEji"]
    pub fn lnFastEventGroup_waitEvents(
        this: *mut lnFastEventGroup,
        maskint: u32,
        timeout: cty::c_int,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10readEventsEj"]
    pub fn lnFastEventGroup_readEvents(this: *mut lnFastEventGroup, maskInt: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupC1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup(this: *mut lnFastEventGroup);
}
impl lnFastEventGroup {
    #[inline]
    pub unsafe fn takeOwnership(&mut self) {
        lnFastEventGroup_takeOwnership(self)
    }
    #[inline]
    pub unsafe fn setEvents(&mut self, events: u32) {
        lnFastEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(&mut self, maskint: u32, timeout: cty::c_int) -> u32 {
        lnFastEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: u32) -> u32 {
        lnFastEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastEventGroup_lnFastEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupD1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup_destructor(this: *mut lnFastEventGroup);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnMutex {
    pub _handle: SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex4lockEv"]
    pub fn lnMutex_lock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex6unlockEv"]
    pub fn lnMutex_unlock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutexC1Ev"]
    pub fn lnMutex_lnMutex(this: *mut lnMutex);
}
impl lnMutex {
    #[inline]
    pub unsafe fn lock(&mut self) -> bool {
        lnMutex_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) -> bool {
        lnMutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnMutex_lnMutex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[doc = " @param tex"]
#[repr(C)]
#[derive(Debug)]
pub struct lnAutoMutex {
    pub _tex: *mut lnMutex,
}
extern "C" {
    #[link_name = "\u{1}_Z10LoggerInitv"]
    pub fn LoggerInit();
}
extern "C" {
    #[link_name = "\u{1}_Z11debugLoggerPKcz"]
    pub fn debugLogger(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn Logger(fmt: *const cty::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_Z17lnInitSystemClockv"]
    pub fn lnInitSystemClock();
}
pub const Peripherals_pNONE: Peripherals = 0;
pub const Peripherals_pSPI0: Peripherals = 1;
pub const Peripherals_pSPI1: Peripherals = 2;
pub const Peripherals_pSPI2: Peripherals = 3;
pub const Peripherals_pUART0: Peripherals = 4;
pub const Peripherals_pUART1: Peripherals = 5;
pub const Peripherals_pUART2: Peripherals = 6;
pub const Peripherals_pUART3: Peripherals = 7;
pub const Peripherals_pUART4: Peripherals = 8;
pub const Peripherals_pI2C0: Peripherals = 9;
pub const Peripherals_pI2C1: Peripherals = 10;
pub const Peripherals_pCAN0: Peripherals = 11;
pub const Peripherals_pCAN1: Peripherals = 12;
pub const Peripherals_pDAC: Peripherals = 13;
pub const Peripherals_pPMU: Peripherals = 14;
pub const Peripherals_pBKPI: Peripherals = 15;
pub const Peripherals_pWWDGT: Peripherals = 16;
pub const Peripherals_pTIMER0: Peripherals = 17;
pub const Peripherals_pTIMER1: Peripherals = 18;
pub const Peripherals_pTIMER2: Peripherals = 19;
pub const Peripherals_pTIMER3: Peripherals = 20;
pub const Peripherals_pTIMER4: Peripherals = 21;
pub const Peripherals_pTIMER5: Peripherals = 22;
pub const Peripherals_pTIMER6: Peripherals = 23;
pub const Peripherals_pUSB: Peripherals = 24;
pub const Peripherals_pADC0: Peripherals = 25;
pub const Peripherals_pADC1: Peripherals = 26;
pub const Peripherals_pGPIOA: Peripherals = 27;
pub const Peripherals_pGPIOB: Peripherals = 28;
pub const Peripherals_pGPIOC: Peripherals = 29;
pub const Peripherals_pGPIOD: Peripherals = 30;
pub const Peripherals_pGPIOE: Peripherals = 31;
pub const Peripherals_pAF: Peripherals = 32;
pub const Peripherals_pDMA0: Peripherals = 33;
pub const Peripherals_pDMA1: Peripherals = 34;
pub const Peripherals_pAPB1: Peripherals = 100;
pub const Peripherals_pAPB2: Peripherals = 101;
pub const Peripherals_pSYSCLOCK: Peripherals = 102;
pub type Peripherals = cty::c_uint;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_2: lnADC_DIVIDER = 0;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_4: lnADC_DIVIDER = 1;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_6: lnADC_DIVIDER = 2;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_8: lnADC_DIVIDER = 3;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_12: lnADC_DIVIDER = 5;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_16: lnADC_DIVIDER = 7;
pub type lnADC_DIVIDER = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnPeripherals {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals5resetE11Peripherals"]
    pub fn lnPeripherals_reset(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals6enableE11Peripherals"]
    pub fn lnPeripherals_enable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals7disableE11Peripherals"]
    pub fn lnPeripherals_disable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals8getClockE11Peripherals"]
    pub fn lnPeripherals_getClock(periph: Peripherals) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals13setAdcDividerE13lnADC_DIVIDER"]
    pub fn lnPeripherals_setAdcDivider(divider: lnADC_DIVIDER);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals14enableUsb48MhzEv"]
    pub fn lnPeripherals_enableUsb48Mhz();
}
impl lnPeripherals {
    #[inline]
    pub unsafe fn reset(periph: Peripherals) {
        lnPeripherals_reset(periph)
    }
    #[inline]
    pub unsafe fn enable(periph: Peripherals) {
        lnPeripherals_enable(periph)
    }
    #[inline]
    pub unsafe fn disable(periph: Peripherals) {
        lnPeripherals_disable(periph)
    }
    #[inline]
    pub unsafe fn getClock(periph: Peripherals) -> u32 {
        lnPeripherals_getClock(periph)
    }
    #[inline]
    pub unsafe fn setAdcDivider(divider: lnADC_DIVIDER) {
        lnPeripherals_setAdcDivider(divider)
    }
    #[inline]
    pub unsafe fn enableUsb48Mhz() {
        lnPeripherals_enableUsb48Mhz()
    }
}
pub const LnIRQ_LN_IRQ_MSIP: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_NONE: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_RESET: LnIRQ = -12;
pub const LnIRQ_LN_IRQ_NMI: LnIRQ = -11;
pub const LnIRQ_LN_IRQ_HARDFAULT: LnIRQ = -10;
pub const LnIRQ_LN_IRQ_MEMMANAGE: LnIRQ = -9;
pub const LnIRQ_LN_IRQ_BUSFAULT: LnIRQ = -8;
pub const LnIRQ_LN_IRQ_USAGEFAULT: LnIRQ = -7;
pub const LnIRQ_LN_IRQ_RESERVED: LnIRQ = -6;
pub const LnIRQ_LN_IRQ_SVCALL: LnIRQ = -5;
pub const LnIRQ_LN_IRQ_DEBUGMON: LnIRQ = -4;
pub const LnIRQ_LN_IRQ_RESERVED2: LnIRQ = -3;
pub const LnIRQ_LN_IRQ_PENDSV: LnIRQ = -2;
pub const LnIRQ_LN_IRQ_SYSTICK: LnIRQ = -1;
pub const LnIRQ_LN_IRQ_WWDG: LnIRQ = 0;
pub const LnIRQ_LN_IRQ_LVD: LnIRQ = 1;
pub const LnIRQ_LN_IRQ_TAMPER: LnIRQ = 2;
pub const LnIRQ_LN_IRQ_RTC: LnIRQ = 3;
pub const LnIRQ_LN_IRQ_FMC: LnIRQ = 4;
pub const LnIRQ_LN_IRQ_RCU_RCC: LnIRQ = 5;
pub const LnIRQ_LN_IRQ_EXTI0: LnIRQ = 6;
pub const LnIRQ_LN_IRQ_EXTI1: LnIRQ = 7;
pub const LnIRQ_LN_IRQ_EXTI2: LnIRQ = 8;
pub const LnIRQ_LN_IRQ_EXTI3: LnIRQ = 9;
pub const LnIRQ_LN_IRQ_EXTI4: LnIRQ = 10;
pub const LnIRQ_LN_IRQ_DMA0_Channel0: LnIRQ = 11;
pub const LnIRQ_LN_IRQ_DMA0_Channel1: LnIRQ = 12;
pub const LnIRQ_LN_IRQ_DMA0_Channel2: LnIRQ = 13;
pub const LnIRQ_LN_IRQ_DMA0_Channel3: LnIRQ = 14;
pub const LnIRQ_LN_IRQ_DMA0_Channel4: LnIRQ = 15;
pub const LnIRQ_LN_IRQ_DMA0_Channel5: LnIRQ = 16;
pub const LnIRQ_LN_IRQ_DMA0_Channel6: LnIRQ = 17;
pub const LnIRQ_LN_IRQ_ADC0_1: LnIRQ = 18;
pub const LnIRQ_LN_IRQ_USB_HP_CAN_TX: LnIRQ = 19;
pub const LnIRQ_LN_IRQ_USB_LP_CAN_RX0: LnIRQ = 20;
pub const LnIRQ_LN_IRQ_CAN_RX1: LnIRQ = 21;
pub const LnIRQ_LN_IRQ_CAN_SCE: LnIRQ = 22;
pub const LnIRQ_LN_IRQ_EXTI5_9: LnIRQ = 23;
pub const LnIRQ_LN_IRQ_TIMER0_BRK: LnIRQ = 24;
pub const LnIRQ_LN_IRQ_TIMER0_UP: LnIRQ = 25;
pub const LnIRQ_LN_IRQ_TIMER0_TRG_CMT: LnIRQ = 26;
pub const LnIRQ_LN_IRQ_TIMER0_Channel: LnIRQ = 27;
pub const LnIRQ_LN_IRQ_TIMER1: LnIRQ = 28;
pub const LnIRQ_LN_IRQ_TIMER2: LnIRQ = 29;
pub const LnIRQ_LN_IRQ_TIMER3: LnIRQ = 30;
pub const LnIRQ_LN_IRQ_I2C0_EV: LnIRQ = 31;
pub const LnIRQ_LN_IRQ_I2C0_ER: LnIRQ = 32;
pub const LnIRQ_LN_IRQ_I2C1_EV: LnIRQ = 33;
pub const LnIRQ_LN_IRQ_I2C1_ER: LnIRQ = 34;
pub const LnIRQ_LN_IRQ_SPI0: LnIRQ = 35;
pub const LnIRQ_LN_IRQ_SPI1: LnIRQ = 36;
pub const LnIRQ_LN_IRQ_USART0: LnIRQ = 37;
pub const LnIRQ_LN_IRQ_USART1: LnIRQ = 38;
pub const LnIRQ_LN_IRQ_USART2: LnIRQ = 39;
pub const LnIRQ_LN_IRQ_EXTI10_15: LnIRQ = 40;
pub const LnIRQ_LN_IRQ_RTCALARM: LnIRQ = 41;
pub const LnIRQ_LN_IRQ_USBWAKEUP: LnIRQ = 42;
pub const LnIRQ_LN_IRQ_TIMER7_BRK_TIMER12: LnIRQ = 43;
pub const LnIRQ_LN_IRQ_TIMER7_UP_TIMER13: LnIRQ = 44;
pub const LnIRQ_LN_IRQ_TIMER7_TRG_COM_TIMER14: LnIRQ = 45;
pub const LnIRQ_LN_IRQ_TIMER7_CC: LnIRQ = 46;
pub const LnIRQ_LN_IRQ_ADC2: LnIRQ = 47;
pub const LnIRQ_LN_IRQ_FSMC: LnIRQ = 48;
pub const LnIRQ_LN_IRQ_SDIO: LnIRQ = 49;
pub const LnIRQ_LN_IRQ_TIMER4: LnIRQ = 50;
pub const LnIRQ_LN_IRQ_SPI2: LnIRQ = 51;
pub const LnIRQ_LN_IRQ_UART3: LnIRQ = 52;
pub const LnIRQ_LN_IRQ_UART4: LnIRQ = 53;
pub const LnIRQ_LN_IRQ_TIMER5: LnIRQ = 54;
pub const LnIRQ_LN_IRQ_TIMER6: LnIRQ = 55;
pub const LnIRQ_LN_IRQ_DMA1_Channel0: LnIRQ = 56;
pub const LnIRQ_LN_IRQ_DMA1_Channel1: LnIRQ = 57;
pub const LnIRQ_LN_IRQ_DMA1_Channel2: LnIRQ = 58;
pub const LnIRQ_LN_IRQ_DMA1_Channel3: LnIRQ = 59;
pub const LnIRQ_LN_IRQ_DMA1_Channel4: LnIRQ = 60;
pub const LnIRQ_LN_IRQ_ARM_LAST: LnIRQ = 61;
pub type LnIRQ = cty::c_int;
pub type lnInterruptHandler = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_Z17lnEnableInterruptRK5LnIRQ"]
    pub fn lnEnableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z18lnDisableInterruptRK5LnIRQ"]
    pub fn lnDisableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnSetInterruptHandlerRK5LnIRQPFvvE"]
    pub fn lnSetInterruptHandler(irq: *const LnIRQ, handler: lnInterruptHandler);
}
extern "C" {
    #[link_name = "\u{1}_Z16lnIrqSetPriorityRK5LnIRQi"]
    pub fn lnIrqSetPriority(irq: *const LnIRQ, prio: cty::c_int);
}
extern "C" {
    #[doc = " Output a character to a custom device like UART, used by the printf() function"]
    #[doc = " This function is declared here only. You have to write your custom implementation somewhere"]
    #[doc = " \\param character Character to output"]
    pub fn _putchar(character: cty::c_char);
}
extern "C" {
    pub fn printf_(format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sprintf_(buffer: *mut cty::c_char, format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn snprintf_(
        buffer: *mut cty::c_char,
        count: size_t,
        format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn vsnprintf_(
        buffer: *mut cty::c_char,
        count: size_t,
        format: *const cty::c_char,
        va: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vprintf_(format: *const cty::c_char, va: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    #[doc = " printf with output function"]
    #[doc = " You may use this as dynamic alternative to printf() with its fixed _putchar() output"]
    #[doc = " \\param out An output function which takes one character and an argument pointer"]
    #[doc = " \\param arg An argument pointer for user data passed to output function"]
    #[doc = " \\param format A string that specifies the format of the output"]
    #[doc = " \\return The number of characters that are sent to the output function, not counting the terminating null character"]
    pub fn fctprintf(
        out: ::core::option::Option<
            unsafe extern "C" fn(character: cty::c_char, arg: *mut cty::c_void),
        >,
        arg: *mut cty::c_void,
        format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetUsv"]
    pub fn lnGetUs() -> u32;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnGetUs64v"]
    pub fn lnGetUs64() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnDelayUsi"]
    pub fn lnDelayUs(wait: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnDelayi"]
    pub fn lnDelay(wait: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetMsv"]
    pub fn lnGetMs() -> u32;
}
extern "C" {
    pub fn free(a: *mut cty::c_void);
}
extern "C" {
    pub fn malloc(size: size_t) -> *mut cty::c_void;
}
#[doc = " \\brief If you do a dma transfer"]
#[doc = ""]
#[doc = " call beginTransfer() from the task, that will lock the DMA for you"]
#[doc = " call doMemoryToPeripheralTransferFromInterrupt() from the task or the interrupt"]
#[doc = " call endTransfer() when you will not use the dma any longer until the next begin()"]
#[doc = " If you are starting a DMA from interrupt, you should do the begin() out of the interrupt and the end when that transfer is 100% done"]
#[doc = " If you are starting a DMA from a task you can do begin()/ doMemoryToPeripheral/end() as many times as you want, that will leave"]
#[doc = " the dma channel usable by another peripheral in between at the expense of more overhead"]
#[doc = ""]
#[doc = ""]
#[repr(C)]
#[derive(Debug)]
pub struct lnDMA {
    pub _dma: u32,
    pub _channelInt: cty::c_int,
    pub _dmaInt: cty::c_int,
    pub _type: lnDMA_DmaTransferType,
    pub _irq: LnIRQ,
    pub _cb: lnDMA_doneCallback,
    pub _cookie: *mut cty::c_void,
    pub _control: u32,
    pub _priority: u32,
    pub _sourceWidth: cty::c_int,
    pub _targetWidth: cty::c_int,
}
pub const lnDMA_DmaInterruptType_DMA_INTERRUPT_HALF: lnDMA_DmaInterruptType = 0;
pub const lnDMA_DmaInterruptType_DMA_INTERRUPT_FULL: lnDMA_DmaInterruptType = 1;
pub type lnDMA_DmaInterruptType = cty::c_uint;
pub type lnDMA_doneCallback = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut cty::c_void, arg2: lnDMA_DmaInterruptType),
>;
pub const lnDMA_DmaTransferType_DMA_MEMORY_TO_PERIPH: lnDMA_DmaTransferType = 0;
pub const lnDMA_DmaTransferType_DMA_PERIPH_TO_MEMORY: lnDMA_DmaTransferType = 1;
pub type lnDMA_DmaTransferType = cty::c_uint;
pub const lnDMA_DmaPriority_DMA_PRIORITY_LOW: lnDMA_DmaPriority = 0;
pub const lnDMA_DmaPriority_DMA_PRIORITY_NORMAL: lnDMA_DmaPriority = 1;
pub const lnDMA_DmaPriority_DMA_PRIORITY_HIGH: lnDMA_DmaPriority = 2;
pub const lnDMA_DmaPriority_DMA_PRIORITY_ULTRA_HIGH: lnDMA_DmaPriority = 3;
pub type lnDMA_DmaPriority = cty::c_uint;
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14attachCallbackEPFvPvNS_16DmaInterruptTypeEES0_"]
    pub fn lnDMA_attachCallback(this: *mut lnDMA, cb: lnDMA_doneCallback, cookie: *mut cty::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14detachCallbackEv"]
    pub fn lnDMA_detachCallback(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA34doMemoryToPeripheralTransferNoLockEiPKtS1_bbb"]
    pub fn lnDMA_doMemoryToPeripheralTransferNoLock(
        this: *mut lnDMA,
        count: cty::c_int,
        source: *const u16,
        target: *const u16,
        repeat: bool,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA34doPeripheralToMemoryTransferNoLockEiPKtS1_bb"]
    pub fn lnDMA_doPeripheralToMemoryTransferNoLock(
        this: *mut lnDMA,
        count: cty::c_int,
        target: *const u16,
        source: *const u16,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA16setInterruptMaskEbb"]
    pub fn lnDMA_setInterruptMask(this: *mut lnDMA, full: bool, half: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11setPriorityENS_11DmaPriorityE"]
    pub fn lnDMA_setPriority(this: *mut lnDMA, prio: lnDMA_DmaPriority);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA13beginTransferEv"]
    pub fn lnDMA_beginTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA15getCurrentCountEv"]
    pub fn lnDMA_getCurrentCount(this: *mut lnDMA) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11endTransferEv"]
    pub fn lnDMA_endTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14cancelTransferEv"]
    pub fn lnDMA_cancelTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11setWordSizeEii"]
    pub fn lnDMA_setWordSize(
        this: *mut lnDMA,
        sourceWordSize: cty::c_int,
        targetWordSize: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14invokeCallbackEv"]
    pub fn lnDMA_invokeCallback(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA5pauseEv"]
    pub fn lnDMA_pause(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA6resumeEv"]
    pub fn lnDMA_resume(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMAC1ENS_15DmaTransferTypeEiiii"]
    pub fn lnDMA_lnDMA(
        this: *mut lnDMA,
        type_: lnDMA_DmaTransferType,
        dmaEngine: cty::c_int,
        dmaChannel: cty::c_int,
        sourceWith: cty::c_int,
        targetWidth: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMAD1Ev"]
    pub fn lnDMA_lnDMA_destructor(this: *mut lnDMA);
}
impl lnDMA {
    #[inline]
    pub unsafe fn attachCallback(&mut self, cb: lnDMA_doneCallback, cookie: *mut cty::c_void) {
        lnDMA_attachCallback(self, cb, cookie)
    }
    #[inline]
    pub unsafe fn detachCallback(&mut self) {
        lnDMA_detachCallback(self)
    }
    #[inline]
    pub unsafe fn doMemoryToPeripheralTransferNoLock(
        &mut self,
        count: cty::c_int,
        source: *const u16,
        target: *const u16,
        repeat: bool,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool {
        lnDMA_doMemoryToPeripheralTransferNoLock(
            self,
            count,
            source,
            target,
            repeat,
            circularMode,
            bothInterrutps,
        )
    }
    #[inline]
    pub unsafe fn doPeripheralToMemoryTransferNoLock(
        &mut self,
        count: cty::c_int,
        target: *const u16,
        source: *const u16,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool {
        lnDMA_doPeripheralToMemoryTransferNoLock(
            self,
            count,
            target,
            source,
            circularMode,
            bothInterrutps,
        )
    }
    #[inline]
    pub unsafe fn setInterruptMask(&mut self, full: bool, half: bool) -> bool {
        lnDMA_setInterruptMask(self, full, half)
    }
    #[inline]
    pub unsafe fn setPriority(&mut self, prio: lnDMA_DmaPriority) {
        lnDMA_setPriority(self, prio)
    }
    #[inline]
    pub unsafe fn beginTransfer(&mut self) {
        lnDMA_beginTransfer(self)
    }
    #[inline]
    pub unsafe fn getCurrentCount(&mut self) -> u32 {
        lnDMA_getCurrentCount(self)
    }
    #[inline]
    pub unsafe fn endTransfer(&mut self) {
        lnDMA_endTransfer(self)
    }
    #[inline]
    pub unsafe fn cancelTransfer(&mut self) {
        lnDMA_cancelTransfer(self)
    }
    #[inline]
    pub unsafe fn setWordSize(&mut self, sourceWordSize: cty::c_int, targetWordSize: cty::c_int) {
        lnDMA_setWordSize(self, sourceWordSize, targetWordSize)
    }
    #[inline]
    pub unsafe fn invokeCallback(&mut self) {
        lnDMA_invokeCallback(self)
    }
    #[inline]
    pub unsafe fn pause(&mut self) {
        lnDMA_pause(self)
    }
    #[inline]
    pub unsafe fn resume(&mut self) {
        lnDMA_resume(self)
    }
    #[inline]
    pub unsafe fn new(
        type_: lnDMA_DmaTransferType,
        dmaEngine: cty::c_int,
        dmaChannel: cty::c_int,
        sourceWith: cty::c_int,
        targetWidth: cty::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDMA_lnDMA(
            __bindgen_tmp.as_mut_ptr(),
            type_,
            dmaEngine,
            dmaChannel,
            sourceWith,
            targetWidth,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        lnDMA_lnDMA_destructor(self)
    }
}
pub const lnADC_CYCLES_LN_ADC_SMPT_1_5: lnADC_CYCLES = 0;
pub const lnADC_CYCLES_LN_ADC_SMPT_7_5: lnADC_CYCLES = 1;
pub const lnADC_CYCLES_LN_ADC_SMPT_13_5: lnADC_CYCLES = 2;
pub const lnADC_CYCLES_LN_ADC_SMPT_28_5: lnADC_CYCLES = 3;
pub const lnADC_CYCLES_LN_ADC_SMPT_41_5: lnADC_CYCLES = 4;
pub const lnADC_CYCLES_LN_ADC_SMPT_55_5: lnADC_CYCLES = 5;
pub const lnADC_CYCLES_LN_ADC_SMPT_71_5: lnADC_CYCLES = 6;
pub const lnADC_CYCLES_LN_ADC_SMPT_239_5: lnADC_CYCLES = 7;
pub type lnADC_CYCLES = cty::c_uint;
#[repr(C)]
pub struct lnBaseAdc__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnBaseAdc {
    pub vtable_: *const lnBaseAdc__bindgen_vtable,
    pub _instance: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7getVrefEv"]
    pub fn lnBaseAdc_getVref(this: *mut lnBaseAdc) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc6getVccEv"]
    pub fn lnBaseAdc_getVcc() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7setSmptE12lnADC_CYCLES"]
    pub fn lnBaseAdc_setSmpt(this: *mut lnBaseAdc, cycles: lnADC_CYCLES);
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7readVccEv"]
    pub fn lnBaseAdc_readVcc(this: *mut lnBaseAdc);
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc10adcChannelEi"]
    pub fn lnBaseAdc_adcChannel(pin: lnPin) -> cty::c_int;
}
impl lnBaseAdc {
    #[inline]
    pub unsafe fn getVref(&mut self) -> cty::c_int {
        lnBaseAdc_getVref(self)
    }
    #[inline]
    pub unsafe fn getVcc() -> f32 {
        lnBaseAdc_getVcc()
    }
    #[inline]
    pub unsafe fn setSmpt(&mut self, cycles: lnADC_CYCLES) {
        lnBaseAdc_setSmpt(self, cycles)
    }
    #[inline]
    pub unsafe fn readVcc(&mut self) {
        lnBaseAdc_readVcc(self)
    }
    #[inline]
    pub unsafe fn adcChannel(pin: lnPin) -> cty::c_int {
        lnBaseAdc_adcChannel(pin)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc5setupEv"]
    pub fn lnBaseAdc_setup(this: *mut cty::c_void);
}
#[doc = " @param instance"]
#[repr(C)]
#[derive(Debug)]
pub struct lnSimpleADC {
    pub _base: lnBaseAdc,
    pub _pin: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC3pinEv"]
    pub fn lnSimpleADC_pin(this: *mut lnSimpleADC) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC6setPinEi"]
    pub fn lnSimpleADC_setPin(this: *mut lnSimpleADC, pin: lnPin) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC10simpleReadEv"]
    pub fn lnSimpleADC_simpleRead(this: *mut lnSimpleADC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC16pollingMultiReadEiPiPt"]
    pub fn lnSimpleADC_pollingMultiRead(
        this: *mut lnSimpleADC,
        nbPins: cty::c_int,
        pins: *mut lnPin,
        output: *mut u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC7getVrefEv"]
    pub fn lnSimpleADC_getVref(this: *mut lnSimpleADC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC6getVccEv"]
    pub fn lnSimpleADC_getVcc() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC7readVccEv"]
    pub fn lnSimpleADC_readVcc(this: *mut lnSimpleADC);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADCC1Eii"]
    pub fn lnSimpleADC_lnSimpleADC(this: *mut lnSimpleADC, instance: cty::c_int, pin: lnPin);
}
impl lnSimpleADC {
    #[inline]
    pub unsafe fn pin(&mut self) -> lnPin {
        lnSimpleADC_pin(self)
    }
    #[inline]
    pub unsafe fn setPin(&mut self, pin: lnPin) -> bool {
        lnSimpleADC_setPin(self, pin)
    }
    #[inline]
    pub unsafe fn simpleRead(&mut self) -> cty::c_int {
        lnSimpleADC_simpleRead(self)
    }
    #[inline]
    pub unsafe fn pollingMultiRead(
        &mut self,
        nbPins: cty::c_int,
        pins: *mut lnPin,
        output: *mut u16,
    ) -> bool {
        lnSimpleADC_pollingMultiRead(self, nbPins, pins, output)
    }
    #[inline]
    pub unsafe fn getVref(&mut self) -> cty::c_int {
        lnSimpleADC_getVref(self)
    }
    #[inline]
    pub unsafe fn getVcc() -> f32 {
        lnSimpleADC_getVcc()
    }
    #[inline]
    pub unsafe fn readVcc(&mut self) {
        lnSimpleADC_readVcc(self)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, pin: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnSimpleADC_lnSimpleADC(__bindgen_tmp.as_mut_ptr(), instance, pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADCD1Ev"]
    pub fn lnSimpleADC_lnSimpleADC_destructor(this: *mut lnSimpleADC);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC5setupEv"]
    pub fn lnSimpleADC_setup(this: *mut cty::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnTimingAdc {
    pub _base: lnBaseAdc,
    pub _timer: cty::c_int,
    pub _channel: cty::c_int,
    pub _fq: cty::c_int,
    pub _dma: lnDMA,
    pub _dmaSem: lnBinarySemaphore,
    pub _adcTimer: *mut lnAdcTimer,
    pub _nbPins: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc9setSourceEiiiiPKi"]
    pub fn lnTimingAdc_setSource(
        this: *mut lnTimingAdc,
        timer: cty::c_int,
        channel: cty::c_int,
        fq: cty::c_int,
        nbPins: cty::c_int,
        pins: *const lnPin,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc9multiReadEiPt"]
    pub fn lnTimingAdc_multiRead(
        this: *mut lnTimingAdc,
        nbSamplePerChannel: cty::c_int,
        output: *mut u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc8dmaDone_EPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnTimingAdc_dmaDone_(foo: *mut cty::c_void, typ: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc7dmaDoneEv"]
    pub fn lnTimingAdc_dmaDone(this: *mut lnTimingAdc);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdcC1Ei"]
    pub fn lnTimingAdc_lnTimingAdc(this: *mut lnTimingAdc, instance: cty::c_int);
}
impl lnTimingAdc {
    #[inline]
    pub unsafe fn setSource(
        &mut self,
        timer: cty::c_int,
        channel: cty::c_int,
        fq: cty::c_int,
        nbPins: cty::c_int,
        pins: *const lnPin,
    ) -> bool {
        lnTimingAdc_setSource(self, timer, channel, fq, nbPins, pins)
    }
    #[inline]
    pub unsafe fn multiRead(&mut self, nbSamplePerChannel: cty::c_int, output: *mut u16) -> bool {
        lnTimingAdc_multiRead(self, nbSamplePerChannel, output)
    }
    #[inline]
    pub unsafe fn dmaDone_(foo: *mut cty::c_void, typ: lnDMA_DmaInterruptType) {
        lnTimingAdc_dmaDone_(foo, typ)
    }
    #[inline]
    pub unsafe fn dmaDone(&mut self) {
        lnTimingAdc_dmaDone(self)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimingAdc_lnTimingAdc(__bindgen_tmp.as_mut_ptr(), instance);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdcD1Ev"]
    pub fn lnTimingAdc_lnTimingAdc_destructor(this: *mut lnTimingAdc);
}
pub type lnBasicTimerIrq = ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void)>;
#[repr(C)]
pub struct lnBasicTimer__bindgen_vtable(cty::c_void);
#[doc = " \\brief Careful all the channels of a given timer share the same frequency!"]
#[doc = " Max frequency is around 100 kHz in PWM mode !"]
#[doc = ""]
#[doc = ""]
#[doc = " In all mode , after setup the channel is disabled"]
#[doc = " You have to explicitely call timer->enable()"]
#[doc = ""]
#[doc = " @param timer"]
#[doc = " @param channel"]
#[repr(C)]
#[derive(Debug)]
pub struct lnBasicTimer {
    pub vtable_: *const lnBasicTimer__bindgen_vtable,
    pub _timer: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17setTimerFrequencyEi"]
    pub fn lnBasicTimer_setTimerFrequency(this: *mut lnBasicTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17setTimerFrequencyEii"]
    pub fn lnBasicTimer_setTimerFrequency1(
        this: *mut lnBasicTimer,
        prediv: cty::c_int,
        reload: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17getTimerFrequencyEv"]
    pub fn lnBasicTimer_getTimerFrequency(this: *mut lnBasicTimer) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer7disableEv"]
    pub fn lnBasicTimer_disable(this: *mut lnBasicTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer6enableEv"]
    pub fn lnBasicTimer_enable(this: *mut lnBasicTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimerC1Ei"]
    pub fn lnBasicTimer_lnBasicTimer(this: *mut lnBasicTimer, timer: cty::c_int);
}
impl lnBasicTimer {
    #[inline]
    pub unsafe fn setTimerFrequency(&mut self, fqInHz: cty::c_int) {
        lnBasicTimer_setTimerFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setTimerFrequency1(&mut self, prediv: cty::c_int, reload: cty::c_int) {
        lnBasicTimer_setTimerFrequency1(self, prediv, reload)
    }
    #[inline]
    pub unsafe fn getTimerFrequency(&mut self) -> cty::c_int {
        lnBasicTimer_getTimerFrequency(self)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnBasicTimer_disable(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnBasicTimer_enable(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBasicTimer_lnBasicTimer(__bindgen_tmp.as_mut_ptr(), timer);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimerD1Ev"]
    pub fn lnBasicTimer_lnBasicTimer_destructor(this: *mut lnBasicTimer);
}
#[doc = " @param timer"]
#[doc = " @return"]
#[repr(C)]
#[derive(Debug)]
pub struct lnBasicDelayTimer {
    pub _base: lnBasicTimer,
    pub _handler: lnBasicTimerIrq,
    pub _cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer3armEi"]
    pub fn lnBasicDelayTimer_arm(this: *mut lnBasicDelayTimer, delayUs: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer12setInterruptEPFvPvES0_"]
    pub fn lnBasicDelayTimer_setInterrupt(
        this: *mut lnBasicDelayTimer,
        handler: lnBasicTimerIrq,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer16interruptHandlerEi"]
    pub fn lnBasicDelayTimer_interruptHandler(timer: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer3irqEv"]
    pub fn lnBasicDelayTimer_irq(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer15enableInterruptEv"]
    pub fn lnBasicDelayTimer_enableInterrupt(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer16disableInterruptEv"]
    pub fn lnBasicDelayTimer_disableInterrupt(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimerC1Ei"]
    pub fn lnBasicDelayTimer_lnBasicDelayTimer(this: *mut lnBasicDelayTimer, timer: cty::c_int);
}
impl lnBasicDelayTimer {
    #[inline]
    pub unsafe fn arm(&mut self, delayUs: cty::c_int) {
        lnBasicDelayTimer_arm(self, delayUs)
    }
    #[inline]
    pub unsafe fn setInterrupt(&mut self, handler: lnBasicTimerIrq, cookie: *mut cty::c_void) {
        lnBasicDelayTimer_setInterrupt(self, handler, cookie)
    }
    #[inline]
    pub unsafe fn interruptHandler(timer: cty::c_int) {
        lnBasicDelayTimer_interruptHandler(timer)
    }
    #[inline]
    pub unsafe fn irq(&mut self) {
        lnBasicDelayTimer_irq(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self) {
        lnBasicDelayTimer_enableInterrupt(self)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnBasicDelayTimer_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBasicDelayTimer_lnBasicDelayTimer(__bindgen_tmp.as_mut_ptr(), timer);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimerD1Ev"]
    pub fn lnBasicDelayTimer_lnBasicDelayTimer_destructor(this: *mut lnBasicDelayTimer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnCpuID {
    pub _address: u8,
}
pub const lnCpuID_LN_VENDOR_LN_MCU_STM32: lnCpuID_LN_VENDOR = 0;
pub const lnCpuID_LN_VENDOR_LN_MCU_GD32: lnCpuID_LN_VENDOR = 1;
pub const lnCpuID_LN_VENDOR_LN_MCU_CH32: lnCpuID_LN_VENDOR = 2;
pub type lnCpuID_LN_VENDOR = cty::c_uint;
pub const lnCpuID_LN_MCU_LN_MCU_ARM_F3: lnCpuID_LN_MCU = 0;
pub const lnCpuID_LN_MCU_LN_MCU_ARM_F4: lnCpuID_LN_MCU = 1;
pub const lnCpuID_LN_MCU_LN_MCU_RISCV: lnCpuID_LN_MCU = 2;
pub type lnCpuID_LN_MCU = cty::c_uint;
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID8identifyEv"]
    pub fn lnCpuID_identify();
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID6vendorEv"]
    pub fn lnCpuID_vendor() -> lnCpuID_LN_VENDOR;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID3mcuEv"]
    pub fn lnCpuID_mcu() -> lnCpuID_LN_MCU;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID11mcuAsStringEv"]
    pub fn lnCpuID_mcuAsString() -> *const cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID9flashSizeEv"]
    pub fn lnCpuID_flashSize() -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID7ramSizeEv"]
    pub fn lnCpuID_ramSize() -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID10idAsStringEv"]
    pub fn lnCpuID_idAsString() -> *const cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID10clockSpeedEv"]
    pub fn lnCpuID_clockSpeed() -> cty::c_int;
}
impl lnCpuID {
    #[inline]
    pub unsafe fn identify() {
        lnCpuID_identify()
    }
    #[inline]
    pub unsafe fn vendor() -> lnCpuID_LN_VENDOR {
        lnCpuID_vendor()
    }
    #[inline]
    pub unsafe fn mcu() -> lnCpuID_LN_MCU {
        lnCpuID_mcu()
    }
    #[inline]
    pub unsafe fn mcuAsString() -> *const cty::c_char {
        lnCpuID_mcuAsString()
    }
    #[inline]
    pub unsafe fn flashSize() -> cty::c_int {
        lnCpuID_flashSize()
    }
    #[inline]
    pub unsafe fn ramSize() -> cty::c_int {
        lnCpuID_ramSize()
    }
    #[inline]
    pub unsafe fn idAsString() -> *const cty::c_char {
        lnCpuID_idAsString()
    }
    #[inline]
    pub unsafe fn clockSpeed() -> cty::c_int {
        lnCpuID_clockSpeed()
    }
}
#[repr(C)]
pub struct lnDAC__bindgen_vtable(cty::c_void);
#[doc = " @param instance"]
#[repr(C)]
#[derive(Debug)]
pub struct lnDAC {
    pub vtable_: *const lnDAC__bindgen_vtable,
    pub _instance: cty::c_int,
    pub _dma: lnDMA,
    pub _timer: *mut lnBasicTimer,
    pub _dmaSem: lnBinarySemaphore,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC3pinEv"]
    pub fn lnDAC_pin(this: *mut lnDAC) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC6enableEv"]
    pub fn lnDAC_enable(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC7disableEv"]
    pub fn lnDAC_disable(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC10simpleModeEv"]
    pub fn lnDAC_simpleMode(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8setValueEi"]
    pub fn lnDAC_setValue(this: *mut lnDAC, value: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC12startDmaModeEi"]
    pub fn lnDAC_startDmaMode(this: *mut lnDAC, fq: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC11stopDmaModeEv"]
    pub fn lnDAC_stopDmaMode(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC15getDmaFrequencyEv"]
    pub fn lnDAC_getDmaFrequency(this: *mut lnDAC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8dmaWriteEiPtb"]
    pub fn lnDAC_dmaWrite(this: *mut lnDAC, nbn: cty::c_int, data: *mut u16, loop_: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8dmaDone_EPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnDAC_dmaDone_(t: *mut cty::c_void, typ: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC7dmaDoneEv"]
    pub fn lnDAC_dmaDone(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC16dmaWriteInternalEiPtb"]
    pub fn lnDAC_dmaWriteInternal(this: *mut lnDAC, nb: cty::c_int, data: *mut u16, loop_: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDACC1Ei"]
    pub fn lnDAC_lnDAC(this: *mut lnDAC, instance: cty::c_int);
}
impl lnDAC {
    #[inline]
    pub unsafe fn pin(&mut self) -> lnPin {
        lnDAC_pin(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnDAC_enable(self)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnDAC_disable(self)
    }
    #[inline]
    pub unsafe fn simpleMode(&mut self) {
        lnDAC_simpleMode(self)
    }
    #[inline]
    pub unsafe fn setValue(&mut self, value: cty::c_int) {
        lnDAC_setValue(self, value)
    }
    #[inline]
    pub unsafe fn startDmaMode(&mut self, fq: cty::c_int) {
        lnDAC_startDmaMode(self, fq)
    }
    #[inline]
    pub unsafe fn stopDmaMode(&mut self) {
        lnDAC_stopDmaMode(self)
    }
    #[inline]
    pub unsafe fn getDmaFrequency(&mut self) -> cty::c_int {
        lnDAC_getDmaFrequency(self)
    }
    #[inline]
    pub unsafe fn dmaWrite(&mut self, nbn: cty::c_int, data: *mut u16, loop_: bool) {
        lnDAC_dmaWrite(self, nbn, data, loop_)
    }
    #[inline]
    pub unsafe fn dmaDone_(t: *mut cty::c_void, typ: lnDMA_DmaInterruptType) {
        lnDAC_dmaDone_(t, typ)
    }
    #[inline]
    pub unsafe fn dmaDone(&mut self) {
        lnDAC_dmaDone(self)
    }
    #[inline]
    pub unsafe fn dmaWriteInternal(&mut self, nb: cty::c_int, data: *mut u16, loop_: bool) {
        lnDAC_dmaWriteInternal(self, nb, data, loop_)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDAC_lnDAC(__bindgen_tmp.as_mut_ptr(), instance);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDACD1Ev"]
    pub fn lnDAC_lnDAC_destructor(this: *mut lnDAC);
}
#[doc = " @param startAddress"]
#[doc = " @param sizeInKBytes"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnFMC {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC5eraseEji"]
    pub fn lnFMC_erase(startAddress: u32, sizeInKBytes: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC5writeEjPKhi"]
    pub fn lnFMC_write(startAddress: u32, data: *const u8, sizeInBytes: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC8eraseStmEji"]
    pub fn lnFMC_eraseStm(startAddress: u32, sizeInKBytes: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC9eraseCh32Eji"]
    pub fn lnFMC_eraseCh32(startAddress: u32, sizeInKBytes: cty::c_int) -> bool;
}
impl lnFMC {
    #[inline]
    pub unsafe fn erase(startAddress: u32, sizeInKBytes: cty::c_int) -> bool {
        lnFMC_erase(startAddress, sizeInKBytes)
    }
    #[inline]
    pub unsafe fn write(startAddress: u32, data: *const u8, sizeInBytes: cty::c_int) -> bool {
        lnFMC_write(startAddress, data, sizeInBytes)
    }
    #[inline]
    pub unsafe fn eraseStm(startAddress: u32, sizeInKBytes: cty::c_int) -> bool {
        lnFMC_eraseStm(startAddress, sizeInKBytes)
    }
    #[inline]
    pub unsafe fn eraseCh32(startAddress: u32, sizeInKBytes: cty::c_int) -> bool {
        lnFMC_eraseCh32(startAddress, sizeInKBytes)
    }
}
#[repr(C)]
pub struct lnI2C__bindgen_vtable(cty::c_void);
#[doc = " @param instance"]
#[doc = " @param speed"]
#[repr(C)]
#[derive(Debug)]
pub struct lnI2C {
    pub vtable_: *const lnI2C__bindgen_vtable,
    pub cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C8setSpeedEi"]
    pub fn lnI2C_setSpeed(this: *mut lnI2C, speed: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C10setAddressEi"]
    pub fn lnI2C_setAddress(this: *mut lnI2C, address: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C5writeEiPh"]
    pub fn lnI2C_write(this: *mut lnI2C, n: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C4readEiPh"]
    pub fn lnI2C_read(this: *mut lnI2C, n: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C5writeEiiPh"]
    pub fn lnI2C_write1(this: *mut lnI2C, target: cty::c_int, n: cty::c_int, data: *mut u8)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C10multiWriteEiiPiPPh"]
    pub fn lnI2C_multiWrite(
        this: *mut lnI2C,
        target: cty::c_int,
        nbSeqn: cty::c_int,
        seqLength: *mut cty::c_int,
        data: *mut *mut u8,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C4readEiiPh"]
    pub fn lnI2C_read1(this: *mut lnI2C, target: cty::c_int, n: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C5beginEi"]
    pub fn lnI2C_begin(this: *mut lnI2C, target: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2CC1Eii"]
    pub fn lnI2C_lnI2C(this: *mut lnI2C, instance: cty::c_int, speed: cty::c_int);
}
impl lnI2C {
    #[inline]
    pub unsafe fn setSpeed(&mut self, speed: cty::c_int) {
        lnI2C_setSpeed(self, speed)
    }
    #[inline]
    pub unsafe fn setAddress(&mut self, address: cty::c_int) {
        lnI2C_setAddress(self, address)
    }
    #[inline]
    pub unsafe fn write(&mut self, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_write(self, n, data)
    }
    #[inline]
    pub unsafe fn read(&mut self, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_read(self, n, data)
    }
    #[inline]
    pub unsafe fn write1(&mut self, target: cty::c_int, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_write1(self, target, n, data)
    }
    #[inline]
    pub unsafe fn multiWrite(
        &mut self,
        target: cty::c_int,
        nbSeqn: cty::c_int,
        seqLength: *mut cty::c_int,
        data: *mut *mut u8,
    ) -> bool {
        lnI2C_multiWrite(self, target, nbSeqn, seqLength, data)
    }
    #[inline]
    pub unsafe fn read1(&mut self, target: cty::c_int, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_read1(self, target, n, data)
    }
    #[inline]
    pub unsafe fn begin(&mut self, target: cty::c_int) -> bool {
        lnI2C_begin(self, target)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, speed: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnI2C_lnI2C(__bindgen_tmp.as_mut_ptr(), instance, speed);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2CD1Ev"]
    pub fn lnI2C_lnI2C_destructor(this: *mut lnI2C);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnSerial {
    pub _instance: cty::c_int,
    pub _irq: LnIRQ,
    pub _adr: u32,
    pub _txMutex: lnMutex,
    pub _txDone: lnBinarySemaphore,
    pub _cur: *const u8,
    pub _tail: *const u8,
    pub _txState: lnSerial_txState,
    pub _txDma: lnDMA,
    pub _lastTransferSize: cty::c_int,
    pub _rxBufferSize: cty::c_int,
    pub _rxHead: cty::c_int,
    pub _rxTail: cty::c_int,
    pub _rxBuffer: *mut u8,
    pub _rxEnabled: bool,
    pub _rxError: cty::c_int,
    pub _cb: lnSerial_lnSerialCallback,
    pub _cbCookie: *mut cty::c_void,
}
pub const lnSerial_Event_dataAvailable: lnSerial_Event = 0;
pub type lnSerial_Event = cty::c_uint;
pub const lnSerial_txState_txTransmittingIdle: lnSerial_txState = 0;
pub const lnSerial_txState_txTransmittingInterrupt: lnSerial_txState = 1;
pub const lnSerial_txState_txTransmittingDMA: lnSerial_txState = 2;
pub const lnSerial_txState_txTransmittingLast: lnSerial_txState = 3;
pub type lnSerial_txState = cty::c_uint;
pub type lnSerial_lnSerialCallback =
    ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void, event: lnSerial_Event)>;
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial4initEv"]
    pub fn lnSerial_init(this: *mut lnSerial) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial8setSpeedEi"]
    pub fn lnSerial_setSpeed(this: *mut lnSerial, speed: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial8enableRxEb"]
    pub fn lnSerial_enableRx(this: *mut lnSerial, enabled: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial8transmitEiPKh"]
    pub fn lnSerial_transmit(this: *mut lnSerial, size: cty::c_int, buffer: *const u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial11dmaTransmitEiPKh"]
    pub fn lnSerial_dmaTransmit(this: *mut lnSerial, size: cty::c_int, buffer: *const u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial16disableInterruptEv"]
    pub fn lnSerial_disableInterrupt(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial15enableInterruptEb"]
    pub fn lnSerial_enableInterrupt(this: *mut lnSerial, txInterruptEnabled: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial7purgeRxEv"]
    pub fn lnSerial_purgeRx(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial10_interruptEv"]
    pub fn lnSerial__interrupt(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial4readEiPh"]
    pub fn lnSerial_read(this: *mut lnSerial, max: cty::c_int, to: *mut u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial14getReadPointerEPPh"]
    pub fn lnSerial_getReadPointer(this: *mut lnSerial, to: *mut *mut u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial7consumeEi"]
    pub fn lnSerial_consume(this: *mut lnSerial, n: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial10interruptsEi"]
    pub fn lnSerial_interrupts(instance: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial18txInterruptHandlerEv"]
    pub fn lnSerial_txInterruptHandler(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial18rxInterruptHandlerEv"]
    pub fn lnSerial_rxInterruptHandler(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial10_programTxEv"]
    pub fn lnSerial__programTx(this: *mut lnSerial) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial9_enableTxENS_7txStateE"]
    pub fn lnSerial__enableTx(this: *mut lnSerial, mode: lnSerial_txState) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial6moduloEi"]
    pub fn lnSerial_modulo(this: *mut lnSerial, in_: cty::c_int) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial7txDmaCbEv"]
    pub fn lnSerial_txDmaCb(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial12_dmaCallbackEPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnSerial__dmaCallback(c: *mut cty::c_void, it: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerialC1Eii"]
    pub fn lnSerial_lnSerial(this: *mut lnSerial, instance: cty::c_int, rxBufferSize: cty::c_int);
}
impl lnSerial {
    #[inline]
    pub unsafe fn init(&mut self) -> bool {
        lnSerial_init(self)
    }
    #[inline]
    pub unsafe fn setSpeed(&mut self, speed: cty::c_int) -> bool {
        lnSerial_setSpeed(self, speed)
    }
    #[inline]
    pub unsafe fn enableRx(&mut self, enabled: bool) -> bool {
        lnSerial_enableRx(self, enabled)
    }
    #[inline]
    pub unsafe fn transmit(&mut self, size: cty::c_int, buffer: *const u8) -> bool {
        lnSerial_transmit(self, size, buffer)
    }
    #[inline]
    pub unsafe fn dmaTransmit(&mut self, size: cty::c_int, buffer: *const u8) -> bool {
        lnSerial_dmaTransmit(self, size, buffer)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnSerial_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self, txInterruptEnabled: bool) {
        lnSerial_enableInterrupt(self, txInterruptEnabled)
    }
    #[inline]
    pub unsafe fn purgeRx(&mut self) {
        lnSerial_purgeRx(self)
    }
    #[inline]
    pub unsafe fn _interrupt(&mut self) {
        lnSerial__interrupt(self)
    }
    #[inline]
    pub unsafe fn read(&mut self, max: cty::c_int, to: *mut u8) -> cty::c_int {
        lnSerial_read(self, max, to)
    }
    #[inline]
    pub unsafe fn getReadPointer(&mut self, to: *mut *mut u8) -> cty::c_int {
        lnSerial_getReadPointer(self, to)
    }
    #[inline]
    pub unsafe fn consume(&mut self, n: cty::c_int) {
        lnSerial_consume(self, n)
    }
    #[inline]
    pub unsafe fn interrupts(instance: cty::c_int) {
        lnSerial_interrupts(instance)
    }
    #[inline]
    pub unsafe fn txInterruptHandler(&mut self) {
        lnSerial_txInterruptHandler(self)
    }
    #[inline]
    pub unsafe fn rxInterruptHandler(&mut self) {
        lnSerial_rxInterruptHandler(self)
    }
    #[inline]
    pub unsafe fn _programTx(&mut self) -> bool {
        lnSerial__programTx(self)
    }
    #[inline]
    pub unsafe fn _enableTx(&mut self, mode: lnSerial_txState) -> bool {
        lnSerial__enableTx(self, mode)
    }
    #[inline]
    pub unsafe fn modulo(&mut self, in_: cty::c_int) -> cty::c_int {
        lnSerial_modulo(self, in_)
    }
    #[inline]
    pub unsafe fn txDmaCb(&mut self) {
        lnSerial_txDmaCb(self)
    }
    #[inline]
    pub unsafe fn _dmaCallback(c: *mut cty::c_void, it: lnDMA_DmaInterruptType) {
        lnSerial__dmaCallback(c, it)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, rxBufferSize: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnSerial_lnSerial(__bindgen_tmp.as_mut_ptr(), instance, rxBufferSize);
        __bindgen_tmp.assume_init()
    }
}
pub const spiDataMode_SPI_MODE0: spiDataMode = 0;
pub const spiDataMode_SPI_MODE1: spiDataMode = 1;
pub const spiDataMode_SPI_MODE2: spiDataMode = 2;
pub const spiDataMode_SPI_MODE3: spiDataMode = 3;
pub type spiDataMode = cty::c_uint;
pub const spiBitOrder_SPI_LSBFIRST: spiBitOrder = 0;
pub const spiBitOrder_SPI_MSBFIRST: spiBitOrder = 1;
pub type spiBitOrder = cty::c_uint;
#[doc = " This is not really used"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnSPISettings {
    pub pinCS: cty::c_int,
    pub speed: u32,
    pub bOrder: spiBitOrder,
    pub dMode: spiDataMode,
}
pub type lnSpiCallback = ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void)>;
#[repr(C)]
pub struct hwlnSPIClass__bindgen_vtable(cty::c_void);
#[doc = " @param instance"]
#[doc = " @param pinCs"]
#[repr(C)]
#[derive(Debug)]
pub struct hwlnSPIClass {
    pub vtable_: *const hwlnSPIClass__bindgen_vtable,
    pub _internalSettings: lnSPISettings,
    pub _currentSetting: lnSPISettings,
    pub _settings: *mut lnSPISettings,
    pub _mutex: lnMutex,
    pub _done: lnBinarySemaphore,
    pub _useDMA: bool,
    pub _cookie: *mut cty::c_void,
    pub _callback: lnSpiCallback,
    pub _callbackCookie: *mut cty::c_void,
    pub _instance: cty::c_int,
    pub _adr: u32,
    pub _irq: LnIRQ,
    pub _inSession: bool,
    pub txDma: lnDMA,
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass5beginEv"]
    pub fn hwlnSPIClass_begin(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass3endEv"]
    pub fn hwlnSPIClass_end(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass16beginTransactionER13lnSPISettings"]
    pub fn hwlnSPIClass_beginTransaction(this: *mut hwlnSPIClass, settings: *mut lnSPISettings);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass14endTransactionEv"]
    pub fn hwlnSPIClass_endTransaction(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass12beginSessionEi"]
    pub fn hwlnSPIClass_beginSession(this: *mut hwlnSPIClass, bitSize: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass10endSessionEv"]
    pub fn hwlnSPIClass_endSession(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass11setBitOrderE11spiBitOrder"]
    pub fn hwlnSPIClass_setBitOrder(this: *mut hwlnSPIClass, order: spiBitOrder);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass11setDataModeE11spiDataMode"]
    pub fn hwlnSPIClass_setDataMode(this: *mut hwlnSPIClass, mode: spiDataMode);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass8setSpeedEi"]
    pub fn hwlnSPIClass_setSpeed(this: *mut hwlnSPIClass, speed: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass11setDataSizeEi"]
    pub fn hwlnSPIClass_setDataSize(this: *mut hwlnSPIClass, dataSize: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass15asyncDmaWrite16EiPKtPFvPvES2_b"]
    pub fn hwlnSPIClass_asyncDmaWrite16(
        this: *mut hwlnSPIClass,
        nbBytes: cty::c_int,
        data: *const u16,
        cb: lnSpiCallback,
        cookie: *mut cty::c_void,
        repeat: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass14nextDmaWrite16EiPKtPFvPvES2_b"]
    pub fn hwlnSPIClass_nextDmaWrite16(
        this: *mut hwlnSPIClass,
        nbBytes: cty::c_int,
        data: *const u16,
        cb: lnSpiCallback,
        cookie: *mut cty::c_void,
        repeat: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass14finishAsyncDmaEv"]
    pub fn hwlnSPIClass_finishAsyncDma(this: *mut hwlnSPIClass) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass19waitForAsyncDmaDoneEv"]
    pub fn hwlnSPIClass_waitForAsyncDmaDone(this: *mut hwlnSPIClass) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass5writeEi"]
    pub fn hwlnSPIClass_write(this: *mut hwlnSPIClass, z: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass7write16Ei"]
    pub fn hwlnSPIClass_write16(this: *mut hwlnSPIClass, z: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass13write16RepeatEit"]
    pub fn hwlnSPIClass_write16Repeat(
        this: *mut hwlnSPIClass,
        nb: cty::c_int,
        pattern: u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass5writeEiPKhb"]
    pub fn hwlnSPIClass_write1(
        this: *mut hwlnSPIClass,
        nbBytes: cty::c_int,
        data: *const u8,
        repeat: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass7write16EiPKtb"]
    pub fn hwlnSPIClass_write161(
        this: *mut hwlnSPIClass,
        nbWord: cty::c_int,
        data: *const u16,
        repeat: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass10dmaWrite16EiPKt"]
    pub fn hwlnSPIClass_dmaWrite16(
        this: *mut hwlnSPIClass,
        nbBytes: cty::c_int,
        data: *const u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass16dmaWrite16RepeatEit"]
    pub fn hwlnSPIClass_dmaWrite16Repeat(
        this: *mut hwlnSPIClass,
        nbBytes: cty::c_int,
        data: u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass8dmaWriteEiPKh"]
    pub fn hwlnSPIClass_dmaWrite(
        this: *mut hwlnSPIClass,
        nbBytes: cty::c_int,
        data: *const u8,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass8transferEiPhS0_"]
    pub fn hwlnSPIClass_transfer(
        this: *mut hwlnSPIClass,
        nbBytes: cty::c_int,
        dataOut: *mut u8,
        dataIn: *mut u8,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass17waitForCompletionEv"]
    pub fn hwlnSPIClass_waitForCompletion(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass9read1wireEiPh"]
    pub fn hwlnSPIClass_read1wire(this: *mut hwlnSPIClass, nbRead: cty::c_int, rd: *mut u8)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass18getPeripheralClockEv"]
    pub fn hwlnSPIClass_getPeripheralClock(this: *mut hwlnSPIClass) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK12hwlnSPIClass7misoPinEv"]
    pub fn hwlnSPIClass_misoPin(this: *const hwlnSPIClass) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZNK12hwlnSPIClass7mosiPinEv"]
    pub fn hwlnSPIClass_mosiPin(this: *const hwlnSPIClass) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZNK12hwlnSPIClass6clkPinEv"]
    pub fn hwlnSPIClass_clkPin(this: *const hwlnSPIClass) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass5setupEv"]
    pub fn hwlnSPIClass_setup(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass4csOnEv"]
    pub fn hwlnSPIClass_csOn(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass5csOffEv"]
    pub fn hwlnSPIClass_csOff(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass8exTxDoneEPvN5lnDMA16DmaInterruptTypeE"]
    pub fn hwlnSPIClass_exTxDone(c: *mut cty::c_void, it: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass13writeInternalEii"]
    pub fn hwlnSPIClass_writeInternal(
        this: *mut hwlnSPIClass,
        sz: cty::c_int,
        data: cty::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass14writesInternalEiiPKhb"]
    pub fn hwlnSPIClass_writesInternal(
        this: *mut hwlnSPIClass,
        sz: cty::c_int,
        nbBytes: cty::c_int,
        data: *const u8,
        repeat: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass16dmaWriteInternalEiiPKhb"]
    pub fn hwlnSPIClass_dmaWriteInternal(
        this: *mut hwlnSPIClass,
        wordSize: cty::c_int,
        nbBytes: cty::c_int,
        data: *const u8,
        repeat: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass6txDoneEv"]
    pub fn hwlnSPIClass_txDone(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClass14invokeCallbackEv"]
    pub fn hwlnSPIClass_invokeCallback(this: *mut hwlnSPIClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClassC1Eii"]
    pub fn hwlnSPIClass_hwlnSPIClass(
        this: *mut hwlnSPIClass,
        instance: cty::c_int,
        pinCs: cty::c_int,
    );
}
impl hwlnSPIClass {
    #[inline]
    pub unsafe fn begin(&mut self) {
        hwlnSPIClass_begin(self)
    }
    #[inline]
    pub unsafe fn end(&mut self) {
        hwlnSPIClass_end(self)
    }
    #[inline]
    pub unsafe fn beginTransaction(&mut self, settings: *mut lnSPISettings) {
        hwlnSPIClass_beginTransaction(self, settings)
    }
    #[inline]
    pub unsafe fn endTransaction(&mut self) {
        hwlnSPIClass_endTransaction(self)
    }
    #[inline]
    pub unsafe fn beginSession(&mut self, bitSize: cty::c_int) {
        hwlnSPIClass_beginSession(self, bitSize)
    }
    #[inline]
    pub unsafe fn endSession(&mut self) {
        hwlnSPIClass_endSession(self)
    }
    #[inline]
    pub unsafe fn setBitOrder(&mut self, order: spiBitOrder) {
        hwlnSPIClass_setBitOrder(self, order)
    }
    #[inline]
    pub unsafe fn setDataMode(&mut self, mode: spiDataMode) {
        hwlnSPIClass_setDataMode(self, mode)
    }
    #[inline]
    pub unsafe fn setSpeed(&mut self, speed: cty::c_int) {
        hwlnSPIClass_setSpeed(self, speed)
    }
    #[inline]
    pub unsafe fn setDataSize(&mut self, dataSize: cty::c_int) {
        hwlnSPIClass_setDataSize(self, dataSize)
    }
    #[inline]
    pub unsafe fn asyncDmaWrite16(
        &mut self,
        nbBytes: cty::c_int,
        data: *const u16,
        cb: lnSpiCallback,
        cookie: *mut cty::c_void,
        repeat: bool,
    ) -> bool {
        hwlnSPIClass_asyncDmaWrite16(self, nbBytes, data, cb, cookie, repeat)
    }
    #[inline]
    pub unsafe fn nextDmaWrite16(
        &mut self,
        nbBytes: cty::c_int,
        data: *const u16,
        cb: lnSpiCallback,
        cookie: *mut cty::c_void,
        repeat: bool,
    ) -> bool {
        hwlnSPIClass_nextDmaWrite16(self, nbBytes, data, cb, cookie, repeat)
    }
    #[inline]
    pub unsafe fn finishAsyncDma(&mut self) -> bool {
        hwlnSPIClass_finishAsyncDma(self)
    }
    #[inline]
    pub unsafe fn waitForAsyncDmaDone(&mut self) -> bool {
        hwlnSPIClass_waitForAsyncDmaDone(self)
    }
    #[inline]
    pub unsafe fn write(&mut self, z: cty::c_int) -> bool {
        hwlnSPIClass_write(self, z)
    }
    #[inline]
    pub unsafe fn write16(&mut self, z: cty::c_int) -> bool {
        hwlnSPIClass_write16(self, z)
    }
    #[inline]
    pub unsafe fn write16Repeat(&mut self, nb: cty::c_int, pattern: u16) -> bool {
        hwlnSPIClass_write16Repeat(self, nb, pattern)
    }
    #[inline]
    pub unsafe fn write1(&mut self, nbBytes: cty::c_int, data: *const u8, repeat: bool) -> bool {
        hwlnSPIClass_write1(self, nbBytes, data, repeat)
    }
    #[inline]
    pub unsafe fn write161(&mut self, nbWord: cty::c_int, data: *const u16, repeat: bool) -> bool {
        hwlnSPIClass_write161(self, nbWord, data, repeat)
    }
    #[inline]
    pub unsafe fn dmaWrite16(&mut self, nbBytes: cty::c_int, data: *const u16) -> bool {
        hwlnSPIClass_dmaWrite16(self, nbBytes, data)
    }
    #[inline]
    pub unsafe fn dmaWrite16Repeat(&mut self, nbBytes: cty::c_int, data: u16) -> bool {
        hwlnSPIClass_dmaWrite16Repeat(self, nbBytes, data)
    }
    #[inline]
    pub unsafe fn dmaWrite(&mut self, nbBytes: cty::c_int, data: *const u8) -> bool {
        hwlnSPIClass_dmaWrite(self, nbBytes, data)
    }
    #[inline]
    pub unsafe fn transfer(
        &mut self,
        nbBytes: cty::c_int,
        dataOut: *mut u8,
        dataIn: *mut u8,
    ) -> bool {
        hwlnSPIClass_transfer(self, nbBytes, dataOut, dataIn)
    }
    #[inline]
    pub unsafe fn waitForCompletion(&mut self) {
        hwlnSPIClass_waitForCompletion(self)
    }
    #[inline]
    pub unsafe fn read1wire(&mut self, nbRead: cty::c_int, rd: *mut u8) -> bool {
        hwlnSPIClass_read1wire(self, nbRead, rd)
    }
    #[inline]
    pub unsafe fn getPeripheralClock(&mut self) -> cty::c_int {
        hwlnSPIClass_getPeripheralClock(self)
    }
    #[inline]
    pub unsafe fn misoPin(&self) -> lnPin {
        hwlnSPIClass_misoPin(self)
    }
    #[inline]
    pub unsafe fn mosiPin(&self) -> lnPin {
        hwlnSPIClass_mosiPin(self)
    }
    #[inline]
    pub unsafe fn clkPin(&self) -> lnPin {
        hwlnSPIClass_clkPin(self)
    }
    #[inline]
    pub unsafe fn setup(&mut self) {
        hwlnSPIClass_setup(self)
    }
    #[inline]
    pub unsafe fn csOn(&mut self) {
        hwlnSPIClass_csOn(self)
    }
    #[inline]
    pub unsafe fn csOff(&mut self) {
        hwlnSPIClass_csOff(self)
    }
    #[inline]
    pub unsafe fn exTxDone(c: *mut cty::c_void, it: lnDMA_DmaInterruptType) {
        hwlnSPIClass_exTxDone(c, it)
    }
    #[inline]
    pub unsafe fn writeInternal(&mut self, sz: cty::c_int, data: cty::c_int) -> bool {
        hwlnSPIClass_writeInternal(self, sz, data)
    }
    #[inline]
    pub unsafe fn writesInternal(
        &mut self,
        sz: cty::c_int,
        nbBytes: cty::c_int,
        data: *const u8,
        repeat: bool,
    ) -> bool {
        hwlnSPIClass_writesInternal(self, sz, nbBytes, data, repeat)
    }
    #[inline]
    pub unsafe fn dmaWriteInternal(
        &mut self,
        wordSize: cty::c_int,
        nbBytes: cty::c_int,
        data: *const u8,
        repeat: bool,
    ) -> bool {
        hwlnSPIClass_dmaWriteInternal(self, wordSize, nbBytes, data, repeat)
    }
    #[inline]
    pub unsafe fn txDone(&mut self) {
        hwlnSPIClass_txDone(self)
    }
    #[inline]
    pub unsafe fn invokeCallback(&mut self) {
        hwlnSPIClass_invokeCallback(self)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, pinCs: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        hwlnSPIClass_hwlnSPIClass(__bindgen_tmp.as_mut_ptr(), instance, pinCs);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12hwlnSPIClassD1Ev"]
    pub fn hwlnSPIClass_hwlnSPIClass_destructor(this: *mut hwlnSPIClass);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnStopWatch {
    pub _start: u32,
    pub _end: u32,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatch7restartEi"]
    pub fn lnStopWatch_restart(this: *mut lnStopWatch, durationMs: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatch7elapsedEv"]
    pub fn lnStopWatch_elapsed(this: *mut lnStopWatch) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatchC1Ei"]
    pub fn lnStopWatch_lnStopWatch(this: *mut lnStopWatch, ms: cty::c_int);
}
impl lnStopWatch {
    #[inline]
    pub unsafe fn restart(&mut self, durationMs: cty::c_int) -> bool {
        lnStopWatch_restart(self, durationMs)
    }
    #[inline]
    pub unsafe fn elapsed(&mut self) -> bool {
        lnStopWatch_elapsed(self)
    }
    #[inline]
    pub unsafe fn new(ms: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnStopWatch_lnStopWatch(__bindgen_tmp.as_mut_ptr(), ms);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnCycleClock {
    pub _start: u32,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClock7restartEv"]
    pub fn lnCycleClock_restart(this: *mut lnCycleClock);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClock7elapsedEv"]
    pub fn lnCycleClock_elapsed(this: *mut lnCycleClock) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClockC1Ev"]
    pub fn lnCycleClock_lnCycleClock(this: *mut lnCycleClock);
}
impl lnCycleClock {
    #[inline]
    pub unsafe fn restart(&mut self) {
        lnCycleClock_restart(self)
    }
    #[inline]
    pub unsafe fn elapsed(&mut self) -> u32 {
        lnCycleClock_elapsed(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnCycleClock_lnCycleClock(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type lnTimerIrq = ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void)>;
pub const lnTimerMode_lnTimerModePwm0: lnTimerMode = 0;
pub const lnTimerMode_lnTimerModePwm1: lnTimerMode = 1;
pub type lnTimerMode = cty::c_uint;
#[repr(C)]
pub struct lnTimer__bindgen_vtable(cty::c_void);
#[doc = " \\brief Careful all the channels of a given timer share the same frequency!"]
#[doc = " Max frequency is around 100 kHz in PWM mode !"]
#[doc = ""]
#[doc = ""]
#[doc = " In all mode , after setup the channel is disabled"]
#[doc = " You have to explicitely call timer->enable()"]
#[doc = ""]
#[doc = " @param timer"]
#[doc = " @param channel"]
#[repr(C)]
#[derive(Debug)]
pub struct lnTimer {
    pub vtable_: *const lnTimer__bindgen_vtable,
    pub _timer: cty::c_int,
    pub _channel: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer10setPwmModeEi"]
    pub fn lnTimer_setPwmMode(this: *mut lnTimer, ratio100: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer15setPwmFrequencyEi"]
    pub fn lnTimer_setPwmFrequency(this: *mut lnTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer15setChannelRatioEi"]
    pub fn lnTimer_setChannelRatio(this: *mut lnTimer, ratio100: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer10singleShotEib"]
    pub fn lnTimer_singleShot(this: *mut lnTimer, durationMs: cty::c_int, down: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer13setForceStateEb"]
    pub fn lnTimer_setForceState(this: *mut lnTimer, forceHigh: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer7disableEv"]
    pub fn lnTimer_disable(this: *mut lnTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer6enableEv"]
    pub fn lnTimer_enable(this: *mut lnTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer16setTickFrequencyEi"]
    pub fn lnTimer_setTickFrequency(this: *mut lnTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer7setModeE11lnTimerMode"]
    pub fn lnTimer_setMode(this: *mut lnTimer, mode: lnTimerMode);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerC1Eii"]
    pub fn lnTimer_lnTimer(this: *mut lnTimer, timer: cty::c_int, channel: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerC1Ei"]
    pub fn lnTimer_lnTimer1(this: *mut lnTimer, pin: cty::c_int);
}
impl lnTimer {
    #[inline]
    pub unsafe fn setPwmMode(&mut self, ratio100: cty::c_int) {
        lnTimer_setPwmMode(self, ratio100)
    }
    #[inline]
    pub unsafe fn setPwmFrequency(&mut self, fqInHz: cty::c_int) {
        lnTimer_setPwmFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setChannelRatio(&mut self, ratio100: cty::c_int) {
        lnTimer_setChannelRatio(self, ratio100)
    }
    #[inline]
    pub unsafe fn singleShot(&mut self, durationMs: cty::c_int, down: bool) {
        lnTimer_singleShot(self, durationMs, down)
    }
    #[inline]
    pub unsafe fn setForceState(&mut self, forceHigh: bool) {
        lnTimer_setForceState(self, forceHigh)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnTimer_disable(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnTimer_enable(self)
    }
    #[inline]
    pub unsafe fn setTickFrequency(&mut self, fqInHz: cty::c_int) {
        lnTimer_setTickFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setMode(&mut self, mode: lnTimerMode) {
        lnTimer_setMode(self, mode)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int, channel: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimer_lnTimer(__bindgen_tmp.as_mut_ptr(), timer, channel);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(pin: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimer_lnTimer1(__bindgen_tmp.as_mut_ptr(), pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerD1Ev"]
    pub fn lnTimer_lnTimer_destructor(this: *mut lnTimer);
}
#[doc = " @param instance"]
#[repr(C)]
#[derive(Debug)]
pub struct lnAdcTimer {
    pub _base: lnTimer,
    pub _actualPwmFrequency: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnAdcTimer15setPwmFrequencyEi"]
    pub fn lnAdcTimer_setPwmFrequency(this: *mut lnAdcTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnAdcTimer15getPwmFrequencyEv"]
    pub fn lnAdcTimer_getPwmFrequency(this: *mut lnAdcTimer) -> cty::c_int;
}
impl lnAdcTimer {
    #[inline]
    pub unsafe fn setPwmFrequency(&mut self, fqInHz: cty::c_int) {
        lnAdcTimer_setPwmFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn getPwmFrequency(&mut self) -> cty::c_int {
        lnAdcTimer_getPwmFrequency(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct lnSquareSignal {
    pub _base: lnTimer,
}
extern "C" {
    #[link_name = "\u{1}_ZN14lnSquareSignal12setFrequencyEi"]
    pub fn lnSquareSignal_setFrequency(this: *mut lnSquareSignal, fqInHz: cty::c_int);
}
impl lnSquareSignal {
    #[inline]
    pub unsafe fn setFrequency(&mut self, fqInHz: cty::c_int) {
        lnSquareSignal_setFrequency(self, fqInHz)
    }
}
#[repr(C)]
pub struct lnDmaTimerCallback__bindgen_vtable(cty::c_void);
#[doc = " /!\\ Changing the frequency alters ALL channels"]
#[doc = " @param timer"]
#[doc = " @param channel"]
#[doc = " @return"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnDmaTimerCallback {
    pub vtable_: *const lnDmaTimerCallback__bindgen_vtable,
}
#[doc = " @param pin"]
#[repr(C)]
#[derive(Debug)]
pub struct lnDmaTimer {
    pub _base: lnTimer,
    pub _cb: *mut lnDmaTimerCallback,
    pub _rollover: cty::c_int,
    pub _dma: *mut lnDMA,
    pub _bits: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer8pwmSetupEi"]
    pub fn lnDmaTimer_pwmSetup(this: *mut lnDmaTimer, frequency: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer8rolloverEv"]
    pub fn lnDmaTimer_rollover(this: *mut lnDmaTimer) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer17attachDmaCallbackEP18lnDmaTimerCallback"]
    pub fn lnDmaTimer_attachDmaCallback(this: *mut lnDmaTimer, cb: *mut lnDmaTimerCallback)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer5startEiPh"]
    pub fn lnDmaTimer_start(this: *mut lnDmaTimer, nbSample: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer4stopEv"]
    pub fn lnDmaTimer_stop(this: *mut lnDmaTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer16setTickFrequencyEi"]
    pub fn lnDmaTimer_setTickFrequency(this: *mut lnDmaTimer, fq: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer12dmaInterruptEb"]
    pub fn lnDmaTimer_dmaInterrupt(this: *mut lnDmaTimer, h: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimerC1Eii"]
    pub fn lnDmaTimer_lnDmaTimer(this: *mut lnDmaTimer, bits: cty::c_int, pin: lnPin);
}
impl lnDmaTimer {
    #[inline]
    pub unsafe fn pwmSetup(&mut self, frequency: cty::c_int) -> bool {
        lnDmaTimer_pwmSetup(self, frequency)
    }
    #[inline]
    pub unsafe fn rollover(&mut self) -> cty::c_int {
        lnDmaTimer_rollover(self)
    }
    #[inline]
    pub unsafe fn attachDmaCallback(&mut self, cb: *mut lnDmaTimerCallback) -> bool {
        lnDmaTimer_attachDmaCallback(self, cb)
    }
    #[inline]
    pub unsafe fn start(&mut self, nbSample: cty::c_int, data: *mut u8) -> bool {
        lnDmaTimer_start(self, nbSample, data)
    }
    #[inline]
    pub unsafe fn stop(&mut self) {
        lnDmaTimer_stop(self)
    }
    #[inline]
    pub unsafe fn setTickFrequency(&mut self, fq: cty::c_int) -> bool {
        lnDmaTimer_setTickFrequency(self, fq)
    }
    #[inline]
    pub unsafe fn dmaInterrupt(&mut self, h: bool) {
        lnDmaTimer_dmaInterrupt(self, h)
    }
    #[inline]
    pub unsafe fn new(bits: cty::c_int, pin: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDmaTimer_lnDmaTimer(__bindgen_tmp.as_mut_ptr(), bits, pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimerD1Ev"]
    pub fn lnDmaTimer_lnDmaTimer_destructor(this: *mut lnDmaTimer);
}
#[doc = " \\brief careful : this will use the whole timer,  not just a channel"]
#[repr(C)]
#[derive(Debug)]
pub struct lnDelayTimer {
    pub _base: lnTimer,
    pub _handler: lnTimerIrq,
    pub _cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer3armEi"]
    pub fn lnDelayTimer_arm(this: *mut lnDelayTimer, delayUs: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer12setInterruptEPFvPvES0_"]
    pub fn lnDelayTimer_setInterrupt(
        this: *mut lnDelayTimer,
        handler: lnTimerIrq,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer16interruptHandlerEi"]
    pub fn lnDelayTimer_interruptHandler(timer: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer3irqEv"]
    pub fn lnDelayTimer_irq(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer15enableInterruptEv"]
    pub fn lnDelayTimer_enableInterrupt(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer16disableInterruptEv"]
    pub fn lnDelayTimer_disableInterrupt(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimerC1Eii"]
    pub fn lnDelayTimer_lnDelayTimer(
        this: *mut lnDelayTimer,
        timer: cty::c_int,
        channel: cty::c_int,
    );
}
impl lnDelayTimer {
    #[inline]
    pub unsafe fn arm(&mut self, delayUs: cty::c_int) {
        lnDelayTimer_arm(self, delayUs)
    }
    #[inline]
    pub unsafe fn setInterrupt(&mut self, handler: lnTimerIrq, cookie: *mut cty::c_void) {
        lnDelayTimer_setInterrupt(self, handler, cookie)
    }
    #[inline]
    pub unsafe fn interruptHandler(timer: cty::c_int) {
        lnDelayTimer_interruptHandler(timer)
    }
    #[inline]
    pub unsafe fn irq(&mut self) {
        lnDelayTimer_irq(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self) {
        lnDelayTimer_enableInterrupt(self)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnDelayTimer_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int, channel: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDelayTimer_lnDelayTimer(__bindgen_tmp.as_mut_ptr(), timer, channel);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimerD1Ev"]
    pub fn lnDelayTimer_lnDelayTimer_destructor(this: *mut lnDelayTimer);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: cty::c_uint,
    pub fp_offset: cty::c_uint,
    pub overflow_arg_area: *mut cty::c_void,
    pub reg_save_area: *mut cty::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
unsafe impl Send for lnFastEventGroup {}
unsafe impl Sync for lnFastEventGroup {}
