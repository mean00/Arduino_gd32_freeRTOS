#![no_std]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use core::panic::PanicInfo;

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    unsafe{
    deadEnd(-10);
    }
    loop {}
}
/* automatically generated by rust-bindgen 0.59.2 */

pub type __uint8_t = cty::c_uchar;
pub type __uint16_t = cty::c_ushort;
pub type __uint64_t = cty::c_ulonglong;
pub const GpioMode_lnFLOATING: GpioMode = 0;
pub const GpioMode_lnINPUT_FLOATING: GpioMode = 0;
pub const GpioMode_lnINPUT_PULLUP: GpioMode = 2;
pub const GpioMode_lnINPUT_PULLDOWN: GpioMode = 3;
pub const GpioMode_lnOUTPUT: GpioMode = 1;
pub const GpioMode_lnOUTPUT_OPEN_DRAIN: GpioMode = 4;
pub const GpioMode_lnALTERNATE_PP: GpioMode = 5;
pub const GpioMode_lnALTERNATE_OD: GpioMode = 6;
pub const GpioMode_lnPWM: GpioMode = 7;
pub const GpioMode_lnADC_MODE: GpioMode = 8;
pub const GpioMode_lnDAC_MODE: GpioMode = 9;
pub type GpioMode = cty::c_uint;
pub type lnPin = cty::c_int;
extern "C" {
    #[link_name = "\u{1}_Z9lnPinModei8GpioMode"]
    pub fn lnPinMode(pin: lnPin, mode: GpioMode);
}
extern "C" {
    #[link_name = "\u{1}_Z14lnDigitalWriteib"]
    pub fn lnDigitalWrite(pin: lnPin, value: bool);
}
extern "C" {
    #[link_name = "\u{1}_Z13lnDigitalReadi"]
    pub fn lnDigitalRead(pin: lnPin) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnDigitalTogglei"]
    pub fn lnDigitalToggle(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z23lnGetGpioToggleRegisteri"]
    pub fn lnGetGpioToggleRegister(port: cty::c_int) -> *mut cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z26lnGetGpioDirectionRegisteri"]
    pub fn lnGetGpioDirectionRegister(port: cty::c_int) -> *mut cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z22lnGetGpioValueRegisteri"]
    pub fn lnGetGpioValueRegister(port: cty::c_int) -> *mut cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z10lnReadPorti"]
    pub fn lnReadPort(port: cty::c_int) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnRemapTimerPini"]
    pub fn lnRemapTimerPin(timer: cty::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnFastIO {
    pub _onoff: *mut cty::c_ulong,
    pub _onbit: cty::c_ulong,
    pub _offbit: cty::c_ulong,
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnFastIOC1Ei"]
    pub fn lnFastIO_lnFastIO(this: *mut lnFastIO, p: lnPin);
}
impl lnFastIO {
    #[inline]
    pub unsafe fn new(p: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastIO_lnFastIO(__bindgen_tmp.as_mut_ptr(), p);
        __bindgen_tmp.assume_init()
    }
}
pub const lnEdge_LN_EDGE_NONE: lnEdge = 0;
pub const lnEdge_LN_EDGE_RISING: lnEdge = 1;
pub const lnEdge_LN_EDGE_FALLING: lnEdge = 2;
pub const lnEdge_LN_EDGE_BOTH: lnEdge = 3;
pub type lnEdge = cty::c_uint;
pub type lnExtiCallback =
    ::core::option::Option<unsafe extern "C" fn(pin: lnPin, cookie: *mut cty::c_void)>;
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiAttachInterrupti6lnEdgePFviPvES0_"]
    pub fn lnExtiAttachInterrupt(
        pin: lnPin,
        edge: lnEdge,
        cb: lnExtiCallback,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiDetachInterrupti"]
    pub fn lnExtiDetachInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiEnableInterrupti"]
    pub fn lnExtiEnableInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z22lnExtiDisableInterrupti"]
    pub fn lnExtiDisableInterrupt(pin: lnPin);
}
extern "C" {
    pub fn deadEnd(code: cty::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    _unused: [u8; 0],
}
pub type TaskHandle_t = *mut tskTaskControlBlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    _unused: [u8; 0],
}
pub type QueueHandle_t = *mut QueueDefinition;
pub type SemaphoreHandle_t = QueueHandle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventGroupDef_t {
    _unused: [u8; 0],
}
pub type EventGroupHandle_t = *mut EventGroupDef_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnBinarySemaphore {
    pub _handle: SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEv"]
    pub fn lnBinarySemaphore_take(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore7tryTakeEv"]
    pub fn lnBinarySemaphore_tryTake(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEi"]
    pub fn lnBinarySemaphore_take1(this: *mut lnBinarySemaphore, timeoutMs: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4giveEv"]
    pub fn lnBinarySemaphore_give(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphoreC1Ev"]
    pub fn lnBinarySemaphore_lnBinarySemaphore(this: *mut lnBinarySemaphore);
}
impl lnBinarySemaphore {
    #[inline]
    pub unsafe fn take(&mut self) -> bool {
        lnBinarySemaphore_take(self)
    }
    #[inline]
    pub unsafe fn tryTake(&mut self) -> bool {
        lnBinarySemaphore_tryTake(self)
    }
    #[inline]
    pub unsafe fn take1(&mut self, timeoutMs: cty::c_int) -> bool {
        lnBinarySemaphore_take1(self, timeoutMs)
    }
    #[inline]
    pub unsafe fn give(&mut self) -> bool {
        lnBinarySemaphore_give(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBinarySemaphore_lnBinarySemaphore(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct lnTask__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnTask {
    pub vtable_: *const lnTask__bindgen_vtable,
    pub _taskHandle: TaskHandle_t,
    pub _name: *const cty::c_char,
    pub _priority: cty::c_int,
    pub _taskSize: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTask5startEv"]
    pub fn lnTask_start(this: *mut lnTask);
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskC2EPKcii"]
    pub fn lnTask_lnTask(
        this: *mut lnTask,
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    );
}
impl lnTask {
    #[inline]
    pub unsafe fn start(&mut self) {
        lnTask_start(self)
    }
    #[inline]
    pub unsafe fn new(
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTask_lnTask(__bindgen_tmp.as_mut_ptr(), name, priority, taskSize);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskD1Ev"]
    pub fn lnTask_lnTask_destructor(this: *mut lnTask);
}
#[repr(C)]
pub struct lnEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnEventGroup {
    pub vtable_: *const lnEventGroup__bindgen_vtable,
    pub _handle: EventGroupHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup9setEventsEm"]
    pub fn lnEventGroup_setEvents(this: *mut lnEventGroup, events: cty::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10waitEventsEmi"]
    pub fn lnEventGroup_waitEvents(
        this: *mut lnEventGroup,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10readEventsEm"]
    pub fn lnEventGroup_readEvents(this: *mut lnEventGroup, maskInt: cty::c_ulong) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupC1Ev"]
    pub fn lnEventGroup_lnEventGroup(this: *mut lnEventGroup);
}
impl lnEventGroup {
    #[inline]
    pub unsafe fn setEvents(&mut self, events: cty::c_ulong) {
        lnEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(
        &mut self,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong {
        lnEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: cty::c_ulong) -> cty::c_ulong {
        lnEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnEventGroup_lnEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupD1Ev"]
    pub fn lnEventGroup_lnEventGroup_destructor(this: *mut lnEventGroup);
}
#[repr(C)]
pub struct lnFastEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnFastEventGroup {
    pub vtable_: *const lnFastEventGroup__bindgen_vtable,
    pub _value: cty::c_ulong,
    pub _mask: cty::c_ulong,
    pub _waitingTask: TaskHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup13takeOwnershipEv"]
    pub fn lnFastEventGroup_takeOwnership(this: *mut lnFastEventGroup);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup9setEventsEm"]
    pub fn lnFastEventGroup_setEvents(this: *mut lnFastEventGroup, events: cty::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10waitEventsEmi"]
    pub fn lnFastEventGroup_waitEvents(
        this: *mut lnFastEventGroup,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10readEventsEm"]
    pub fn lnFastEventGroup_readEvents(
        this: *mut lnFastEventGroup,
        maskInt: cty::c_ulong,
    ) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupC1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup(this: *mut lnFastEventGroup);
}
impl lnFastEventGroup {
    #[inline]
    pub unsafe fn takeOwnership(&mut self) {
        lnFastEventGroup_takeOwnership(self)
    }
    #[inline]
    pub unsafe fn setEvents(&mut self, events: cty::c_ulong) {
        lnFastEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(
        &mut self,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong {
        lnFastEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: cty::c_ulong) -> cty::c_ulong {
        lnFastEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastEventGroup_lnFastEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupD1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup_destructor(this: *mut lnFastEventGroup);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnMutex {
    pub _handle: SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex4lockEv"]
    pub fn lnMutex_lock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex6unlockEv"]
    pub fn lnMutex_unlock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutexC1Ev"]
    pub fn lnMutex_lnMutex(this: *mut lnMutex);
}
impl lnMutex {
    #[inline]
    pub unsafe fn lock(&mut self) -> bool {
        lnMutex_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) -> bool {
        lnMutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnMutex_lnMutex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_Z17lnInitSystemClockv"]
    pub fn lnInitSystemClock();
}
pub const Peripherals_pNONE: Peripherals = 0;
pub const Peripherals_pSPI0: Peripherals = 1;
pub const Peripherals_pSPI1: Peripherals = 2;
pub const Peripherals_pSPI2: Peripherals = 3;
pub const Peripherals_pUART0: Peripherals = 4;
pub const Peripherals_pUART1: Peripherals = 5;
pub const Peripherals_pUART2: Peripherals = 6;
pub const Peripherals_pUART3: Peripherals = 7;
pub const Peripherals_pUART4: Peripherals = 8;
pub const Peripherals_pI2C0: Peripherals = 9;
pub const Peripherals_pI2C1: Peripherals = 10;
pub const Peripherals_pCAN0: Peripherals = 11;
pub const Peripherals_pCAN1: Peripherals = 12;
pub const Peripherals_pDAC: Peripherals = 13;
pub const Peripherals_pPMU: Peripherals = 14;
pub const Peripherals_pBKPI: Peripherals = 15;
pub const Peripherals_pWWDGT: Peripherals = 16;
pub const Peripherals_pTIMER0: Peripherals = 17;
pub const Peripherals_pTIMER1: Peripherals = 18;
pub const Peripherals_pTIMER2: Peripherals = 19;
pub const Peripherals_pTIMER3: Peripherals = 20;
pub const Peripherals_pTIMER4: Peripherals = 21;
pub const Peripherals_pTIMER5: Peripherals = 22;
pub const Peripherals_pTIMER6: Peripherals = 23;
pub const Peripherals_pUSB: Peripherals = 24;
pub const Peripherals_pADC0: Peripherals = 25;
pub const Peripherals_pADC1: Peripherals = 26;
pub const Peripherals_pGPIOA: Peripherals = 27;
pub const Peripherals_pGPIOB: Peripherals = 28;
pub const Peripherals_pGPIOC: Peripherals = 29;
pub const Peripherals_pGPIOD: Peripherals = 30;
pub const Peripherals_pGPIOE: Peripherals = 31;
pub const Peripherals_pAF: Peripherals = 32;
pub const Peripherals_pDMA0: Peripherals = 33;
pub const Peripherals_pDMA1: Peripherals = 34;
pub const Peripherals_pAPB1: Peripherals = 100;
pub const Peripherals_pAPB2: Peripherals = 101;
pub const Peripherals_pSYSCLOCK: Peripherals = 102;
pub type Peripherals = cty::c_uint;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_2: lnADC_DIVIDER = 0;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_4: lnADC_DIVIDER = 1;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_6: lnADC_DIVIDER = 2;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_8: lnADC_DIVIDER = 3;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_12: lnADC_DIVIDER = 5;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_16: lnADC_DIVIDER = 7;
pub type lnADC_DIVIDER = cty::c_uint;
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals5resetE11Peripherals"]
    pub fn lnPeripherals_reset(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals6enableE11Peripherals"]
    pub fn lnPeripherals_enable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals7disableE11Peripherals"]
    pub fn lnPeripherals_disable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals8getClockE11Peripherals"]
    pub fn lnPeripherals_getClock(periph: Peripherals) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals13setAdcDividerE13lnADC_DIVIDER"]
    pub fn lnPeripherals_setAdcDivider(divider: lnADC_DIVIDER);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals14enableUsb48MhzEv"]
    pub fn lnPeripherals_enableUsb48Mhz();
}
pub const LnIRQ_LN_IRQ_MSIP: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_NONE: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_RESET: LnIRQ = -12;
pub const LnIRQ_LN_IRQ_NMI: LnIRQ = -11;
pub const LnIRQ_LN_IRQ_HARDFAULT: LnIRQ = -10;
pub const LnIRQ_LN_IRQ_MEMMANAGE: LnIRQ = -9;
pub const LnIRQ_LN_IRQ_BUSFAULT: LnIRQ = -8;
pub const LnIRQ_LN_IRQ_USAGEFAULT: LnIRQ = -7;
pub const LnIRQ_LN_IRQ_RESERVED: LnIRQ = -6;
pub const LnIRQ_LN_IRQ_SVCALL: LnIRQ = -5;
pub const LnIRQ_LN_IRQ_DEBUGMON: LnIRQ = -4;
pub const LnIRQ_LN_IRQ_RESERVED2: LnIRQ = -3;
pub const LnIRQ_LN_IRQ_PENDSV: LnIRQ = -2;
pub const LnIRQ_LN_IRQ_SYSTICK: LnIRQ = -1;
pub const LnIRQ_LN_IRQ_WWDG: LnIRQ = 0;
pub const LnIRQ_LN_IRQ_LVD: LnIRQ = 1;
pub const LnIRQ_LN_IRQ_TAMPER: LnIRQ = 2;
pub const LnIRQ_LN_IRQ_RTC: LnIRQ = 3;
pub const LnIRQ_LN_IRQ_FMC: LnIRQ = 4;
pub const LnIRQ_LN_IRQ_RCU_RCC: LnIRQ = 5;
pub const LnIRQ_LN_IRQ_EXTI0: LnIRQ = 6;
pub const LnIRQ_LN_IRQ_EXTI1: LnIRQ = 7;
pub const LnIRQ_LN_IRQ_EXTI2: LnIRQ = 8;
pub const LnIRQ_LN_IRQ_EXTI3: LnIRQ = 9;
pub const LnIRQ_LN_IRQ_EXTI4: LnIRQ = 10;
pub const LnIRQ_LN_IRQ_DMA0_Channel0: LnIRQ = 11;
pub const LnIRQ_LN_IRQ_DMA0_Channel1: LnIRQ = 12;
pub const LnIRQ_LN_IRQ_DMA0_Channel2: LnIRQ = 13;
pub const LnIRQ_LN_IRQ_DMA0_Channel3: LnIRQ = 14;
pub const LnIRQ_LN_IRQ_DMA0_Channel4: LnIRQ = 15;
pub const LnIRQ_LN_IRQ_DMA0_Channel5: LnIRQ = 16;
pub const LnIRQ_LN_IRQ_DMA0_Channel6: LnIRQ = 17;
pub const LnIRQ_LN_IRQ_ADC0_1: LnIRQ = 18;
pub const LnIRQ_LN_IRQ_USB_HP_CAN_TX: LnIRQ = 19;
pub const LnIRQ_LN_IRQ_USB_LP_CAN_RX0: LnIRQ = 20;
pub const LnIRQ_LN_IRQ_CAN_RX1: LnIRQ = 21;
pub const LnIRQ_LN_IRQ_CAN_SCE: LnIRQ = 22;
pub const LnIRQ_LN_IRQ_EXTI5_9: LnIRQ = 23;
pub const LnIRQ_LN_IRQ_TIMER0_BRK: LnIRQ = 24;
pub const LnIRQ_LN_IRQ_TIMER0_UP: LnIRQ = 25;
pub const LnIRQ_LN_IRQ_TIMER0_TRG_CMT: LnIRQ = 26;
pub const LnIRQ_LN_IRQ_TIMER0_Channel: LnIRQ = 27;
pub const LnIRQ_LN_IRQ_TIMER1: LnIRQ = 28;
pub const LnIRQ_LN_IRQ_TIMER2: LnIRQ = 29;
pub const LnIRQ_LN_IRQ_TIMER3: LnIRQ = 30;
pub const LnIRQ_LN_IRQ_I2C0_EV: LnIRQ = 31;
pub const LnIRQ_LN_IRQ_I2C0_ER: LnIRQ = 32;
pub const LnIRQ_LN_IRQ_I2C1_EV: LnIRQ = 33;
pub const LnIRQ_LN_IRQ_I2C1_ER: LnIRQ = 34;
pub const LnIRQ_LN_IRQ_SPI0: LnIRQ = 35;
pub const LnIRQ_LN_IRQ_SPI1: LnIRQ = 36;
pub const LnIRQ_LN_IRQ_USART0: LnIRQ = 37;
pub const LnIRQ_LN_IRQ_USART1: LnIRQ = 38;
pub const LnIRQ_LN_IRQ_USART2: LnIRQ = 39;
pub const LnIRQ_LN_IRQ_EXTI10_15: LnIRQ = 40;
pub const LnIRQ_LN_IRQ_RTCALARM: LnIRQ = 41;
pub const LnIRQ_LN_IRQ_USBWAKEUP: LnIRQ = 42;
pub const LnIRQ_LN_IRQ_TIMER7_BRK_TIMER12: LnIRQ = 43;
pub const LnIRQ_LN_IRQ_TIMER7_UP_TIMER13: LnIRQ = 44;
pub const LnIRQ_LN_IRQ_TIMER7_TRG_COM_TIMER14: LnIRQ = 45;
pub const LnIRQ_LN_IRQ_TIMER7_CC: LnIRQ = 46;
pub const LnIRQ_LN_IRQ_ADC2: LnIRQ = 47;
pub const LnIRQ_LN_IRQ_FSMC: LnIRQ = 48;
pub const LnIRQ_LN_IRQ_SDIO: LnIRQ = 49;
pub const LnIRQ_LN_IRQ_TIMER4: LnIRQ = 50;
pub const LnIRQ_LN_IRQ_SPI2: LnIRQ = 51;
pub const LnIRQ_LN_IRQ_UART3: LnIRQ = 52;
pub const LnIRQ_LN_IRQ_UART4: LnIRQ = 53;
pub const LnIRQ_LN_IRQ_TIMER5: LnIRQ = 54;
pub const LnIRQ_LN_IRQ_TIMER6: LnIRQ = 55;
pub const LnIRQ_LN_IRQ_DMA1_Channel0: LnIRQ = 56;
pub const LnIRQ_LN_IRQ_DMA1_Channel1: LnIRQ = 57;
pub const LnIRQ_LN_IRQ_DMA1_Channel2: LnIRQ = 58;
pub const LnIRQ_LN_IRQ_DMA1_Channel3: LnIRQ = 59;
pub const LnIRQ_LN_IRQ_DMA1_Channel4: LnIRQ = 60;
pub const LnIRQ_LN_IRQ_ARM_LAST: LnIRQ = 61;
pub type LnIRQ = cty::c_int;
pub type lnInterruptHandler = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_Z17lnEnableInterruptRK5LnIRQ"]
    pub fn lnEnableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z18lnDisableInterruptRK5LnIRQ"]
    pub fn lnDisableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnSetInterruptHandlerRK5LnIRQPFvvE"]
    pub fn lnSetInterruptHandler(irq: *const LnIRQ, handler: lnInterruptHandler);
}
extern "C" {
    #[link_name = "\u{1}_Z16lnIrqSetPriorityRK5LnIRQi"]
    pub fn lnIrqSetPriority(irq: *const LnIRQ, prio: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetUsv"]
    pub fn lnGetUs() -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnGetUs64v"]
    pub fn lnGetUs64() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnDelayUsi"]
    pub fn lnDelayUs(wait: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnDelayi"]
    pub fn lnDelay(wait: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetMsv"]
    pub fn lnGetMs() -> cty::c_ulong;
}
#[repr(C)]
#[derive(Debug)]
pub struct lnDMA {
    pub _dma: cty::c_ulong,
    pub _channelInt: cty::c_int,
    pub _dmaInt: cty::c_int,
    pub _type: lnDMA_DmaTransferType,
    pub _irq: LnIRQ,
    pub _cb: lnDMA_doneCallback,
    pub _cookie: *mut cty::c_void,
    pub _control: cty::c_ulong,
    pub _priority: cty::c_ulong,
    pub _sourceWidth: cty::c_int,
    pub _targetWidth: cty::c_int,
}
pub const lnDMA_DmaInterruptType_DMA_INTERRUPT_HALF: lnDMA_DmaInterruptType = 0;
pub const lnDMA_DmaInterruptType_DMA_INTERRUPT_FULL: lnDMA_DmaInterruptType = 1;
pub type lnDMA_DmaInterruptType = cty::c_uint;
pub type lnDMA_doneCallback = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut cty::c_void, arg2: lnDMA_DmaInterruptType),
>;
pub const lnDMA_DmaTransferType_DMA_MEMORY_TO_PERIPH: lnDMA_DmaTransferType = 0;
pub const lnDMA_DmaTransferType_DMA_PERIPH_TO_MEMORY: lnDMA_DmaTransferType = 1;
pub type lnDMA_DmaTransferType = cty::c_uint;
pub const lnDMA_DmaPriority_DMA_PRIORITY_LOW: lnDMA_DmaPriority = 0;
pub const lnDMA_DmaPriority_DMA_PRIORITY_NORMAL: lnDMA_DmaPriority = 1;
pub const lnDMA_DmaPriority_DMA_PRIORITY_HIGH: lnDMA_DmaPriority = 2;
pub const lnDMA_DmaPriority_DMA_PRIORITY_ULTRA_HIGH: lnDMA_DmaPriority = 3;
pub type lnDMA_DmaPriority = cty::c_uint;
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14attachCallbackEPFvPvNS_16DmaInterruptTypeEES0_"]
    pub fn lnDMA_attachCallback(this: *mut lnDMA, cb: lnDMA_doneCallback, cookie: *mut cty::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14detachCallbackEv"]
    pub fn lnDMA_detachCallback(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA34doMemoryToPeripheralTransferNoLockEiPKtS1_bbb"]
    pub fn lnDMA_doMemoryToPeripheralTransferNoLock(
        this: *mut lnDMA,
        count: cty::c_int,
        source: *const u16,
        target: *const u16,
        repeat: bool,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA34doPeripheralToMemoryTransferNoLockEiPKtS1_bb"]
    pub fn lnDMA_doPeripheralToMemoryTransferNoLock(
        this: *mut lnDMA,
        count: cty::c_int,
        target: *const u16,
        source: *const u16,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA16setInterruptMaskEbb"]
    pub fn lnDMA_setInterruptMask(this: *mut lnDMA, full: bool, half: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11setPriorityENS_11DmaPriorityE"]
    pub fn lnDMA_setPriority(this: *mut lnDMA, prio: lnDMA_DmaPriority);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA13beginTransferEv"]
    pub fn lnDMA_beginTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA15getCurrentCountEv"]
    pub fn lnDMA_getCurrentCount(this: *mut lnDMA) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11endTransferEv"]
    pub fn lnDMA_endTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14cancelTransferEv"]
    pub fn lnDMA_cancelTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11setWordSizeEii"]
    pub fn lnDMA_setWordSize(
        this: *mut lnDMA,
        sourceWordSize: cty::c_int,
        targetWordSize: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14invokeCallbackEv"]
    pub fn lnDMA_invokeCallback(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA5pauseEv"]
    pub fn lnDMA_pause(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA6resumeEv"]
    pub fn lnDMA_resume(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMAC1ENS_15DmaTransferTypeEiiii"]
    pub fn lnDMA_lnDMA(
        this: *mut lnDMA,
        type_: lnDMA_DmaTransferType,
        dmaEngine: cty::c_int,
        dmaChannel: cty::c_int,
        sourceWith: cty::c_int,
        targetWidth: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMAD1Ev"]
    pub fn lnDMA_lnDMA_destructor(this: *mut lnDMA);
}
impl lnDMA {
    #[inline]
    pub unsafe fn attachCallback(&mut self, cb: lnDMA_doneCallback, cookie: *mut cty::c_void) {
        lnDMA_attachCallback(self, cb, cookie)
    }
    #[inline]
    pub unsafe fn detachCallback(&mut self) {
        lnDMA_detachCallback(self)
    }
    #[inline]
    pub unsafe fn doMemoryToPeripheralTransferNoLock(
        &mut self,
        count: cty::c_int,
        source: *const u16,
        target: *const u16,
        repeat: bool,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool {
        lnDMA_doMemoryToPeripheralTransferNoLock(
            self,
            count,
            source,
            target,
            repeat,
            circularMode,
            bothInterrutps,
        )
    }
    #[inline]
    pub unsafe fn doPeripheralToMemoryTransferNoLock(
        &mut self,
        count: cty::c_int,
        target: *const u16,
        source: *const u16,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool {
        lnDMA_doPeripheralToMemoryTransferNoLock(
            self,
            count,
            target,
            source,
            circularMode,
            bothInterrutps,
        )
    }
    #[inline]
    pub unsafe fn setInterruptMask(&mut self, full: bool, half: bool) -> bool {
        lnDMA_setInterruptMask(self, full, half)
    }
    #[inline]
    pub unsafe fn setPriority(&mut self, prio: lnDMA_DmaPriority) {
        lnDMA_setPriority(self, prio)
    }
    #[inline]
    pub unsafe fn beginTransfer(&mut self) {
        lnDMA_beginTransfer(self)
    }
    #[inline]
    pub unsafe fn getCurrentCount(&mut self) -> cty::c_ulong {
        lnDMA_getCurrentCount(self)
    }
    #[inline]
    pub unsafe fn endTransfer(&mut self) {
        lnDMA_endTransfer(self)
    }
    #[inline]
    pub unsafe fn cancelTransfer(&mut self) {
        lnDMA_cancelTransfer(self)
    }
    #[inline]
    pub unsafe fn setWordSize(&mut self, sourceWordSize: cty::c_int, targetWordSize: cty::c_int) {
        lnDMA_setWordSize(self, sourceWordSize, targetWordSize)
    }
    #[inline]
    pub unsafe fn invokeCallback(&mut self) {
        lnDMA_invokeCallback(self)
    }
    #[inline]
    pub unsafe fn pause(&mut self) {
        lnDMA_pause(self)
    }
    #[inline]
    pub unsafe fn resume(&mut self) {
        lnDMA_resume(self)
    }
    #[inline]
    pub unsafe fn new(
        type_: lnDMA_DmaTransferType,
        dmaEngine: cty::c_int,
        dmaChannel: cty::c_int,
        sourceWith: cty::c_int,
        targetWidth: cty::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDMA_lnDMA(
            __bindgen_tmp.as_mut_ptr(),
            type_,
            dmaEngine,
            dmaChannel,
            sourceWith,
            targetWidth,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        lnDMA_lnDMA_destructor(self)
    }
}
pub const lnADC_CYCLES_LN_ADC_SMPT_1_5: lnADC_CYCLES = 0;
pub const lnADC_CYCLES_LN_ADC_SMPT_7_5: lnADC_CYCLES = 1;
pub const lnADC_CYCLES_LN_ADC_SMPT_13_5: lnADC_CYCLES = 2;
pub const lnADC_CYCLES_LN_ADC_SMPT_28_5: lnADC_CYCLES = 3;
pub const lnADC_CYCLES_LN_ADC_SMPT_41_5: lnADC_CYCLES = 4;
pub const lnADC_CYCLES_LN_ADC_SMPT_55_5: lnADC_CYCLES = 5;
pub const lnADC_CYCLES_LN_ADC_SMPT_71_5: lnADC_CYCLES = 6;
pub const lnADC_CYCLES_LN_ADC_SMPT_239_5: lnADC_CYCLES = 7;
pub type lnADC_CYCLES = cty::c_uint;
#[repr(C)]
pub struct lnBaseAdc__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnBaseAdc {
    pub vtable_: *const lnBaseAdc__bindgen_vtable,
    pub _instance: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7getVrefEv"]
    pub fn lnBaseAdc_getVref(this: *mut lnBaseAdc) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc6getVccEv"]
    pub fn lnBaseAdc_getVcc() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7setSmptE12lnADC_CYCLES"]
    pub fn lnBaseAdc_setSmpt(this: *mut lnBaseAdc, cycles: lnADC_CYCLES);
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7readVccEv"]
    pub fn lnBaseAdc_readVcc(this: *mut lnBaseAdc);
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc10adcChannelEi"]
    pub fn lnBaseAdc_adcChannel(pin: lnPin) -> cty::c_int;
}
impl lnBaseAdc {
    #[inline]
    pub unsafe fn getVref(&mut self) -> cty::c_int {
        lnBaseAdc_getVref(self)
    }
    #[inline]
    pub unsafe fn getVcc() -> f32 {
        lnBaseAdc_getVcc()
    }
    #[inline]
    pub unsafe fn setSmpt(&mut self, cycles: lnADC_CYCLES) {
        lnBaseAdc_setSmpt(self, cycles)
    }
    #[inline]
    pub unsafe fn readVcc(&mut self) {
        lnBaseAdc_readVcc(self)
    }
    #[inline]
    pub unsafe fn adcChannel(pin: lnPin) -> cty::c_int {
        lnBaseAdc_adcChannel(pin)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc5setupEv"]
    pub fn lnBaseAdc_setup(this: *mut cty::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnSimpleADC {
    pub _base: lnBaseAdc,
    pub _pin: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC3pinEv"]
    pub fn lnSimpleADC_pin(this: *mut lnSimpleADC) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC6setPinEi"]
    pub fn lnSimpleADC_setPin(this: *mut lnSimpleADC, pin: lnPin) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC10simpleReadEv"]
    pub fn lnSimpleADC_simpleRead(this: *mut lnSimpleADC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC16pollingMultiReadEiPiPt"]
    pub fn lnSimpleADC_pollingMultiRead(
        this: *mut lnSimpleADC,
        nbPins: cty::c_int,
        pins: *mut lnPin,
        output: *mut u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC7getVrefEv"]
    pub fn lnSimpleADC_getVref(this: *mut lnSimpleADC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC6getVccEv"]
    pub fn lnSimpleADC_getVcc() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC7readVccEv"]
    pub fn lnSimpleADC_readVcc(this: *mut lnSimpleADC);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADCC1Eii"]
    pub fn lnSimpleADC_lnSimpleADC(this: *mut lnSimpleADC, instance: cty::c_int, pin: lnPin);
}
impl lnSimpleADC {
    #[inline]
    pub unsafe fn pin(&mut self) -> lnPin {
        lnSimpleADC_pin(self)
    }
    #[inline]
    pub unsafe fn setPin(&mut self, pin: lnPin) -> bool {
        lnSimpleADC_setPin(self, pin)
    }
    #[inline]
    pub unsafe fn simpleRead(&mut self) -> cty::c_int {
        lnSimpleADC_simpleRead(self)
    }
    #[inline]
    pub unsafe fn pollingMultiRead(
        &mut self,
        nbPins: cty::c_int,
        pins: *mut lnPin,
        output: *mut u16,
    ) -> bool {
        lnSimpleADC_pollingMultiRead(self, nbPins, pins, output)
    }
    #[inline]
    pub unsafe fn getVref(&mut self) -> cty::c_int {
        lnSimpleADC_getVref(self)
    }
    #[inline]
    pub unsafe fn getVcc() -> f32 {
        lnSimpleADC_getVcc()
    }
    #[inline]
    pub unsafe fn readVcc(&mut self) {
        lnSimpleADC_readVcc(self)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, pin: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnSimpleADC_lnSimpleADC(__bindgen_tmp.as_mut_ptr(), instance, pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADCD1Ev"]
    pub fn lnSimpleADC_lnSimpleADC_destructor(this: *mut lnSimpleADC);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC5setupEv"]
    pub fn lnSimpleADC_setup(this: *mut cty::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnTimingAdc {
    pub _base: lnBaseAdc,
    pub _timer: cty::c_int,
    pub _channel: cty::c_int,
    pub _fq: cty::c_int,
    pub _dma: lnDMA,
    pub _dmaSem: lnBinarySemaphore,
    pub _adcTimer: *mut lnAdcTimer,
    pub _nbPins: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc9setSourceEiiiiPKi"]
    pub fn lnTimingAdc_setSource(
        this: *mut lnTimingAdc,
        timer: cty::c_int,
        channel: cty::c_int,
        fq: cty::c_int,
        nbPins: cty::c_int,
        pins: *const lnPin,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc9multiReadEiPt"]
    pub fn lnTimingAdc_multiRead(
        this: *mut lnTimingAdc,
        nbSamplePerChannel: cty::c_int,
        output: *mut u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc8dmaDone_EPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnTimingAdc_dmaDone_(foo: *mut cty::c_void, typ: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc7dmaDoneEv"]
    pub fn lnTimingAdc_dmaDone(this: *mut lnTimingAdc);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdcC1Ei"]
    pub fn lnTimingAdc_lnTimingAdc(this: *mut lnTimingAdc, instance: cty::c_int);
}
impl lnTimingAdc {
    #[inline]
    pub unsafe fn setSource(
        &mut self,
        timer: cty::c_int,
        channel: cty::c_int,
        fq: cty::c_int,
        nbPins: cty::c_int,
        pins: *const lnPin,
    ) -> bool {
        lnTimingAdc_setSource(self, timer, channel, fq, nbPins, pins)
    }
    #[inline]
    pub unsafe fn multiRead(&mut self, nbSamplePerChannel: cty::c_int, output: *mut u16) -> bool {
        lnTimingAdc_multiRead(self, nbSamplePerChannel, output)
    }
    #[inline]
    pub unsafe fn dmaDone_(foo: *mut cty::c_void, typ: lnDMA_DmaInterruptType) {
        lnTimingAdc_dmaDone_(foo, typ)
    }
    #[inline]
    pub unsafe fn dmaDone(&mut self) {
        lnTimingAdc_dmaDone(self)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimingAdc_lnTimingAdc(__bindgen_tmp.as_mut_ptr(), instance);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdcD1Ev"]
    pub fn lnTimingAdc_lnTimingAdc_destructor(this: *mut lnTimingAdc);
}
pub type lnBasicTimerIrq = ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void)>;
#[repr(C)]
pub struct lnBasicTimer__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnBasicTimer {
    pub vtable_: *const lnBasicTimer__bindgen_vtable,
    pub _timer: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17setTimerFrequencyEi"]
    pub fn lnBasicTimer_setTimerFrequency(this: *mut lnBasicTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17setTimerFrequencyEii"]
    pub fn lnBasicTimer_setTimerFrequency1(
        this: *mut lnBasicTimer,
        prediv: cty::c_int,
        reload: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17getTimerFrequencyEv"]
    pub fn lnBasicTimer_getTimerFrequency(this: *mut lnBasicTimer) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer7disableEv"]
    pub fn lnBasicTimer_disable(this: *mut lnBasicTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer6enableEv"]
    pub fn lnBasicTimer_enable(this: *mut lnBasicTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimerC1Ei"]
    pub fn lnBasicTimer_lnBasicTimer(this: *mut lnBasicTimer, timer: cty::c_int);
}
impl lnBasicTimer {
    #[inline]
    pub unsafe fn setTimerFrequency(&mut self, fqInHz: cty::c_int) {
        lnBasicTimer_setTimerFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setTimerFrequency1(&mut self, prediv: cty::c_int, reload: cty::c_int) {
        lnBasicTimer_setTimerFrequency1(self, prediv, reload)
    }
    #[inline]
    pub unsafe fn getTimerFrequency(&mut self) -> cty::c_int {
        lnBasicTimer_getTimerFrequency(self)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnBasicTimer_disable(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnBasicTimer_enable(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBasicTimer_lnBasicTimer(__bindgen_tmp.as_mut_ptr(), timer);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimerD1Ev"]
    pub fn lnBasicTimer_lnBasicTimer_destructor(this: *mut lnBasicTimer);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnBasicDelayTimer {
    pub _base: lnBasicTimer,
    pub _handler: lnBasicTimerIrq,
    pub _cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer3armEi"]
    pub fn lnBasicDelayTimer_arm(this: *mut lnBasicDelayTimer, delayUs: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer12setInterruptEPFvPvES0_"]
    pub fn lnBasicDelayTimer_setInterrupt(
        this: *mut lnBasicDelayTimer,
        handler: lnBasicTimerIrq,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer16interruptHandlerEi"]
    pub fn lnBasicDelayTimer_interruptHandler(timer: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer3irqEv"]
    pub fn lnBasicDelayTimer_irq(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer15enableInterruptEv"]
    pub fn lnBasicDelayTimer_enableInterrupt(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer16disableInterruptEv"]
    pub fn lnBasicDelayTimer_disableInterrupt(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimerC1Ei"]
    pub fn lnBasicDelayTimer_lnBasicDelayTimer(this: *mut lnBasicDelayTimer, timer: cty::c_int);
}
impl lnBasicDelayTimer {
    #[inline]
    pub unsafe fn arm(&mut self, delayUs: cty::c_int) {
        lnBasicDelayTimer_arm(self, delayUs)
    }
    #[inline]
    pub unsafe fn setInterrupt(&mut self, handler: lnBasicTimerIrq, cookie: *mut cty::c_void) {
        lnBasicDelayTimer_setInterrupt(self, handler, cookie)
    }
    #[inline]
    pub unsafe fn interruptHandler(timer: cty::c_int) {
        lnBasicDelayTimer_interruptHandler(timer)
    }
    #[inline]
    pub unsafe fn irq(&mut self) {
        lnBasicDelayTimer_irq(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self) {
        lnBasicDelayTimer_enableInterrupt(self)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnBasicDelayTimer_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBasicDelayTimer_lnBasicDelayTimer(__bindgen_tmp.as_mut_ptr(), timer);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimerD1Ev"]
    pub fn lnBasicDelayTimer_lnBasicDelayTimer_destructor(this: *mut lnBasicDelayTimer);
}
pub const lnCpuID_LN_VENDOR_LN_MCU_STM32: lnCpuID_LN_VENDOR = 0;
pub const lnCpuID_LN_VENDOR_LN_MCU_GD32: lnCpuID_LN_VENDOR = 1;
pub const lnCpuID_LN_VENDOR_LN_MCU_CH32: lnCpuID_LN_VENDOR = 2;
pub type lnCpuID_LN_VENDOR = cty::c_uint;
pub const lnCpuID_LN_MCU_LN_MCU_ARM_F3: lnCpuID_LN_MCU = 0;
pub const lnCpuID_LN_MCU_LN_MCU_ARM_F4: lnCpuID_LN_MCU = 1;
pub const lnCpuID_LN_MCU_LN_MCU_RISCV: lnCpuID_LN_MCU = 2;
pub type lnCpuID_LN_MCU = cty::c_uint;
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID8identifyEv"]
    pub fn lnCpuID_identify();
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID6vendorEv"]
    pub fn lnCpuID_vendor() -> lnCpuID_LN_VENDOR;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID3mcuEv"]
    pub fn lnCpuID_mcu() -> lnCpuID_LN_MCU;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID11mcuAsStringEv"]
    pub fn lnCpuID_mcuAsString() -> *const cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID9flashSizeEv"]
    pub fn lnCpuID_flashSize() -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID7ramSizeEv"]
    pub fn lnCpuID_ramSize() -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID10idAsStringEv"]
    pub fn lnCpuID_idAsString() -> *const cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID10clockSpeedEv"]
    pub fn lnCpuID_clockSpeed() -> cty::c_int;
}
#[repr(C)]
pub struct lnDAC__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnDAC {
    pub vtable_: *const lnDAC__bindgen_vtable,
    pub _instance: cty::c_int,
    pub _dma: lnDMA,
    pub _timer: *mut lnBasicTimer,
    pub _dmaSem: lnBinarySemaphore,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC3pinEv"]
    pub fn lnDAC_pin(this: *mut lnDAC) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC6enableEv"]
    pub fn lnDAC_enable(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC7disableEv"]
    pub fn lnDAC_disable(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC10simpleModeEv"]
    pub fn lnDAC_simpleMode(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8setValueEi"]
    pub fn lnDAC_setValue(this: *mut lnDAC, value: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC12startDmaModeEi"]
    pub fn lnDAC_startDmaMode(this: *mut lnDAC, fq: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC11stopDmaModeEv"]
    pub fn lnDAC_stopDmaMode(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC15getDmaFrequencyEv"]
    pub fn lnDAC_getDmaFrequency(this: *mut lnDAC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8dmaWriteEiPtb"]
    pub fn lnDAC_dmaWrite(this: *mut lnDAC, nbn: cty::c_int, data: *mut u16, loop_: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8dmaDone_EPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnDAC_dmaDone_(t: *mut cty::c_void, typ: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC7dmaDoneEv"]
    pub fn lnDAC_dmaDone(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC16dmaWriteInternalEiPtb"]
    pub fn lnDAC_dmaWriteInternal(this: *mut lnDAC, nb: cty::c_int, data: *mut u16, loop_: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDACC1Ei"]
    pub fn lnDAC_lnDAC(this: *mut lnDAC, instance: cty::c_int);
}
impl lnDAC {
    #[inline]
    pub unsafe fn pin(&mut self) -> lnPin {
        lnDAC_pin(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnDAC_enable(self)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnDAC_disable(self)
    }
    #[inline]
    pub unsafe fn simpleMode(&mut self) {
        lnDAC_simpleMode(self)
    }
    #[inline]
    pub unsafe fn setValue(&mut self, value: cty::c_int) {
        lnDAC_setValue(self, value)
    }
    #[inline]
    pub unsafe fn startDmaMode(&mut self, fq: cty::c_int) {
        lnDAC_startDmaMode(self, fq)
    }
    #[inline]
    pub unsafe fn stopDmaMode(&mut self) {
        lnDAC_stopDmaMode(self)
    }
    #[inline]
    pub unsafe fn getDmaFrequency(&mut self) -> cty::c_int {
        lnDAC_getDmaFrequency(self)
    }
    #[inline]
    pub unsafe fn dmaWrite(&mut self, nbn: cty::c_int, data: *mut u16, loop_: bool) {
        lnDAC_dmaWrite(self, nbn, data, loop_)
    }
    #[inline]
    pub unsafe fn dmaDone_(t: *mut cty::c_void, typ: lnDMA_DmaInterruptType) {
        lnDAC_dmaDone_(t, typ)
    }
    #[inline]
    pub unsafe fn dmaDone(&mut self) {
        lnDAC_dmaDone(self)
    }
    #[inline]
    pub unsafe fn dmaWriteInternal(&mut self, nb: cty::c_int, data: *mut u16, loop_: bool) {
        lnDAC_dmaWriteInternal(self, nb, data, loop_)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDAC_lnDAC(__bindgen_tmp.as_mut_ptr(), instance);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDACD1Ev"]
    pub fn lnDAC_lnDAC_destructor(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC5eraseEmi"]
    pub fn lnFMC_erase(startAddress: cty::c_ulong, sizeInKBytes: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC5writeEmPKhi"]
    pub fn lnFMC_write(
        startAddress: cty::c_ulong,
        data: *const u8,
        sizeInBytes: cty::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC8eraseStmEmi"]
    pub fn lnFMC_eraseStm(startAddress: cty::c_ulong, sizeInKBytes: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC9eraseCh32Emi"]
    pub fn lnFMC_eraseCh32(startAddress: cty::c_ulong, sizeInKBytes: cty::c_int) -> bool;
}
#[repr(C)]
pub struct lnI2C__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnI2C {
    pub vtable_: *const lnI2C__bindgen_vtable,
    pub cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C8setSpeedEi"]
    pub fn lnI2C_setSpeed(this: *mut lnI2C, speed: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C10setAddressEi"]
    pub fn lnI2C_setAddress(this: *mut lnI2C, address: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C5writeEiPh"]
    pub fn lnI2C_write(this: *mut lnI2C, n: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C4readEiPh"]
    pub fn lnI2C_read(this: *mut lnI2C, n: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C5writeEiiPh"]
    pub fn lnI2C_write1(this: *mut lnI2C, target: cty::c_int, n: cty::c_int, data: *mut u8)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C10multiWriteEiiPiPPh"]
    pub fn lnI2C_multiWrite(
        this: *mut lnI2C,
        target: cty::c_int,
        nbSeqn: cty::c_int,
        seqLength: *mut cty::c_int,
        data: *mut *mut u8,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C4readEiiPh"]
    pub fn lnI2C_read1(this: *mut lnI2C, target: cty::c_int, n: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2C5beginEi"]
    pub fn lnI2C_begin(this: *mut lnI2C, target: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2CC1Eii"]
    pub fn lnI2C_lnI2C(this: *mut lnI2C, instance: cty::c_int, speed: cty::c_int);
}
impl lnI2C {
    #[inline]
    pub unsafe fn setSpeed(&mut self, speed: cty::c_int) {
        lnI2C_setSpeed(self, speed)
    }
    #[inline]
    pub unsafe fn setAddress(&mut self, address: cty::c_int) {
        lnI2C_setAddress(self, address)
    }
    #[inline]
    pub unsafe fn write(&mut self, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_write(self, n, data)
    }
    #[inline]
    pub unsafe fn read(&mut self, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_read(self, n, data)
    }
    #[inline]
    pub unsafe fn write1(&mut self, target: cty::c_int, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_write1(self, target, n, data)
    }
    #[inline]
    pub unsafe fn multiWrite(
        &mut self,
        target: cty::c_int,
        nbSeqn: cty::c_int,
        seqLength: *mut cty::c_int,
        data: *mut *mut u8,
    ) -> bool {
        lnI2C_multiWrite(self, target, nbSeqn, seqLength, data)
    }
    #[inline]
    pub unsafe fn read1(&mut self, target: cty::c_int, n: cty::c_int, data: *mut u8) -> bool {
        lnI2C_read1(self, target, n, data)
    }
    #[inline]
    pub unsafe fn begin(&mut self, target: cty::c_int) -> bool {
        lnI2C_begin(self, target)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, speed: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnI2C_lnI2C(__bindgen_tmp.as_mut_ptr(), instance, speed);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnI2CD1Ev"]
    pub fn lnI2C_lnI2C_destructor(this: *mut lnI2C);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnSerial {
    pub _instance: cty::c_int,
    pub _irq: LnIRQ,
    pub _adr: cty::c_ulong,
    pub _txMutex: lnMutex,
    pub _txDone: lnBinarySemaphore,
    pub _cur: *const u8,
    pub _tail: *const u8,
    pub _txState: lnSerial_txState,
    pub _txDma: lnDMA,
    pub _lastTransferSize: cty::c_int,
    pub _rxBufferSize: cty::c_int,
    pub _rxHead: cty::c_int,
    pub _rxTail: cty::c_int,
    pub _rxBuffer: *mut u8,
    pub _rxEnabled: bool,
    pub _rxError: cty::c_int,
    pub _cb: lnSerial_lnSerialCallback,
    pub _cbCookie: *mut cty::c_void,
}
pub const lnSerial_Event_dataAvailable: lnSerial_Event = 0;
pub type lnSerial_Event = cty::c_uint;
pub const lnSerial_txState_txTransmittingIdle: lnSerial_txState = 0;
pub const lnSerial_txState_txTransmittingInterrupt: lnSerial_txState = 1;
pub const lnSerial_txState_txTransmittingDMA: lnSerial_txState = 2;
pub const lnSerial_txState_txTransmittingLast: lnSerial_txState = 3;
pub type lnSerial_txState = cty::c_uint;
pub type lnSerial_lnSerialCallback =
    ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void, event: lnSerial_Event)>;
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial4initEv"]
    pub fn lnSerial_init(this: *mut lnSerial) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial8setSpeedEi"]
    pub fn lnSerial_setSpeed(this: *mut lnSerial, speed: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial8enableRxEb"]
    pub fn lnSerial_enableRx(this: *mut lnSerial, enabled: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial8transmitEiPKh"]
    pub fn lnSerial_transmit(this: *mut lnSerial, size: cty::c_int, buffer: *const u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial11dmaTransmitEiPKh"]
    pub fn lnSerial_dmaTransmit(this: *mut lnSerial, size: cty::c_int, buffer: *const u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial16disableInterruptEv"]
    pub fn lnSerial_disableInterrupt(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial15enableInterruptEb"]
    pub fn lnSerial_enableInterrupt(this: *mut lnSerial, txInterruptEnabled: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial7purgeRxEv"]
    pub fn lnSerial_purgeRx(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial10_interruptEv"]
    pub fn lnSerial__interrupt(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial4readEiPh"]
    pub fn lnSerial_read(this: *mut lnSerial, max: cty::c_int, to: *mut u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial14getReadPointerEPPh"]
    pub fn lnSerial_getReadPointer(this: *mut lnSerial, to: *mut *mut u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial7consumeEi"]
    pub fn lnSerial_consume(this: *mut lnSerial, n: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial10interruptsEi"]
    pub fn lnSerial_interrupts(instance: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial18txInterruptHandlerEv"]
    pub fn lnSerial_txInterruptHandler(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial18rxInterruptHandlerEv"]
    pub fn lnSerial_rxInterruptHandler(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial10_programTxEv"]
    pub fn lnSerial__programTx(this: *mut lnSerial) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial9_enableTxENS_7txStateE"]
    pub fn lnSerial__enableTx(this: *mut lnSerial, mode: lnSerial_txState) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial6moduloEi"]
    pub fn lnSerial_modulo(this: *mut lnSerial, in_: cty::c_int) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial7txDmaCbEv"]
    pub fn lnSerial_txDmaCb(this: *mut lnSerial);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerial12_dmaCallbackEPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnSerial__dmaCallback(c: *mut cty::c_void, it: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnSerialC1Eii"]
    pub fn lnSerial_lnSerial(this: *mut lnSerial, instance: cty::c_int, rxBufferSize: cty::c_int);
}
impl lnSerial {
    #[inline]
    pub unsafe fn init(&mut self) -> bool {
        lnSerial_init(self)
    }
    #[inline]
    pub unsafe fn setSpeed(&mut self, speed: cty::c_int) -> bool {
        lnSerial_setSpeed(self, speed)
    }
    #[inline]
    pub unsafe fn enableRx(&mut self, enabled: bool) -> bool {
        lnSerial_enableRx(self, enabled)
    }
    #[inline]
    pub unsafe fn transmit(&mut self, size: cty::c_int, buffer: *const u8) -> bool {
        lnSerial_transmit(self, size, buffer)
    }
    #[inline]
    pub unsafe fn dmaTransmit(&mut self, size: cty::c_int, buffer: *const u8) -> bool {
        lnSerial_dmaTransmit(self, size, buffer)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnSerial_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self, txInterruptEnabled: bool) {
        lnSerial_enableInterrupt(self, txInterruptEnabled)
    }
    #[inline]
    pub unsafe fn purgeRx(&mut self) {
        lnSerial_purgeRx(self)
    }
    #[inline]
    pub unsafe fn _interrupt(&mut self) {
        lnSerial__interrupt(self)
    }
    #[inline]
    pub unsafe fn read(&mut self, max: cty::c_int, to: *mut u8) -> cty::c_int {
        lnSerial_read(self, max, to)
    }
    #[inline]
    pub unsafe fn getReadPointer(&mut self, to: *mut *mut u8) -> cty::c_int {
        lnSerial_getReadPointer(self, to)
    }
    #[inline]
    pub unsafe fn consume(&mut self, n: cty::c_int) {
        lnSerial_consume(self, n)
    }
    #[inline]
    pub unsafe fn interrupts(instance: cty::c_int) {
        lnSerial_interrupts(instance)
    }
    #[inline]
    pub unsafe fn txInterruptHandler(&mut self) {
        lnSerial_txInterruptHandler(self)
    }
    #[inline]
    pub unsafe fn rxInterruptHandler(&mut self) {
        lnSerial_rxInterruptHandler(self)
    }
    #[inline]
    pub unsafe fn _programTx(&mut self) -> bool {
        lnSerial__programTx(self)
    }
    #[inline]
    pub unsafe fn _enableTx(&mut self, mode: lnSerial_txState) -> bool {
        lnSerial__enableTx(self, mode)
    }
    #[inline]
    pub unsafe fn modulo(&mut self, in_: cty::c_int) -> cty::c_int {
        lnSerial_modulo(self, in_)
    }
    #[inline]
    pub unsafe fn txDmaCb(&mut self) {
        lnSerial_txDmaCb(self)
    }
    #[inline]
    pub unsafe fn _dmaCallback(c: *mut cty::c_void, it: lnDMA_DmaInterruptType) {
        lnSerial__dmaCallback(c, it)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, rxBufferSize: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnSerial_lnSerial(__bindgen_tmp.as_mut_ptr(), instance, rxBufferSize);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnStopWatch {
    pub _start: cty::c_ulong,
    pub _end: cty::c_ulong,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatch7restartEi"]
    pub fn lnStopWatch_restart(this: *mut lnStopWatch, durationMs: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatch7elapsedEv"]
    pub fn lnStopWatch_elapsed(this: *mut lnStopWatch) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatchC1Ei"]
    pub fn lnStopWatch_lnStopWatch(this: *mut lnStopWatch, ms: cty::c_int);
}
impl lnStopWatch {
    #[inline]
    pub unsafe fn restart(&mut self, durationMs: cty::c_int) -> bool {
        lnStopWatch_restart(self, durationMs)
    }
    #[inline]
    pub unsafe fn elapsed(&mut self) -> bool {
        lnStopWatch_elapsed(self)
    }
    #[inline]
    pub unsafe fn new(ms: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnStopWatch_lnStopWatch(__bindgen_tmp.as_mut_ptr(), ms);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnCycleClock {
    pub _start: cty::c_ulong,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClock7restartEv"]
    pub fn lnCycleClock_restart(this: *mut lnCycleClock);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClock7elapsedEv"]
    pub fn lnCycleClock_elapsed(this: *mut lnCycleClock) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClockC1Ev"]
    pub fn lnCycleClock_lnCycleClock(this: *mut lnCycleClock);
}
impl lnCycleClock {
    #[inline]
    pub unsafe fn restart(&mut self) {
        lnCycleClock_restart(self)
    }
    #[inline]
    pub unsafe fn elapsed(&mut self) -> cty::c_ulong {
        lnCycleClock_elapsed(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnCycleClock_lnCycleClock(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type lnTimerIrq = ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void)>;
pub const lnTimerMode_lnTimerModePwm0: lnTimerMode = 0;
pub const lnTimerMode_lnTimerModePwm1: lnTimerMode = 1;
pub type lnTimerMode = cty::c_uint;
#[repr(C)]
pub struct lnTimer__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnTimer {
    pub vtable_: *const lnTimer__bindgen_vtable,
    pub _timer: cty::c_int,
    pub _channel: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer10setPwmModeEi"]
    pub fn lnTimer_setPwmMode(this: *mut lnTimer, ratio100: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer15setPwmFrequencyEi"]
    pub fn lnTimer_setPwmFrequency(this: *mut lnTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer15setChannelRatioEi"]
    pub fn lnTimer_setChannelRatio(this: *mut lnTimer, ratio100: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer10singleShotEib"]
    pub fn lnTimer_singleShot(this: *mut lnTimer, durationMs: cty::c_int, down: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer13setForceStateEb"]
    pub fn lnTimer_setForceState(this: *mut lnTimer, forceHigh: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer7disableEv"]
    pub fn lnTimer_disable(this: *mut lnTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer6enableEv"]
    pub fn lnTimer_enable(this: *mut lnTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer16setTickFrequencyEi"]
    pub fn lnTimer_setTickFrequency(this: *mut lnTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer7setModeE11lnTimerMode"]
    pub fn lnTimer_setMode(this: *mut lnTimer, mode: lnTimerMode);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerC1Eii"]
    pub fn lnTimer_lnTimer(this: *mut lnTimer, timer: cty::c_int, channel: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerC1Ei"]
    pub fn lnTimer_lnTimer1(this: *mut lnTimer, pin: cty::c_int);
}
impl lnTimer {
    #[inline]
    pub unsafe fn setPwmMode(&mut self, ratio100: cty::c_int) {
        lnTimer_setPwmMode(self, ratio100)
    }
    #[inline]
    pub unsafe fn setPwmFrequency(&mut self, fqInHz: cty::c_int) {
        lnTimer_setPwmFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setChannelRatio(&mut self, ratio100: cty::c_int) {
        lnTimer_setChannelRatio(self, ratio100)
    }
    #[inline]
    pub unsafe fn singleShot(&mut self, durationMs: cty::c_int, down: bool) {
        lnTimer_singleShot(self, durationMs, down)
    }
    #[inline]
    pub unsafe fn setForceState(&mut self, forceHigh: bool) {
        lnTimer_setForceState(self, forceHigh)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnTimer_disable(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnTimer_enable(self)
    }
    #[inline]
    pub unsafe fn setTickFrequency(&mut self, fqInHz: cty::c_int) {
        lnTimer_setTickFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setMode(&mut self, mode: lnTimerMode) {
        lnTimer_setMode(self, mode)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int, channel: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimer_lnTimer(__bindgen_tmp.as_mut_ptr(), timer, channel);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(pin: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimer_lnTimer1(__bindgen_tmp.as_mut_ptr(), pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerD1Ev"]
    pub fn lnTimer_lnTimer_destructor(this: *mut lnTimer);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnAdcTimer {
    pub _base: lnTimer,
    pub _actualPwmFrequency: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnAdcTimer15setPwmFrequencyEi"]
    pub fn lnAdcTimer_setPwmFrequency(this: *mut lnAdcTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnAdcTimer15getPwmFrequencyEv"]
    pub fn lnAdcTimer_getPwmFrequency(this: *mut lnAdcTimer) -> cty::c_int;
}
impl lnAdcTimer {
    #[inline]
    pub unsafe fn setPwmFrequency(&mut self, fqInHz: cty::c_int) {
        lnAdcTimer_setPwmFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn getPwmFrequency(&mut self) -> cty::c_int {
        lnAdcTimer_getPwmFrequency(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct lnSquareSignal {
    pub _base: lnTimer,
}
extern "C" {
    #[link_name = "\u{1}_ZN14lnSquareSignal12setFrequencyEi"]
    pub fn lnSquareSignal_setFrequency(this: *mut lnSquareSignal, fqInHz: cty::c_int);
}
impl lnSquareSignal {
    #[inline]
    pub unsafe fn setFrequency(&mut self, fqInHz: cty::c_int) {
        lnSquareSignal_setFrequency(self, fqInHz)
    }
}
#[repr(C)]
pub struct lnDmaTimerCallback__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnDmaTimerCallback {
    pub vtable_: *const lnDmaTimerCallback__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug)]
pub struct lnDmaTimer {
    pub _base: lnTimer,
    pub _cb: *mut lnDmaTimerCallback,
    pub _rollover: cty::c_int,
    pub _dma: *mut lnDMA,
    pub _bits: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer8pwmSetupEi"]
    pub fn lnDmaTimer_pwmSetup(this: *mut lnDmaTimer, frequency: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer8rolloverEv"]
    pub fn lnDmaTimer_rollover(this: *mut lnDmaTimer) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer17attachDmaCallbackEP18lnDmaTimerCallback"]
    pub fn lnDmaTimer_attachDmaCallback(this: *mut lnDmaTimer, cb: *mut lnDmaTimerCallback)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer5startEiPh"]
    pub fn lnDmaTimer_start(this: *mut lnDmaTimer, nbSample: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer4stopEv"]
    pub fn lnDmaTimer_stop(this: *mut lnDmaTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer16setTickFrequencyEi"]
    pub fn lnDmaTimer_setTickFrequency(this: *mut lnDmaTimer, fq: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer12dmaInterruptEb"]
    pub fn lnDmaTimer_dmaInterrupt(this: *mut lnDmaTimer, h: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimerC1Eii"]
    pub fn lnDmaTimer_lnDmaTimer(this: *mut lnDmaTimer, bits: cty::c_int, pin: lnPin);
}
impl lnDmaTimer {
    #[inline]
    pub unsafe fn pwmSetup(&mut self, frequency: cty::c_int) -> bool {
        lnDmaTimer_pwmSetup(self, frequency)
    }
    #[inline]
    pub unsafe fn rollover(&mut self) -> cty::c_int {
        lnDmaTimer_rollover(self)
    }
    #[inline]
    pub unsafe fn attachDmaCallback(&mut self, cb: *mut lnDmaTimerCallback) -> bool {
        lnDmaTimer_attachDmaCallback(self, cb)
    }
    #[inline]
    pub unsafe fn start(&mut self, nbSample: cty::c_int, data: *mut u8) -> bool {
        lnDmaTimer_start(self, nbSample, data)
    }
    #[inline]
    pub unsafe fn stop(&mut self) {
        lnDmaTimer_stop(self)
    }
    #[inline]
    pub unsafe fn setTickFrequency(&mut self, fq: cty::c_int) -> bool {
        lnDmaTimer_setTickFrequency(self, fq)
    }
    #[inline]
    pub unsafe fn dmaInterrupt(&mut self, h: bool) {
        lnDmaTimer_dmaInterrupt(self, h)
    }
    #[inline]
    pub unsafe fn new(bits: cty::c_int, pin: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDmaTimer_lnDmaTimer(__bindgen_tmp.as_mut_ptr(), bits, pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimerD1Ev"]
    pub fn lnDmaTimer_lnDmaTimer_destructor(this: *mut lnDmaTimer);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnDelayTimer {
    pub _base: lnTimer,
    pub _handler: lnTimerIrq,
    pub _cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer3armEi"]
    pub fn lnDelayTimer_arm(this: *mut lnDelayTimer, delayUs: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer12setInterruptEPFvPvES0_"]
    pub fn lnDelayTimer_setInterrupt(
        this: *mut lnDelayTimer,
        handler: lnTimerIrq,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer16interruptHandlerEi"]
    pub fn lnDelayTimer_interruptHandler(timer: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer3irqEv"]
    pub fn lnDelayTimer_irq(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer15enableInterruptEv"]
    pub fn lnDelayTimer_enableInterrupt(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer16disableInterruptEv"]
    pub fn lnDelayTimer_disableInterrupt(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimerC1Eii"]
    pub fn lnDelayTimer_lnDelayTimer(
        this: *mut lnDelayTimer,
        timer: cty::c_int,
        channel: cty::c_int,
    );
}
impl lnDelayTimer {
    #[inline]
    pub unsafe fn arm(&mut self, delayUs: cty::c_int) {
        lnDelayTimer_arm(self, delayUs)
    }
    #[inline]
    pub unsafe fn setInterrupt(&mut self, handler: lnTimerIrq, cookie: *mut cty::c_void) {
        lnDelayTimer_setInterrupt(self, handler, cookie)
    }
    #[inline]
    pub unsafe fn interruptHandler(timer: cty::c_int) {
        lnDelayTimer_interruptHandler(timer)
    }
    #[inline]
    pub unsafe fn irq(&mut self) {
        lnDelayTimer_irq(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self) {
        lnDelayTimer_enableInterrupt(self)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnDelayTimer_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int, channel: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDelayTimer_lnDelayTimer(__bindgen_tmp.as_mut_ptr(), timer, channel);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimerD1Ev"]
    pub fn lnDelayTimer_lnDelayTimer_destructor(this: *mut lnDelayTimer);
}
unsafe impl Send for lnFastEventGroup {}
unsafe impl Sync for lnFastEventGroup {}
