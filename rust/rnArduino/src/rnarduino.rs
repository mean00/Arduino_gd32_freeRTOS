#![allow(dead_code)]


/* automatically generated by rust-bindgen 0.64.0 */

pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6usize] = b"4.3.0\0";
pub const __NEWLIB__: u32 = 4;
pub const __NEWLIB_MINOR__: u32 = 3;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 1;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 1;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 700;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3usize] = b"hh\0";
pub const __INT16: &[u8; 2usize] = b"h\0";
pub const __INT64: &[u8; 3usize] = b"ll\0";
pub const __FAST8: &[u8; 3usize] = b"hh\0";
pub const __FAST16: &[u8; 2usize] = b"h\0";
pub const __FAST64: &[u8; 3usize] = b"ll\0";
pub const __LEAST8: &[u8; 3usize] = b"hh\0";
pub const __LEAST16: &[u8; 2usize] = b"h\0";
pub const __LEAST64: &[u8; 3usize] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const __NEWLIB_H__: u32 = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _FSEEK_OPTIMIZATION: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _HAVE_INITFINI_ARRAY: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _LDBL_EQ_DBL: u32 = 1;
pub const _MB_CAPABLE: u32 = 1;
pub const _MB_LEN_MAX: u32 = 8;
pub const _REENT_CHECK_VERIFY: u32 = 1;
pub const _RETARGETABLE_LOCKING: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const _WANT_IO_C99_FORMATS: u32 = 1;
pub const _WANT_IO_LONG_LONG: u32 = 1;
pub const _WANT_REGISTER_FINI: u32 = 1;
pub const _WANT_USE_GDTOA: u32 = 1;
pub const _WIDE_ORIENT: u32 = 1;
pub const __OBSOLETE_MATH_DEFAULT: u32 = 1;
pub const __OBSOLETE_MATH: u32 = 1;
pub const __RAND_MAX: u32 = 2147483647;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const _NULL: u32 = 0;
pub const _ATEXIT_SIZE: u32 = 32;
pub const _RAND48_SEED_0: u32 = 13070;
pub const _RAND48_SEED_1: u32 = 43981;
pub const _RAND48_SEED_2: u32 = 4660;
pub const _RAND48_MULT_0: u32 = 58989;
pub const _RAND48_MULT_1: u32 = 57068;
pub const _RAND48_MULT_2: u32 = 5;
pub const _RAND48_ADD: u32 = 11;
pub const _REENT_EMERGENCY_SIZE: u32 = 25;
pub const _REENT_ASCTIME_SIZE: u32 = 26;
pub const _REENT_SIGNAL_SIZE: u32 = 24;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SORD: u32 = 8192;
pub const __SL64: u32 = 32768;
pub const __SNLK: u32 = 1;
pub const __SWID: u32 = 8192;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const EOF: i32 = -1;
pub const BUFSIZ: u32 = 1024;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const L_tmpnam: u32 = 1024;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const TMP_MAX: u32 = 26;
pub const L_cuserid: u32 = 9;
pub const L_ctermid: u32 = 16;
pub const LN_ARCH_UNKNOWN: u32 = 0;
pub const LN_ARCH_RISCV: u32 = 1;
pub const LN_ARCH_ARM: u32 = 2;
pub const INPUT: u32 = 0;
pub const OUTPUT: u32 = 1;
pub const INPUT_PULLUP: u32 = 2;
pub const NONE: u32 = 0;
pub const CHANGE: u32 = 1;
pub const FALLING: u32 = 2;
pub const RISING: u32 = 3;
pub const LOW: u32 = 0;
pub const HIGH: u32 = 1;
pub const TICK_TYPE_WIDTH_16_BITS: u32 = 0;
pub const TICK_TYPE_WIDTH_32_BITS: u32 = 1;
pub const TICK_TYPE_WIDTH_64_BITS: u32 = 2;
pub const configPRIO_BITS: u32 = 4;
pub const configLIBRARY_LOWEST_INTERRUPT_PRIORITY: u32 = 15;
pub const configKERNEL_INTERRUPT_PRIORITY: u32 = 240;
pub const configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 5;
pub const configMAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 80;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 1;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 0;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_IDLE_HOOK: u32 = 0;
pub const configUSE_TICK_HOOK: u32 = 1;
pub const configMAX_PRIORITIES: u32 = 16;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 1;
pub const configMAX_TASK_NAME_LEN: u32 = 16;
pub const configUSE_TRACE_FACILITY: u32 = 1;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 1;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configTASK_NOTIFICATION_ARRAY_ENTRIES: u32 = 5;
pub const configTIMER_TASK_PRIORITY: u32 = 1;
pub const configUSE_TIMERS: u32 = 1;
pub const configTIMER_TASK_STACK_DEPTH: u32 = 400;
pub const configTIMER_QUEUE_LENGTH: u32 = 5;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 0;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const INCLUDE_vTaskPrioritySet: u32 = 0;
pub const INCLUDE_uxTaskPriorityGet: u32 = 0;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const configUSE_MUTEXES: u32 = 1;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const configUSE_TIME_SLICING: u32 = 0;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 2;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configQUEUE_REGISTRY_SIZE: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const configTICK_TYPE_WIDTH_IN_BITS: u32 = 1;
pub const configUSE_MPU_WRAPPERS_V1: u32 = 0;
pub const configENABLE_ACCESS_CONTROL_LIST: u32 = 0;
pub const configNUMBER_OF_CORES: u32 = 1;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_EAFNOSUPPORT: u32 = 97;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 8;
pub const portNVIC_PENDSVSET_BIT: u32 = 268435456;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 1;
pub const portBYTE_ALIGNMENT_MASK: u32 = 7;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const configSTACK_ALLOCATION_FROM_SEPARATE_HEAP: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const configUSE_PICOLIBC_TLS: u32 = 0;
pub const configUSE_C_RUNTIME_TLS_SUPPORT: u32 = 0;
pub const INCLUDE_xTaskDelayUntil: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 0;
pub const INCLUDE_xTaskAbortDelay: u32 = 0;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 0;
pub const INCLUDE_xTaskGetHandle: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 0;
pub const INCLUDE_eTaskGetState: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 0;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 1;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 0;
pub const configUSE_TASK_PREEMPTION_DISABLE: u32 = 0;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const configASSERT_DEFINED: u32 = 1;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configCHECK_HANDLER_INSTALLATION: u32 = 1;
pub const configRUN_MULTIPLE_PRIORITIES: u32 = 0;
pub const configUSE_CORE_AFFINITY: u32 = 0;
pub const configUSE_PASSIVE_IDLE_HOOK: u32 = 0;
pub const configUSE_MINI_LIST_ITEM: u32 = 1;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TICKLESS_IDLE: u32 = 0;
pub const configUSE_QUEUE_SETS: u32 = 0;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configENABLE_HEAP_PROTECTOR: u32 = 0;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const configUSE_SB_COMPLETED_CALLBACK: u32 = 0;
pub const configKERNEL_PROVIDED_STATIC_MEMORY: u32 = 0;
pub const configSTATS_BUFFER_MAX_LENGTH: u32 = 65535;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_MVE: u32 = 0;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const configRUN_ADDITIONAL_TESTS: u32 = 0;
pub const tskKERNEL_VERSION_NUMBER: &[u8; 8usize] = b"V11.0.1\0";
pub const tskKERNEL_VERSION_MAJOR: u32 = 11;
pub const tskKERNEL_VERSION_MINOR: u32 = 0;
pub const tskKERNEL_VERSION_BUILD: u32 = 1;
pub const tskMPU_REGION_READ_ONLY: u32 = 1;
pub const tskMPU_REGION_READ_WRITE: u32 = 2;
pub const tskMPU_REGION_EXECUTE_NEVER: u32 = 4;
pub const tskMPU_REGION_NORMAL_MEMORY: u32 = 8;
pub const tskMPU_REGION_DEVICE_MEMORY: u32 = 16;
pub const tskMPU_READ_PERMISSION: u32 = 1;
pub const tskMPU_WRITE_PERMISSION: u32 = 2;
pub const tskDEFAULT_INDEX_TO_NOTIFY: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const LN_IRQ_OFFSET: u32 = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
pub type __gnuc_va_list = u32;
pub type va_list = __gnuc_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnPin {
    PA0 = 0,
    PA1 = 1,
    PA2 = 2,
    PA3 = 3,
    PA4 = 4,
    PA5 = 5,
    PA6 = 6,
    PA7 = 7,
    PA8 = 8,
    PA9 = 9,
    PA10 = 10,
    PA11 = 11,
    PA12 = 12,
    PA13 = 13,
    PA14 = 14,
    PA15 = 15,
    PB0 = 16,
    PB1 = 17,
    PB2 = 18,
    PB3 = 19,
    PB4 = 20,
    PB5 = 21,
    PB6 = 22,
    PB7 = 23,
    PB8 = 24,
    PB9 = 25,
    PB10 = 26,
    PB11 = 27,
    PB12 = 28,
    PB13 = 29,
    PB14 = 30,
    PB15 = 31,
    PC0 = 32,
    PC1 = 33,
    PC2 = 34,
    PC3 = 35,
    PC4 = 36,
    PC5 = 37,
    PC6 = 38,
    PC7 = 39,
    PC8 = 40,
    PC9 = 41,
    PC10 = 42,
    PC11 = 43,
    PC12 = 44,
    PC13 = 45,
    PC14 = 46,
    PC15 = 47,
    PD0 = 48,
    PD1 = 49,
    PD2 = 50,
    PD3 = 51,
    PD4 = 52,
    PD5 = 53,
    PD6 = 54,
    PD7 = 55,
    PD8 = 56,
    PD9 = 57,
    PD10 = 58,
    PD11 = 59,
    PD12 = 60,
    PD13 = 61,
    PD14 = 62,
    PD15 = 63,
    PE0 = 64,
    PE1 = 65,
    PE2 = 66,
    PE3 = 67,
    PE4 = 68,
    PE5 = 69,
    PE6 = 70,
    PE7 = 71,
    PE8 = 72,
    PE9 = 73,
    PE10 = 74,
    PE11 = 75,
    PE12 = 76,
    PE13 = 77,
    PE14 = 78,
    PE15 = 79,
    NoPin = -1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnGpioMode {
    lnFLOATING = 0,
    lnINPUT_FLOATING = 1,
    lnINPUT_PULLUP = 2,
    lnINPUT_PULLDOWN = 3,
    lnOUTPUT = 4,
    lnOUTPUT_OPEN_DRAIN = 5,
    lnALTERNATE_PP = 6,
    lnALTERNATE_OD = 7,
    lnPWM = 8,
    lnADC_MODE = 9,
    lnDAC_MODE = 10,
    lnUART = 11,
    lnSPI_MODE = 12,
}
extern "C" {
    #[link_name = "\u{1}_Z9lnPinMode5lnPin10lnGpioModei"]
    pub fn lnPinMode(pin: lnPin, mode: lnGpioMode, speedInMhz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z14lnDigitalWrite5lnPinb"]
    pub fn lnDigitalWrite(pin: lnPin, value: bool);
}
extern "C" {
    #[link_name = "\u{1}_Z13lnDigitalRead5lnPin"]
    pub fn lnDigitalRead(pin: lnPin) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnDigitalToggle5lnPin"]
    pub fn lnDigitalToggle(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z16lnOpenDrainClose5lnPinb"]
    pub fn lnOpenDrainClose(pin: lnPin, close: bool);
}
extern "C" {
    #[link_name = "\u{1}_Z23lnGetGpioToggleRegisteri"]
    pub fn lnGetGpioToggleRegister(port: cty::c_int) -> *mut cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z26lnGetGpioDirectionRegisteri"]
    pub fn lnGetGpioDirectionRegister(port: cty::c_int) -> *mut cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z22lnGetGpioValueRegisteri"]
    pub fn lnGetGpioValueRegister(port: cty::c_int) -> *mut cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z10lnReadPorti"]
    pub fn lnReadPort(port: cty::c_int) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnRemapTimerPini"]
    pub fn lnRemapTimerPin(timer: cty::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnFastIO {
    pub _onoff: *mut cty::c_uint,
    pub _onbit: cty::c_uint,
    pub _offbit: cty::c_uint,
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnFastIOC1E5lnPin"]
    pub fn lnFastIO_lnFastIO(this: *mut lnFastIO, p: lnPin);
}
impl lnFastIO {
    #[inline]
    pub unsafe fn new(p: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastIO_lnFastIO(__bindgen_tmp.as_mut_ptr(), p);
        __bindgen_tmp.assume_init()
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnEdge {
    LN_EDGE_NONE = 0,
    LN_EDGE_RISING = 1,
    LN_EDGE_FALLING = 2,
    LN_EDGE_BOTH = 3,
}
pub type lnExtiCallback =
    ::core::option::Option<unsafe extern "C" fn(pin: lnPin, cookie: *mut cty::c_void)>;
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiAttachInterrupt5lnPin6lnEdgePFvS_PvES1_"]
    pub fn lnExtiAttachInterrupt(
        pin: lnPin,
        edge: lnEdge,
        cb: lnExtiCallback,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiDetachInterrupt5lnPin"]
    pub fn lnExtiDetachInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiEnableInterrupt5lnPin"]
    pub fn lnExtiEnableInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z22lnExtiDisableInterrupt5lnPin"]
    pub fn lnExtiDisableInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z7pinModehh"]
    pub fn pinMode(pin: u8, b: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z12digitalWritehh"]
    pub fn digitalWrite(pin: u8, val: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z13digitalToggleh"]
    pub fn digitalToggle(pin: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z11digitalReadh"]
    pub fn digitalRead(pin: u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10analogReadh"]
    pub fn analogRead(pin: u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z11analogWritehi"]
    pub fn analogWrite(pin: u8, val: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z15attachInterrupthPFvvEi"]
    pub fn attachInterrupt(
        interruptNum: u8,
        userFunc: ::core::option::Option<unsafe extern "C" fn()>,
        mode: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z15detachInterrupth"]
    pub fn detachInterrupt(interruptNum: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z6millisv"]
    pub fn millis() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z6microsv"]
    pub fn micros() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z5delayi"]
    pub fn delay(ms: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z17delayMicrosecondsi"]
    pub fn delayMicroseconds(us: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z12noInterruptsv"]
    pub fn noInterrupts();
}
extern "C" {
    #[link_name = "\u{1}_Z10interruptsv"]
    pub fn interrupts();
}
extern "C" {
    #[link_name = "\u{1}_Z10LoggerInitv"]
    pub fn LoggerInit();
}
extern "C" {
    #[link_name = "\u{1}_Z11debugLoggerPKcz"]
    pub fn debugLogger(fmt: *const cty::c_char, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnBinarySemaphore {
    pub _handle: lnBinarySemaphore_SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEv"]
    pub fn lnBinarySemaphore_take(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore7tryTakeEv"]
    pub fn lnBinarySemaphore_tryTake(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEi"]
    pub fn lnBinarySemaphore_take1(this: *mut lnBinarySemaphore, timeoutMs: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4giveEv"]
    pub fn lnBinarySemaphore_give(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphoreC1Ev"]
    pub fn lnBinarySemaphore_lnBinarySemaphore(this: *mut lnBinarySemaphore);
}
impl lnBinarySemaphore {
    #[inline]
    pub unsafe fn take(&mut self) -> bool {
        lnBinarySemaphore_take(self)
    }
    #[inline]
    pub unsafe fn tryTake(&mut self) -> bool {
        lnBinarySemaphore_tryTake(self)
    }
    #[inline]
    pub unsafe fn take1(&mut self, timeoutMs: cty::c_int) -> bool {
        lnBinarySemaphore_take1(self, timeoutMs)
    }
    #[inline]
    pub unsafe fn give(&mut self) -> bool {
        lnBinarySemaphore_give(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBinarySemaphore_lnBinarySemaphore(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct lnTask__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnTask {
    pub vtable_: *const lnTask__bindgen_vtable,
    pub _taskHandle: lnTask_TaskHandle_t,
    pub _name: *const cty::c_char,
    pub _priority: cty::c_int,
    pub _taskSize: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTask5startEv"]
    pub fn lnTask_start(this: *mut lnTask);
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskC2EPKcii"]
    pub fn lnTask_lnTask(
        this: *mut lnTask,
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    );
}
impl lnTask {
    #[inline]
    pub unsafe fn start(&mut self) {
        lnTask_start(self)
    }
    #[inline]
    pub unsafe fn new(
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTask_lnTask(__bindgen_tmp.as_mut_ptr(), name, priority, taskSize);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskD1Ev"]
    pub fn lnTask_lnTask_destructor(this: *mut lnTask);
}
#[repr(C)]
pub struct lnEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnEventGroup {
    pub vtable_: *const lnEventGroup__bindgen_vtable,
    pub _handle: lnEventGroup_EventGroupHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup9setEventsEj"]
    pub fn lnEventGroup_setEvents(this: *mut lnEventGroup, events: cty::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10waitEventsEji"]
    pub fn lnEventGroup_waitEvents(
        this: *mut lnEventGroup,
        maskint: cty::c_uint,
        timeout: cty::c_int,
    ) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10readEventsEj"]
    pub fn lnEventGroup_readEvents(this: *mut lnEventGroup, maskInt: cty::c_uint) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupC1Ev"]
    pub fn lnEventGroup_lnEventGroup(this: *mut lnEventGroup);
}
impl lnEventGroup {
    #[inline]
    pub unsafe fn setEvents(&mut self, events: cty::c_uint) {
        lnEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(&mut self, maskint: cty::c_uint, timeout: cty::c_int) -> cty::c_uint {
        lnEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: cty::c_uint) -> cty::c_uint {
        lnEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnEventGroup_lnEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupD1Ev"]
    pub fn lnEventGroup_lnEventGroup_destructor(this: *mut lnEventGroup);
}
#[repr(C)]
pub struct lnFastEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnFastEventGroup {
    pub vtable_: *const lnFastEventGroup__bindgen_vtable,
    pub _value: cty::c_uint,
    pub _mask: cty::c_uint,
    pub _waitingTask: lnTask_TaskHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup13takeOwnershipEv"]
    pub fn lnFastEventGroup_takeOwnership(this: *mut lnFastEventGroup);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup9setEventsEj"]
    pub fn lnFastEventGroup_setEvents(this: *mut lnFastEventGroup, events: cty::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10waitEventsEji"]
    pub fn lnFastEventGroup_waitEvents(
        this: *mut lnFastEventGroup,
        maskint: cty::c_uint,
        timeout: cty::c_int,
    ) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10readEventsEj"]
    pub fn lnFastEventGroup_readEvents(
        this: *mut lnFastEventGroup,
        maskInt: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupC1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup(this: *mut lnFastEventGroup);
}
impl lnFastEventGroup {
    #[inline]
    pub unsafe fn takeOwnership(&mut self) {
        lnFastEventGroup_takeOwnership(self)
    }
    #[inline]
    pub unsafe fn setEvents(&mut self, events: cty::c_uint) {
        lnFastEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(&mut self, maskint: cty::c_uint, timeout: cty::c_int) -> cty::c_uint {
        lnFastEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: cty::c_uint) -> cty::c_uint {
        lnFastEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastEventGroup_lnFastEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupD1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup_destructor(this: *mut lnFastEventGroup);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnMutex {
    pub _handle: lnBinarySemaphore_SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex4lockEv"]
    pub fn lnMutex_lock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex6unlockEv"]
    pub fn lnMutex_unlock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutexC1Ev"]
    pub fn lnMutex_lnMutex(this: *mut lnMutex);
}
impl lnMutex {
    #[inline]
    pub unsafe fn lock(&mut self) -> bool {
        lnMutex_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) -> bool {
        lnMutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnMutex_lnMutex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct lnAutoMutex {
    pub _tex: *mut lnMutex,
}
extern "C" {
    #[link_name = "\u{1}_Z6xDelayj"]
    pub fn xDelay(ms: cty::c_uint);
}
#[repr(C)]
pub struct lnPeriodicTimer__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnPeriodicTimer {
    pub vtable_: *const lnPeriodicTimer__bindgen_vtable,
    pub _timerHandle: lnPeriodicTimer_TimerHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN15lnPeriodicTimer4initEPKci"]
    pub fn lnPeriodicTimer_init(
        this: *mut lnPeriodicTimer,
        name: *const cty::c_char,
        periodInMs: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15lnPeriodicTimer5startEv"]
    pub fn lnPeriodicTimer_start(this: *mut lnPeriodicTimer) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15lnPeriodicTimer4stopEv"]
    pub fn lnPeriodicTimer_stop(this: *mut lnPeriodicTimer) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15lnPeriodicTimer7restartEv"]
    pub fn lnPeriodicTimer_restart(this: *mut lnPeriodicTimer) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15lnPeriodicTimerC2Ev"]
    pub fn lnPeriodicTimer_lnPeriodicTimer(this: *mut lnPeriodicTimer);
}
impl lnPeriodicTimer {
    #[inline]
    pub unsafe fn init(&mut self, name: *const cty::c_char, periodInMs: cty::c_int) {
        lnPeriodicTimer_init(self, name, periodInMs)
    }
    #[inline]
    pub unsafe fn start(&mut self) -> bool {
        lnPeriodicTimer_start(self)
    }
    #[inline]
    pub unsafe fn stop(&mut self) -> bool {
        lnPeriodicTimer_stop(self)
    }
    #[inline]
    pub unsafe fn restart(&mut self) -> bool {
        lnPeriodicTimer_restart(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnPeriodicTimer_lnPeriodicTimer(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN15lnPeriodicTimerD1Ev"]
    pub fn lnPeriodicTimer_lnPeriodicTimer_destructor(this: *mut lnPeriodicTimer);
}
extern "C" {
    #[link_name = "\u{1}_Z17lnInitSystemClockv"]
    pub fn lnInitSystemClock();
}
pub const Peripherals_pNONE: Peripherals = 0;
pub const Peripherals_pSPI0: Peripherals = 1;
pub const Peripherals_pSPI1: Peripherals = 2;
pub const Peripherals_pSPI2: Peripherals = 3;
pub const Peripherals_pUART0: Peripherals = 4;
pub const Peripherals_pUART1: Peripherals = 5;
pub const Peripherals_pUART2: Peripherals = 6;
pub const Peripherals_pUART3: Peripherals = 7;
pub const Peripherals_pUART4: Peripherals = 8;
pub const Peripherals_pI2C0: Peripherals = 9;
pub const Peripherals_pI2C1: Peripherals = 10;
pub const Peripherals_pCAN0: Peripherals = 11;
pub const Peripherals_pCAN1: Peripherals = 12;
pub const Peripherals_pDAC: Peripherals = 13;
pub const Peripherals_pPMU: Peripherals = 14;
pub const Peripherals_pBKPI: Peripherals = 15;
pub const Peripherals_pWWDGT: Peripherals = 16;
pub const Peripherals_pTIMER0: Peripherals = 17;
pub const Peripherals_pTIMER1: Peripherals = 18;
pub const Peripherals_pTIMER2: Peripherals = 19;
pub const Peripherals_pTIMER3: Peripherals = 20;
pub const Peripherals_pTIMER4: Peripherals = 21;
pub const Peripherals_pTIMER5: Peripherals = 22;
pub const Peripherals_pTIMER6: Peripherals = 23;
pub const Peripherals_pUSB: Peripherals = 24;
pub const Peripherals_pADC0: Peripherals = 25;
pub const Peripherals_pADC1: Peripherals = 26;
pub const Peripherals_pGPIOA: Peripherals = 27;
pub const Peripherals_pGPIOB: Peripherals = 28;
pub const Peripherals_pGPIOC: Peripherals = 29;
pub const Peripherals_pGPIOD: Peripherals = 30;
pub const Peripherals_pGPIOE: Peripherals = 31;
pub const Peripherals_pAF: Peripherals = 32;
pub const Peripherals_pDMA0: Peripherals = 33;
pub const Peripherals_pDMA1: Peripherals = 34;
pub const Peripherals_pUSBHS_CH32v3x: Peripherals = 35;
pub const Peripherals_pUSBFS_OTG_CH32v3x: Peripherals = 36;
pub const Peripherals_pAPB1: Peripherals = 100;
pub const Peripherals_pAPB2: Peripherals = 101;
pub const Peripherals_pSYSCLOCK: Peripherals = 102;
pub type Peripherals = cty::c_uint;
pub const LnIRQ_LN_IRQ_MSIP: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_NONE: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_RESET: LnIRQ = -12;
pub const LnIRQ_LN_IRQ_NMI: LnIRQ = -11;
pub const LnIRQ_LN_IRQ_HARDFAULT: LnIRQ = -10;
pub const LnIRQ_LN_IRQ_MEMMANAGE: LnIRQ = -9;
pub const LnIRQ_LN_IRQ_BUSFAULT: LnIRQ = -8;
pub const LnIRQ_LN_IRQ_USAGEFAULT: LnIRQ = -7;
pub const LnIRQ_LN_IRQ_RESERVED: LnIRQ = -6;
pub const LnIRQ_LN_IRQ_SVCALL: LnIRQ = -5;
pub const LnIRQ_LN_IRQ_DEBUGMON: LnIRQ = -4;
pub const LnIRQ_LN_IRQ_RESERVED2: LnIRQ = -3;
pub const LnIRQ_LN_IRQ_PENDSV: LnIRQ = -2;
pub const LnIRQ_LN_IRQ_SYSTICK: LnIRQ = -1;
pub const LnIRQ_LN_IRQ_WWDG: LnIRQ = 0;
pub const LnIRQ_LN_IRQ_LVD: LnIRQ = 1;
pub const LnIRQ_LN_IRQ_TAMPER: LnIRQ = 2;
pub const LnIRQ_LN_IRQ_RTC: LnIRQ = 3;
pub const LnIRQ_LN_IRQ_FMC: LnIRQ = 4;
pub const LnIRQ_LN_IRQ_RCU_RCC: LnIRQ = 5;
pub const LnIRQ_LN_IRQ_EXTI0: LnIRQ = 6;
pub const LnIRQ_LN_IRQ_EXTI1: LnIRQ = 7;
pub const LnIRQ_LN_IRQ_EXTI2: LnIRQ = 8;
pub const LnIRQ_LN_IRQ_EXTI3: LnIRQ = 9;
pub const LnIRQ_LN_IRQ_EXTI4: LnIRQ = 10;
pub const LnIRQ_LN_IRQ_DMA0_Channel0: LnIRQ = 11;
pub const LnIRQ_LN_IRQ_DMA0_Channel1: LnIRQ = 12;
pub const LnIRQ_LN_IRQ_DMA0_Channel2: LnIRQ = 13;
pub const LnIRQ_LN_IRQ_DMA0_Channel3: LnIRQ = 14;
pub const LnIRQ_LN_IRQ_DMA0_Channel4: LnIRQ = 15;
pub const LnIRQ_LN_IRQ_DMA0_Channel5: LnIRQ = 16;
pub const LnIRQ_LN_IRQ_DMA0_Channel6: LnIRQ = 17;
pub const LnIRQ_LN_IRQ_ADC0_1: LnIRQ = 18;
pub const LnIRQ_LN_IRQ_USB_HP_CAN_TX: LnIRQ = 19;
pub const LnIRQ_LN_IRQ_USB_LP_CAN_RX0: LnIRQ = 20;
pub const LnIRQ_LN_IRQ_CAN_RX1: LnIRQ = 21;
pub const LnIRQ_LN_IRQ_CAN_SCE: LnIRQ = 22;
pub const LnIRQ_LN_IRQ_EXTI5_9: LnIRQ = 23;
pub const LnIRQ_LN_IRQ_TIMER0_BRK: LnIRQ = 24;
pub const LnIRQ_LN_IRQ_TIMER0_UP: LnIRQ = 25;
pub const LnIRQ_LN_IRQ_TIMER0_TRG_CMT: LnIRQ = 26;
pub const LnIRQ_LN_IRQ_TIMER0_Channel: LnIRQ = 27;
pub const LnIRQ_LN_IRQ_TIMER1: LnIRQ = 28;
pub const LnIRQ_LN_IRQ_TIMER2: LnIRQ = 29;
pub const LnIRQ_LN_IRQ_TIMER3: LnIRQ = 30;
pub const LnIRQ_LN_IRQ_I2C0_EV: LnIRQ = 31;
pub const LnIRQ_LN_IRQ_I2C0_ER: LnIRQ = 32;
pub const LnIRQ_LN_IRQ_I2C1_EV: LnIRQ = 33;
pub const LnIRQ_LN_IRQ_I2C1_ER: LnIRQ = 34;
pub const LnIRQ_LN_IRQ_SPI0: LnIRQ = 35;
pub const LnIRQ_LN_IRQ_SPI1: LnIRQ = 36;
pub const LnIRQ_LN_IRQ_USART0: LnIRQ = 37;
pub const LnIRQ_LN_IRQ_USART1: LnIRQ = 38;
pub const LnIRQ_LN_IRQ_USART2: LnIRQ = 39;
pub const LnIRQ_LN_IRQ_EXTI10_15: LnIRQ = 40;
pub const LnIRQ_LN_IRQ_RTCALARM: LnIRQ = 41;
pub const LnIRQ_LN_IRQ_USBWAKEUP: LnIRQ = 42;
pub const LnIRQ_LN_IRQ_TIMER7_BRK_TIMER12: LnIRQ = 43;
pub const LnIRQ_LN_IRQ_TIMER7_UP_TIMER13: LnIRQ = 44;
pub const LnIRQ_LN_IRQ_TIMER7_TRG_COM_TIMER14: LnIRQ = 45;
pub const LnIRQ_LN_IRQ_TIMER7_CC: LnIRQ = 46;
pub const LnIRQ_LN_IRQ_ADC2: LnIRQ = 47;
pub const LnIRQ_LN_IRQ_FSMC: LnIRQ = 48;
pub const LnIRQ_LN_IRQ_SDIO: LnIRQ = 49;
pub const LnIRQ_LN_IRQ_TIMER4: LnIRQ = 50;
pub const LnIRQ_LN_IRQ_SPI2: LnIRQ = 51;
pub const LnIRQ_LN_IRQ_UART3: LnIRQ = 52;
pub const LnIRQ_LN_IRQ_UART4: LnIRQ = 53;
pub const LnIRQ_LN_IRQ_TIMER5: LnIRQ = 54;
pub const LnIRQ_LN_IRQ_TIMER6: LnIRQ = 55;
pub const LnIRQ_LN_IRQ_DMA1_Channel0: LnIRQ = 56;
pub const LnIRQ_LN_IRQ_DMA1_Channel1: LnIRQ = 57;
pub const LnIRQ_LN_IRQ_DMA1_Channel2: LnIRQ = 58;
pub const LnIRQ_LN_IRQ_DMA1_Channel3: LnIRQ = 59;
pub const LnIRQ_LN_IRQ_DMA1_Channel4: LnIRQ = 60;
pub const LnIRQ_LN_IRQ_ARM_LAST: LnIRQ = 61;
pub type LnIRQ = cty::c_int;
pub type lnInterruptHandler = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_Z17lnEnableInterruptRK5LnIRQ"]
    pub fn lnEnableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z18lnDisableInterruptRK5LnIRQ"]
    pub fn lnDisableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnSetInterruptHandlerRK5LnIRQPFvvE"]
    pub fn lnSetInterruptHandler(irq: *const LnIRQ, handler: lnInterruptHandler);
}
extern "C" {
    #[link_name = "\u{1}_Z16lnIrqSetPriorityRK5LnIRQi"]
    pub fn lnIrqSetPriority(irq: *const LnIRQ, prio: cty::c_int);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnADC_DIVIDER {
    lnADC_CLOCK_DIV_BY_2 = 0,
    lnADC_CLOCK_DIV_BY_4 = 1,
    lnADC_CLOCK_DIV_BY_6 = 2,
    lnADC_CLOCK_DIV_BY_8 = 3,
    lnADC_CLOCK_DIV_BY_12 = 5,
    lnADC_CLOCK_DIV_BY_16 = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnPeripherals {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals5resetE11Peripherals"]
    pub fn lnPeripherals_reset(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals6enableE11Peripherals"]
    pub fn lnPeripherals_enable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals7disableE11Peripherals"]
    pub fn lnPeripherals_disable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals8getClockE11Peripherals"]
    pub fn lnPeripherals_getClock(periph: Peripherals) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals13setAdcDividerE13lnADC_DIVIDER"]
    pub fn lnPeripherals_setAdcDivider(divider: lnADC_DIVIDER);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals14enableUsb48MhzEv"]
    pub fn lnPeripherals_enableUsb48Mhz();
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals24enableUsbHS48Mhz_ch32v3xEv"]
    pub fn lnPeripherals_enableUsbHS48Mhz_ch32v3x();
}
impl lnPeripherals {
    #[inline]
    pub unsafe fn reset(periph: Peripherals) {
        lnPeripherals_reset(periph)
    }
    #[inline]
    pub unsafe fn enable(periph: Peripherals) {
        lnPeripherals_enable(periph)
    }
    #[inline]
    pub unsafe fn disable(periph: Peripherals) {
        lnPeripherals_disable(periph)
    }
    #[inline]
    pub unsafe fn getClock(periph: Peripherals) -> cty::c_uint {
        lnPeripherals_getClock(periph)
    }
    #[inline]
    pub unsafe fn setAdcDivider(divider: lnADC_DIVIDER) {
        lnPeripherals_setAdcDivider(divider)
    }
    #[inline]
    pub unsafe fn enableUsb48Mhz() {
        lnPeripherals_enableUsb48Mhz()
    }
    #[inline]
    pub unsafe fn enableUsbHS48Mhz_ch32v3x() {
        lnPeripherals_enableUsbHS48Mhz_ch32v3x()
    }
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetUsv"]
    pub fn lnGetUs() -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnGetUs64v"]
    pub fn lnGetUs64() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnDelayUsj"]
    pub fn lnDelayUs(wait: cty::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnDelayj"]
    pub fn lnDelay(wait: cty::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetMsv"]
    pub fn lnGetMs() -> cty::c_uint;
}
extern "C" {
    pub static mut lnScratchRegister: cty::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_structx {
    _unused: [u8; 0],
}
pub type DMA_struct = DMA_structx;
#[repr(C)]
#[derive(Debug)]
pub struct lnDMA {
    pub _dma: *mut DMA_struct,
    pub _channelInt: cty::c_int,
    pub _dmaInt: cty::c_int,
    pub _type: lnDMA_DmaTransferType,
    pub _irq: LnIRQ,
    pub _cb: lnDMA_doneCallback,
    pub _cookie: *mut cty::c_void,
    pub _control: cty::c_uint,
    pub _priority: cty::c_uint,
    pub _interruptMask: cty::c_uint,
    pub _sourceWidth: cty::c_int,
    pub _targetWidth: cty::c_int,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnDMA_DmaInterruptType {
    DMA_INTERRUPT_HALF = 0,
    DMA_INTERRUPT_FULL = 1,
}
pub type lnDMA_doneCallback = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut cty::c_void, arg2: lnDMA_DmaInterruptType),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnDMA_DmaTransferType {
    DMA_MEMORY_TO_PERIPH = 0,
    DMA_PERIPH_TO_MEMORY = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnDMA_DmaPriority {
    DMA_PRIORITY_LOW = 0,
    DMA_PRIORITY_NORMAL = 1,
    DMA_PRIORITY_HIGH = 2,
    DMA_PRIORITY_ULTRA_HIGH = 3,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14attachCallbackEPFvPvNS_16DmaInterruptTypeEES0_"]
    pub fn lnDMA_attachCallback(this: *mut lnDMA, cb: lnDMA_doneCallback, cookie: *mut cty::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14detachCallbackEv"]
    pub fn lnDMA_detachCallback(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA34doMemoryToPeripheralTransferNoLockEiPKtS1_bbb"]
    pub fn lnDMA_doMemoryToPeripheralTransferNoLock(
        this: *mut lnDMA,
        count: cty::c_int,
        source: *mut u16,
        target: *const u16,
        repeat: bool,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA34doPeripheralToMemoryTransferNoLockEiPKtS1_bb"]
    pub fn lnDMA_doPeripheralToMemoryTransferNoLock(
        this: *mut lnDMA,
        count: cty::c_int,
        target: *const u16,
        source: *const u16,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA16setInterruptMaskEbb"]
    pub fn lnDMA_setInterruptMask(this: *mut lnDMA, full: bool, half: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11setPriorityENS_11DmaPriorityE"]
    pub fn lnDMA_setPriority(this: *mut lnDMA, prio: lnDMA_DmaPriority);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA13beginTransferEv"]
    pub fn lnDMA_beginTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA15getCurrentCountEv"]
    pub fn lnDMA_getCurrentCount(this: *mut lnDMA) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11endTransferEv"]
    pub fn lnDMA_endTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14cancelTransferEv"]
    pub fn lnDMA_cancelTransfer(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA11setWordSizeEii"]
    pub fn lnDMA_setWordSize(
        this: *mut lnDMA,
        sourceWordSize: cty::c_int,
        targetWordSize: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA14invokeCallbackEj"]
    pub fn lnDMA_invokeCallback(this: *mut lnDMA, pending: cty::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA5pauseEv"]
    pub fn lnDMA_pause(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA6resumeEv"]
    pub fn lnDMA_resume(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA15enableInterruptEv"]
    pub fn lnDMA_enableInterrupt(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMA16disableInterruptEv"]
    pub fn lnDMA_disableInterrupt(this: *mut lnDMA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMAC1ENS_15DmaTransferTypeEiiii"]
    pub fn lnDMA_lnDMA(
        this: *mut lnDMA,
        type_: lnDMA_DmaTransferType,
        dmaEngine: cty::c_int,
        dmaChannel: cty::c_int,
        sourceWith: cty::c_int,
        targetWidth: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDMAD1Ev"]
    pub fn lnDMA_lnDMA_destructor(this: *mut lnDMA);
}
impl lnDMA {
    #[inline]
    pub unsafe fn attachCallback(&mut self, cb: lnDMA_doneCallback, cookie: *mut cty::c_void) {
        lnDMA_attachCallback(self, cb, cookie)
    }
    #[inline]
    pub unsafe fn detachCallback(&mut self) {
        lnDMA_detachCallback(self)
    }
    #[inline]
    pub unsafe fn doMemoryToPeripheralTransferNoLock(
        &mut self,
        count: cty::c_int,
        source: *mut u16,
        target: *const u16,
        repeat: bool,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool {
        lnDMA_doMemoryToPeripheralTransferNoLock(
            self,
            count,
            source,
            target,
            repeat,
            circularMode,
            bothInterrutps,
        )
    }
    #[inline]
    pub unsafe fn doPeripheralToMemoryTransferNoLock(
        &mut self,
        count: cty::c_int,
        target: *const u16,
        source: *const u16,
        circularMode: bool,
        bothInterrutps: bool,
    ) -> bool {
        lnDMA_doPeripheralToMemoryTransferNoLock(
            self,
            count,
            target,
            source,
            circularMode,
            bothInterrutps,
        )
    }
    #[inline]
    pub unsafe fn setInterruptMask(&mut self, full: bool, half: bool) -> bool {
        lnDMA_setInterruptMask(self, full, half)
    }
    #[inline]
    pub unsafe fn setPriority(&mut self, prio: lnDMA_DmaPriority) {
        lnDMA_setPriority(self, prio)
    }
    #[inline]
    pub unsafe fn beginTransfer(&mut self) {
        lnDMA_beginTransfer(self)
    }
    #[inline]
    pub unsafe fn getCurrentCount(&mut self) -> cty::c_uint {
        lnDMA_getCurrentCount(self)
    }
    #[inline]
    pub unsafe fn endTransfer(&mut self) {
        lnDMA_endTransfer(self)
    }
    #[inline]
    pub unsafe fn cancelTransfer(&mut self) {
        lnDMA_cancelTransfer(self)
    }
    #[inline]
    pub unsafe fn setWordSize(&mut self, sourceWordSize: cty::c_int, targetWordSize: cty::c_int) {
        lnDMA_setWordSize(self, sourceWordSize, targetWordSize)
    }
    #[inline]
    pub unsafe fn invokeCallback(&mut self, pending: cty::c_uint) {
        lnDMA_invokeCallback(self, pending)
    }
    #[inline]
    pub unsafe fn pause(&mut self) {
        lnDMA_pause(self)
    }
    #[inline]
    pub unsafe fn resume(&mut self) {
        lnDMA_resume(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self) {
        lnDMA_enableInterrupt(self)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnDMA_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn new(
        type_: lnDMA_DmaTransferType,
        dmaEngine: cty::c_int,
        dmaChannel: cty::c_int,
        sourceWith: cty::c_int,
        targetWidth: cty::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDMA_lnDMA(
            __bindgen_tmp.as_mut_ptr(),
            type_,
            dmaEngine,
            dmaChannel,
            sourceWith,
            targetWidth,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        lnDMA_lnDMA_destructor(self)
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnADC_CYCLES {
    LN_ADC_SMPT_1_5 = 0,
    LN_ADC_SMPT_7_5 = 1,
    LN_ADC_SMPT_13_5 = 2,
    LN_ADC_SMPT_28_5 = 3,
    LN_ADC_SMPT_41_5 = 4,
    LN_ADC_SMPT_55_5 = 5,
    LN_ADC_SMPT_71_5 = 6,
    LN_ADC_SMPT_239_5 = 7,
}
#[repr(C)]
pub struct lnBaseAdc__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnBaseAdc {
    pub vtable_: *const lnBaseAdc__bindgen_vtable,
    pub _instance: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7getVrefEv"]
    pub fn lnBaseAdc_getVref(this: *mut lnBaseAdc) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc6getVccEv"]
    pub fn lnBaseAdc_getVcc() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7setSmptE12lnADC_CYCLES"]
    pub fn lnBaseAdc_setSmpt(this: *mut lnBaseAdc, cycles: lnADC_CYCLES);
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc7readVccEv"]
    pub fn lnBaseAdc_readVcc(this: *mut lnBaseAdc);
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc10adcChannelE5lnPin"]
    pub fn lnBaseAdc_adcChannel(pin: lnPin) -> cty::c_int;
}
impl lnBaseAdc {
    #[inline]
    pub unsafe fn getVref(&mut self) -> cty::c_int {
        lnBaseAdc_getVref(self)
    }
    #[inline]
    pub unsafe fn getVcc() -> f32 {
        lnBaseAdc_getVcc()
    }
    #[inline]
    pub unsafe fn setSmpt(&mut self, cycles: lnADC_CYCLES) {
        lnBaseAdc_setSmpt(self, cycles)
    }
    #[inline]
    pub unsafe fn readVcc(&mut self) {
        lnBaseAdc_readVcc(self)
    }
    #[inline]
    pub unsafe fn adcChannel(pin: lnPin) -> cty::c_int {
        lnBaseAdc_adcChannel(pin)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN9lnBaseAdc5setupEv"]
    pub fn lnBaseAdc_setup(this: *mut cty::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnSimpleADC {
    pub _base: lnBaseAdc,
    pub _pin: lnPin,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC3pinEv"]
    pub fn lnSimpleADC_pin(this: *mut lnSimpleADC) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC6setPinE5lnPin"]
    pub fn lnSimpleADC_setPin(this: *mut lnSimpleADC, pin: lnPin) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC10simpleReadEv"]
    pub fn lnSimpleADC_simpleRead(this: *mut lnSimpleADC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC16pollingMultiReadEiP5lnPinPt"]
    pub fn lnSimpleADC_pollingMultiRead(
        this: *mut lnSimpleADC,
        nbPins: cty::c_int,
        pins: *mut lnPin,
        output: *mut u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC7getVrefEv"]
    pub fn lnSimpleADC_getVref(this: *mut lnSimpleADC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC6getVccEv"]
    pub fn lnSimpleADC_getVcc() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC7readVccEv"]
    pub fn lnSimpleADC_readVcc(this: *mut lnSimpleADC);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADCC1Ei5lnPin"]
    pub fn lnSimpleADC_lnSimpleADC(this: *mut lnSimpleADC, instance: cty::c_int, pin: lnPin);
}
impl lnSimpleADC {
    #[inline]
    pub unsafe fn pin(&mut self) -> lnPin {
        lnSimpleADC_pin(self)
    }
    #[inline]
    pub unsafe fn setPin(&mut self, pin: lnPin) -> bool {
        lnSimpleADC_setPin(self, pin)
    }
    #[inline]
    pub unsafe fn simpleRead(&mut self) -> cty::c_int {
        lnSimpleADC_simpleRead(self)
    }
    #[inline]
    pub unsafe fn pollingMultiRead(
        &mut self,
        nbPins: cty::c_int,
        pins: *mut lnPin,
        output: *mut u16,
    ) -> bool {
        lnSimpleADC_pollingMultiRead(self, nbPins, pins, output)
    }
    #[inline]
    pub unsafe fn getVref(&mut self) -> cty::c_int {
        lnSimpleADC_getVref(self)
    }
    #[inline]
    pub unsafe fn getVcc() -> f32 {
        lnSimpleADC_getVcc()
    }
    #[inline]
    pub unsafe fn readVcc(&mut self) {
        lnSimpleADC_readVcc(self)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int, pin: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnSimpleADC_lnSimpleADC(__bindgen_tmp.as_mut_ptr(), instance, pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADCD1Ev"]
    pub fn lnSimpleADC_lnSimpleADC_destructor(this: *mut lnSimpleADC);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnSimpleADC5setupEv"]
    pub fn lnSimpleADC_setup(this: *mut cty::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnTimingAdc {
    pub _base: lnBaseAdc,
    pub _timer: cty::c_int,
    pub _channel: cty::c_int,
    pub _fq: cty::c_int,
    pub _dma: lnDMA,
    pub _dmaSem: lnBinarySemaphore,
    pub _adcTimer: *mut lnAdcTimer,
    pub _nbPins: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc9setSourceEiiiiPK5lnPin"]
    pub fn lnTimingAdc_setSource(
        this: *mut lnTimingAdc,
        timer: cty::c_int,
        channel: cty::c_int,
        fq: cty::c_int,
        nbPins: cty::c_int,
        pins: *const lnPin,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc9multiReadEiPt"]
    pub fn lnTimingAdc_multiRead(
        this: *mut lnTimingAdc,
        nbSamplePerChannel: cty::c_int,
        output: *mut u16,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc8dmaDone_EPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnTimingAdc_dmaDone_(foo: *mut cty::c_void, typ: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdc7dmaDoneEv"]
    pub fn lnTimingAdc_dmaDone(this: *mut lnTimingAdc);
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdcC1Ei"]
    pub fn lnTimingAdc_lnTimingAdc(this: *mut lnTimingAdc, instance: cty::c_int);
}
impl lnTimingAdc {
    #[inline]
    pub unsafe fn setSource(
        &mut self,
        timer: cty::c_int,
        channel: cty::c_int,
        fq: cty::c_int,
        nbPins: cty::c_int,
        pins: *const lnPin,
    ) -> bool {
        lnTimingAdc_setSource(self, timer, channel, fq, nbPins, pins)
    }
    #[inline]
    pub unsafe fn multiRead(&mut self, nbSamplePerChannel: cty::c_int, output: *mut u16) -> bool {
        lnTimingAdc_multiRead(self, nbSamplePerChannel, output)
    }
    #[inline]
    pub unsafe fn dmaDone_(foo: *mut cty::c_void, typ: lnDMA_DmaInterruptType) {
        lnTimingAdc_dmaDone_(foo, typ)
    }
    #[inline]
    pub unsafe fn dmaDone(&mut self) {
        lnTimingAdc_dmaDone(self)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimingAdc_lnTimingAdc(__bindgen_tmp.as_mut_ptr(), instance);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnTimingAdcD1Ev"]
    pub fn lnTimingAdc_lnTimingAdc_destructor(this: *mut lnTimingAdc);
}
pub type lnBasicTimerIrq = ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void)>;
#[repr(C)]
pub struct lnBasicTimer__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnBasicTimer {
    pub vtable_: *const lnBasicTimer__bindgen_vtable,
    pub _timer: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17setTimerFrequencyEi"]
    pub fn lnBasicTimer_setTimerFrequency(this: *mut lnBasicTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17setTimerFrequencyEii"]
    pub fn lnBasicTimer_setTimerFrequency1(
        this: *mut lnBasicTimer,
        prediv: cty::c_int,
        reload: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer17getTimerFrequencyEv"]
    pub fn lnBasicTimer_getTimerFrequency(this: *mut lnBasicTimer) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer7disableEv"]
    pub fn lnBasicTimer_disable(this: *mut lnBasicTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimer6enableEv"]
    pub fn lnBasicTimer_enable(this: *mut lnBasicTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimerC1Ei"]
    pub fn lnBasicTimer_lnBasicTimer(this: *mut lnBasicTimer, timer: cty::c_int);
}
impl lnBasicTimer {
    #[inline]
    pub unsafe fn setTimerFrequency(&mut self, fqInHz: cty::c_int) {
        lnBasicTimer_setTimerFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setTimerFrequency1(&mut self, prediv: cty::c_int, reload: cty::c_int) {
        lnBasicTimer_setTimerFrequency1(self, prediv, reload)
    }
    #[inline]
    pub unsafe fn getTimerFrequency(&mut self) -> cty::c_int {
        lnBasicTimer_getTimerFrequency(self)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnBasicTimer_disable(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnBasicTimer_enable(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBasicTimer_lnBasicTimer(__bindgen_tmp.as_mut_ptr(), timer);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnBasicTimerD1Ev"]
    pub fn lnBasicTimer_lnBasicTimer_destructor(this: *mut lnBasicTimer);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnBasicDelayTimer {
    pub _base: lnBasicTimer,
    pub _handler: lnBasicTimerIrq,
    pub _cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer3armEi"]
    pub fn lnBasicDelayTimer_arm(this: *mut lnBasicDelayTimer, delayUs: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer12setInterruptEPFvPvES0_"]
    pub fn lnBasicDelayTimer_setInterrupt(
        this: *mut lnBasicDelayTimer,
        handler: lnBasicTimerIrq,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer16interruptHandlerEi"]
    pub fn lnBasicDelayTimer_interruptHandler(timer: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer3irqEv"]
    pub fn lnBasicDelayTimer_irq(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer15enableInterruptEv"]
    pub fn lnBasicDelayTimer_enableInterrupt(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimer16disableInterruptEv"]
    pub fn lnBasicDelayTimer_disableInterrupt(this: *mut lnBasicDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimerC1Ei"]
    pub fn lnBasicDelayTimer_lnBasicDelayTimer(this: *mut lnBasicDelayTimer, timer: cty::c_int);
}
impl lnBasicDelayTimer {
    #[inline]
    pub unsafe fn arm(&mut self, delayUs: cty::c_int) {
        lnBasicDelayTimer_arm(self, delayUs)
    }
    #[inline]
    pub unsafe fn setInterrupt(&mut self, handler: lnBasicTimerIrq, cookie: *mut cty::c_void) {
        lnBasicDelayTimer_setInterrupt(self, handler, cookie)
    }
    #[inline]
    pub unsafe fn interruptHandler(timer: cty::c_int) {
        lnBasicDelayTimer_interruptHandler(timer)
    }
    #[inline]
    pub unsafe fn irq(&mut self) {
        lnBasicDelayTimer_irq(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self) {
        lnBasicDelayTimer_enableInterrupt(self)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnBasicDelayTimer_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBasicDelayTimer_lnBasicDelayTimer(__bindgen_tmp.as_mut_ptr(), timer);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBasicDelayTimerD1Ev"]
    pub fn lnBasicDelayTimer_lnBasicDelayTimer_destructor(this: *mut lnBasicDelayTimer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnCpuID {
    pub _address: u8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnCpuID_LN_VENDOR {
    LN_MCU_STM32 = 0,
    LN_MCU_GD32 = 1,
    LN_MCU_CH32 = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnCpuID_LN_MCU {
    LN_MCU_ARM_F3 = 0,
    LN_MCU_ARM_F4 = 1,
    LN_MCU_RISCV = 2,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID8identifyEv"]
    pub fn lnCpuID_identify();
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID6vendorEv"]
    pub fn lnCpuID_vendor() -> lnCpuID_LN_VENDOR;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID3mcuEv"]
    pub fn lnCpuID_mcu() -> lnCpuID_LN_MCU;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID11mcuAsStringEv"]
    pub fn lnCpuID_mcuAsString() -> *const cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID9flashSizeEv"]
    pub fn lnCpuID_flashSize() -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID7ramSizeEv"]
    pub fn lnCpuID_ramSize() -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID10idAsStringEv"]
    pub fn lnCpuID_idAsString() -> *const cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnCpuID10clockSpeedEv"]
    pub fn lnCpuID_clockSpeed() -> cty::c_int;
}
impl lnCpuID {
    #[inline]
    pub unsafe fn identify() {
        lnCpuID_identify()
    }
    #[inline]
    pub unsafe fn vendor() -> lnCpuID_LN_VENDOR {
        lnCpuID_vendor()
    }
    #[inline]
    pub unsafe fn mcu() -> lnCpuID_LN_MCU {
        lnCpuID_mcu()
    }
    #[inline]
    pub unsafe fn mcuAsString() -> *const cty::c_char {
        lnCpuID_mcuAsString()
    }
    #[inline]
    pub unsafe fn flashSize() -> cty::c_int {
        lnCpuID_flashSize()
    }
    #[inline]
    pub unsafe fn ramSize() -> cty::c_int {
        lnCpuID_ramSize()
    }
    #[inline]
    pub unsafe fn idAsString() -> *const cty::c_char {
        lnCpuID_idAsString()
    }
    #[inline]
    pub unsafe fn clockSpeed() -> cty::c_int {
        lnCpuID_clockSpeed()
    }
}
#[repr(C)]
pub struct lnDAC__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnDAC {
    pub vtable_: *const lnDAC__bindgen_vtable,
    pub _instance: cty::c_int,
    pub _dma: lnDMA,
    pub _timer: *mut lnBasicTimer,
    pub _dmaSem: lnBinarySemaphore,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC3pinEv"]
    pub fn lnDAC_pin(this: *mut lnDAC) -> lnPin;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC6enableEv"]
    pub fn lnDAC_enable(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC7disableEv"]
    pub fn lnDAC_disable(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC10simpleModeEv"]
    pub fn lnDAC_simpleMode(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8setValueEi"]
    pub fn lnDAC_setValue(this: *mut lnDAC, value: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC12startDmaModeEi"]
    pub fn lnDAC_startDmaMode(this: *mut lnDAC, fq: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC11stopDmaModeEv"]
    pub fn lnDAC_stopDmaMode(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC15getDmaFrequencyEv"]
    pub fn lnDAC_getDmaFrequency(this: *mut lnDAC) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8dmaWriteEiPtb"]
    pub fn lnDAC_dmaWrite(this: *mut lnDAC, nbn: cty::c_int, data: *mut u16, loop_: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC8dmaDone_EPvN5lnDMA16DmaInterruptTypeE"]
    pub fn lnDAC_dmaDone_(t: *mut cty::c_void, typ: lnDMA_DmaInterruptType);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC7dmaDoneEv"]
    pub fn lnDAC_dmaDone(this: *mut lnDAC);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDAC16dmaWriteInternalEiPtb"]
    pub fn lnDAC_dmaWriteInternal(this: *mut lnDAC, nb: cty::c_int, data: *mut u16, loop_: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDACC1Ei"]
    pub fn lnDAC_lnDAC(this: *mut lnDAC, instance: cty::c_int);
}
impl lnDAC {
    #[inline]
    pub unsafe fn pin(&mut self) -> lnPin {
        lnDAC_pin(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnDAC_enable(self)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnDAC_disable(self)
    }
    #[inline]
    pub unsafe fn simpleMode(&mut self) {
        lnDAC_simpleMode(self)
    }
    #[inline]
    pub unsafe fn setValue(&mut self, value: cty::c_int) {
        lnDAC_setValue(self, value)
    }
    #[inline]
    pub unsafe fn startDmaMode(&mut self, fq: cty::c_int) {
        lnDAC_startDmaMode(self, fq)
    }
    #[inline]
    pub unsafe fn stopDmaMode(&mut self) {
        lnDAC_stopDmaMode(self)
    }
    #[inline]
    pub unsafe fn getDmaFrequency(&mut self) -> cty::c_int {
        lnDAC_getDmaFrequency(self)
    }
    #[inline]
    pub unsafe fn dmaWrite(&mut self, nbn: cty::c_int, data: *mut u16, loop_: bool) {
        lnDAC_dmaWrite(self, nbn, data, loop_)
    }
    #[inline]
    pub unsafe fn dmaDone_(t: *mut cty::c_void, typ: lnDMA_DmaInterruptType) {
        lnDAC_dmaDone_(t, typ)
    }
    #[inline]
    pub unsafe fn dmaDone(&mut self) {
        lnDAC_dmaDone(self)
    }
    #[inline]
    pub unsafe fn dmaWriteInternal(&mut self, nb: cty::c_int, data: *mut u16, loop_: bool) {
        lnDAC_dmaWriteInternal(self, nb, data, loop_)
    }
    #[inline]
    pub unsafe fn new(instance: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDAC_lnDAC(__bindgen_tmp.as_mut_ptr(), instance);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnDACD1Ev"]
    pub fn lnDAC_lnDAC_destructor(this: *mut lnDAC);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnFMC {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC5eraseEji"]
    pub fn lnFMC_erase(startAddress: cty::c_uint, sizeInKBytes: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC5writeEjPKhi"]
    pub fn lnFMC_write(startAddress: cty::c_uint, data: *const u8, sizeInBytes: cty::c_int)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC8eraseStmEji"]
    pub fn lnFMC_eraseStm(startAddress: cty::c_uint, sizeInKBytes: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5lnFMC9eraseCh32Eji"]
    pub fn lnFMC_eraseCh32(startAddress: cty::c_uint, sizeInKBytes: cty::c_int) -> bool;
}
impl lnFMC {
    #[inline]
    pub unsafe fn erase(startAddress: cty::c_uint, sizeInKBytes: cty::c_int) -> bool {
        lnFMC_erase(startAddress, sizeInKBytes)
    }
    #[inline]
    pub unsafe fn write(
        startAddress: cty::c_uint,
        data: *const u8,
        sizeInBytes: cty::c_int,
    ) -> bool {
        lnFMC_write(startAddress, data, sizeInBytes)
    }
    #[inline]
    pub unsafe fn eraseStm(startAddress: cty::c_uint, sizeInKBytes: cty::c_int) -> bool {
        lnFMC_eraseStm(startAddress, sizeInKBytes)
    }
    #[inline]
    pub unsafe fn eraseCh32(startAddress: cty::c_uint, sizeInKBytes: cty::c_int) -> bool {
        lnFMC_eraseCh32(startAddress, sizeInKBytes)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnStopWatch {
    pub _start: cty::c_uint,
    pub _end: cty::c_uint,
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatch7restartEi"]
    pub fn lnStopWatch_restart(this: *mut lnStopWatch, durationMs: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatch7elapsedEv"]
    pub fn lnStopWatch_elapsed(this: *mut lnStopWatch) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11lnStopWatchC1Ei"]
    pub fn lnStopWatch_lnStopWatch(this: *mut lnStopWatch, ms: cty::c_int);
}
impl lnStopWatch {
    #[inline]
    pub unsafe fn restart(&mut self, durationMs: cty::c_int) -> bool {
        lnStopWatch_restart(self, durationMs)
    }
    #[inline]
    pub unsafe fn elapsed(&mut self) -> bool {
        lnStopWatch_elapsed(self)
    }
    #[inline]
    pub unsafe fn new(ms: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnStopWatch_lnStopWatch(__bindgen_tmp.as_mut_ptr(), ms);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnCycleClock {
    pub _start: cty::c_uint,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClock7restartEv"]
    pub fn lnCycleClock_restart(this: *mut lnCycleClock);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClock7elapsedEv"]
    pub fn lnCycleClock_elapsed(this: *mut lnCycleClock) -> cty::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnCycleClockC1Ev"]
    pub fn lnCycleClock_lnCycleClock(this: *mut lnCycleClock);
}
impl lnCycleClock {
    #[inline]
    pub unsafe fn restart(&mut self) {
        lnCycleClock_restart(self)
    }
    #[inline]
    pub unsafe fn elapsed(&mut self) -> cty::c_uint {
        lnCycleClock_elapsed(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnCycleClock_lnCycleClock(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type lnTimerIrq = ::core::option::Option<unsafe extern "C" fn(cookie: *mut cty::c_void)>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum lnTimerMode {
    lnTimerModePwm0 = 0,
    lnTimerModePwm1 = 1,
}
#[repr(C)]
pub struct lnTimer__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnTimer {
    pub vtable_: *const lnTimer__bindgen_vtable,
    pub _timer: cty::c_int,
    pub _channel: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer10setPwmModeEi"]
    pub fn lnTimer_setPwmMode(this: *mut lnTimer, ratio100: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer15setPwmFrequencyEi"]
    pub fn lnTimer_setPwmFrequency(this: *mut lnTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer15setChannelRatioEi"]
    pub fn lnTimer_setChannelRatio(this: *mut lnTimer, ratio100: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer10singleShotEib"]
    pub fn lnTimer_singleShot(this: *mut lnTimer, durationMs: cty::c_int, down: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer13setForceStateEb"]
    pub fn lnTimer_setForceState(this: *mut lnTimer, forceHigh: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer7disableEv"]
    pub fn lnTimer_disable(this: *mut lnTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer6enableEv"]
    pub fn lnTimer_enable(this: *mut lnTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer16setTickFrequencyEi"]
    pub fn lnTimer_setTickFrequency(this: *mut lnTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimer7setModeE11lnTimerMode"]
    pub fn lnTimer_setMode(this: *mut lnTimer, mode: lnTimerMode);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerC1Eii"]
    pub fn lnTimer_lnTimer(this: *mut lnTimer, timer: cty::c_int, channel: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerC1Ei"]
    pub fn lnTimer_lnTimer1(this: *mut lnTimer, pin: cty::c_int);
}
impl lnTimer {
    #[inline]
    pub unsafe fn setPwmMode(&mut self, ratio100: cty::c_int) {
        lnTimer_setPwmMode(self, ratio100)
    }
    #[inline]
    pub unsafe fn setPwmFrequency(&mut self, fqInHz: cty::c_int) {
        lnTimer_setPwmFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setChannelRatio(&mut self, ratio100: cty::c_int) {
        lnTimer_setChannelRatio(self, ratio100)
    }
    #[inline]
    pub unsafe fn singleShot(&mut self, durationMs: cty::c_int, down: bool) {
        lnTimer_singleShot(self, durationMs, down)
    }
    #[inline]
    pub unsafe fn setForceState(&mut self, forceHigh: bool) {
        lnTimer_setForceState(self, forceHigh)
    }
    #[inline]
    pub unsafe fn disable(&mut self) {
        lnTimer_disable(self)
    }
    #[inline]
    pub unsafe fn enable(&mut self) {
        lnTimer_enable(self)
    }
    #[inline]
    pub unsafe fn setTickFrequency(&mut self, fqInHz: cty::c_int) {
        lnTimer_setTickFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn setMode(&mut self, mode: lnTimerMode) {
        lnTimer_setMode(self, mode)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int, channel: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimer_lnTimer(__bindgen_tmp.as_mut_ptr(), timer, channel);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(pin: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTimer_lnTimer1(__bindgen_tmp.as_mut_ptr(), pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnTimerD1Ev"]
    pub fn lnTimer_lnTimer_destructor(this: *mut lnTimer);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnAdcTimer {
    pub _base: lnTimer,
    pub _actualPwmFrequency: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnAdcTimer15setPwmFrequencyEi"]
    pub fn lnAdcTimer_setPwmFrequency(this: *mut lnAdcTimer, fqInHz: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnAdcTimer15getPwmFrequencyEv"]
    pub fn lnAdcTimer_getPwmFrequency(this: *mut lnAdcTimer) -> cty::c_int;
}
impl lnAdcTimer {
    #[inline]
    pub unsafe fn setPwmFrequency(&mut self, fqInHz: cty::c_int) {
        lnAdcTimer_setPwmFrequency(self, fqInHz)
    }
    #[inline]
    pub unsafe fn getPwmFrequency(&mut self) -> cty::c_int {
        lnAdcTimer_getPwmFrequency(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct lnSquareSignal {
    pub _base: lnTimer,
}
extern "C" {
    #[link_name = "\u{1}_ZN14lnSquareSignal12setFrequencyEi"]
    pub fn lnSquareSignal_setFrequency(this: *mut lnSquareSignal, fqInHz: cty::c_int);
}
impl lnSquareSignal {
    #[inline]
    pub unsafe fn setFrequency(&mut self, fqInHz: cty::c_int) {
        lnSquareSignal_setFrequency(self, fqInHz)
    }
}
#[repr(C)]
pub struct lnDmaTimerCallback__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnDmaTimerCallback {
    pub vtable_: *const lnDmaTimerCallback__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug)]
pub struct lnDmaTimer {
    pub _base: lnTimer,
    pub _cb: *mut lnDmaTimerCallback,
    pub _rollover: cty::c_int,
    pub _dma: *mut lnDMA,
    pub _bits: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer8pwmSetupEi"]
    pub fn lnDmaTimer_pwmSetup(this: *mut lnDmaTimer, frequency: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer8rolloverEv"]
    pub fn lnDmaTimer_rollover(this: *mut lnDmaTimer) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer17attachDmaCallbackEP18lnDmaTimerCallback"]
    pub fn lnDmaTimer_attachDmaCallback(this: *mut lnDmaTimer, cb: *mut lnDmaTimerCallback)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer5startEiPh"]
    pub fn lnDmaTimer_start(this: *mut lnDmaTimer, nbSample: cty::c_int, data: *mut u8) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer4stopEv"]
    pub fn lnDmaTimer_stop(this: *mut lnDmaTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer16setTickFrequencyEi"]
    pub fn lnDmaTimer_setTickFrequency(this: *mut lnDmaTimer, fq: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimer12dmaInterruptEb"]
    pub fn lnDmaTimer_dmaInterrupt(this: *mut lnDmaTimer, h: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimerC1Ei5lnPin"]
    pub fn lnDmaTimer_lnDmaTimer(this: *mut lnDmaTimer, bits: cty::c_int, pin: lnPin);
}
impl lnDmaTimer {
    #[inline]
    pub unsafe fn pwmSetup(&mut self, frequency: cty::c_int) -> bool {
        lnDmaTimer_pwmSetup(self, frequency)
    }
    #[inline]
    pub unsafe fn rollover(&mut self) -> cty::c_int {
        lnDmaTimer_rollover(self)
    }
    #[inline]
    pub unsafe fn attachDmaCallback(&mut self, cb: *mut lnDmaTimerCallback) -> bool {
        lnDmaTimer_attachDmaCallback(self, cb)
    }
    #[inline]
    pub unsafe fn start(&mut self, nbSample: cty::c_int, data: *mut u8) -> bool {
        lnDmaTimer_start(self, nbSample, data)
    }
    #[inline]
    pub unsafe fn stop(&mut self) {
        lnDmaTimer_stop(self)
    }
    #[inline]
    pub unsafe fn setTickFrequency(&mut self, fq: cty::c_int) -> bool {
        lnDmaTimer_setTickFrequency(self, fq)
    }
    #[inline]
    pub unsafe fn dmaInterrupt(&mut self, h: bool) {
        lnDmaTimer_dmaInterrupt(self, h)
    }
    #[inline]
    pub unsafe fn new(bits: cty::c_int, pin: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDmaTimer_lnDmaTimer(__bindgen_tmp.as_mut_ptr(), bits, pin);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN10lnDmaTimerD1Ev"]
    pub fn lnDmaTimer_lnDmaTimer_destructor(this: *mut lnDmaTimer);
}
#[repr(C)]
#[derive(Debug)]
pub struct lnDelayTimer {
    pub _base: lnTimer,
    pub _handler: lnTimerIrq,
    pub _cookie: *mut cty::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer3armEi"]
    pub fn lnDelayTimer_arm(this: *mut lnDelayTimer, delayUs: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer12setInterruptEPFvPvES0_"]
    pub fn lnDelayTimer_setInterrupt(
        this: *mut lnDelayTimer,
        handler: lnTimerIrq,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer16interruptHandlerEi"]
    pub fn lnDelayTimer_interruptHandler(timer: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer3irqEv"]
    pub fn lnDelayTimer_irq(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer15enableInterruptEv"]
    pub fn lnDelayTimer_enableInterrupt(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimer16disableInterruptEv"]
    pub fn lnDelayTimer_disableInterrupt(this: *mut lnDelayTimer);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimerC1Eii"]
    pub fn lnDelayTimer_lnDelayTimer(
        this: *mut lnDelayTimer,
        timer: cty::c_int,
        channel: cty::c_int,
    );
}
impl lnDelayTimer {
    #[inline]
    pub unsafe fn arm(&mut self, delayUs: cty::c_int) {
        lnDelayTimer_arm(self, delayUs)
    }
    #[inline]
    pub unsafe fn setInterrupt(&mut self, handler: lnTimerIrq, cookie: *mut cty::c_void) {
        lnDelayTimer_setInterrupt(self, handler, cookie)
    }
    #[inline]
    pub unsafe fn interruptHandler(timer: cty::c_int) {
        lnDelayTimer_interruptHandler(timer)
    }
    #[inline]
    pub unsafe fn irq(&mut self) {
        lnDelayTimer_irq(self)
    }
    #[inline]
    pub unsafe fn enableInterrupt(&mut self) {
        lnDelayTimer_enableInterrupt(self)
    }
    #[inline]
    pub unsafe fn disableInterrupt(&mut self) {
        lnDelayTimer_disableInterrupt(self)
    }
    #[inline]
    pub unsafe fn new(timer: cty::c_int, channel: cty::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnDelayTimer_lnDelayTimer(__bindgen_tmp.as_mut_ptr(), timer, channel);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnDelayTimerD1Ev"]
    pub fn lnDelayTimer_lnDelayTimer_destructor(this: *mut lnDelayTimer);
}
pub type __uint8_t = cty::c_uchar;
pub type __uint64_t = cty::c_ulonglong;
pub type lnBinarySemaphore_SemaphoreHandle_t = QueueHandle_t;
pub type QueueHandle_t = *mut QueueDefinition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    pub _address: u8,
}
pub type lnTask_TaskHandle_t = *mut tskTaskControlBlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    pub _address: u8,
}
pub type lnEventGroup_EventGroupHandle_t = *mut EventGroupDef_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventGroupDef_t {
    pub _address: u8,
}
pub type lnPeriodicTimer_TimerHandle_t = *mut tmrTimerControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmrTimerControl {
    pub _address: u8,
}
pub type __uint16_t = cty::c_ushort;
unsafe impl Send for lnFastEventGroup {}
unsafe impl Sync for lnFastEventGroup {}
